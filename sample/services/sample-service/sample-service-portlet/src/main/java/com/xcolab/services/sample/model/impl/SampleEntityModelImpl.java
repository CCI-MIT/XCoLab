package com.xcolab.services.sample.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.xcolab.services.sample.model.SampleEntity;
import com.xcolab.services.sample.model.SampleEntityModel;
import com.xcolab.services.sample.model.SampleEntitySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the SampleEntity service. Represents a row in the &quot;sample_SampleEntity&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.xcolab.services.sample.model.SampleEntityModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SampleEntityImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SampleEntityImpl
 * @see com.xcolab.services.sample.model.SampleEntity
 * @see com.xcolab.services.sample.model.SampleEntityModel
 * @generated
 */
@JSON(strict = true)
public class SampleEntityModelImpl extends BaseModelImpl<SampleEntity>
    implements SampleEntityModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a sample entity model instance should use the {@link com.xcolab.services.sample.model.SampleEntity} interface instead.
     */
    public static final String TABLE_NAME = "sample_SampleEntity";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "content", Types.VARCHAR },
            { "created", Types.TIMESTAMP },
            { "authorId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table sample_SampleEntity (id_ LONG not null primary key,content VARCHAR(75) null,created DATE null,authorId LONG)";
    public static final String TABLE_SQL_DROP = "drop table sample_SampleEntity";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.xcolab.services.sample.model.SampleEntity"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.xcolab.services.sample.model.SampleEntity"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.xcolab.services.sample.model.SampleEntity"));
    private static ClassLoader _classLoader = SampleEntity.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            SampleEntity.class
        };
    private long _id;
    private String _content;
    private Date _created;
    private long _authorId;
    private transient ExpandoBridge _expandoBridge;
    private SampleEntity _escapedModelProxy;

    public SampleEntityModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static SampleEntity toModel(SampleEntitySoap soapModel) {
        SampleEntity model = new SampleEntityImpl();

        model.setId(soapModel.getId());
        model.setContent(soapModel.getContent());
        model.setCreated(soapModel.getCreated());
        model.setAuthorId(soapModel.getAuthorId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<SampleEntity> toModels(SampleEntitySoap[] soapModels) {
        List<SampleEntity> models = new ArrayList<SampleEntity>(soapModels.length);

        for (SampleEntitySoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public long getPrimaryKey() {
        return _id;
    }

    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_id);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return SampleEntity.class;
    }

    public String getModelClassName() {
        return SampleEntity.class.getName();
    }

    @JSON
    public long getId() {
        return _id;
    }

    public void setId(long id) {
        _id = id;
    }

    @JSON
    public String getContent() {
        if (_content == null) {
            return StringPool.BLANK;
        } else {
            return _content;
        }
    }

    public void setContent(String content) {
        _content = content;
    }

    @JSON
    public Date getCreated() {
        return _created;
    }

    public void setCreated(Date created) {
        _created = created;
    }

    @JSON
    public long getAuthorId() {
        return _authorId;
    }

    public void setAuthorId(long authorId) {
        _authorId = authorId;
    }

    @Override
    public SampleEntity toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (SampleEntity) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        if (_expandoBridge == null) {
            _expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
                    SampleEntity.class.getName(), getPrimaryKey());
        }

        return _expandoBridge;
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        getExpandoBridge().setAttributes(serviceContext);
    }

    @Override
    public Object clone() {
        SampleEntityImpl sampleEntityImpl = new SampleEntityImpl();

        sampleEntityImpl.setId(getId());
        sampleEntityImpl.setContent(getContent());
        sampleEntityImpl.setCreated(getCreated());
        sampleEntityImpl.setAuthorId(getAuthorId());

        sampleEntityImpl.resetOriginalValues();

        return sampleEntityImpl;
    }

    public int compareTo(SampleEntity sampleEntity) {
        long primaryKey = sampleEntity.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        SampleEntity sampleEntity = null;

        try {
            sampleEntity = (SampleEntity) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = sampleEntity.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<SampleEntity> toCacheModel() {
        SampleEntityCacheModel sampleEntityCacheModel = new SampleEntityCacheModel();

        sampleEntityCacheModel.id = getId();

        sampleEntityCacheModel.content = getContent();

        String content = sampleEntityCacheModel.content;

        if ((content != null) && (content.length() == 0)) {
            sampleEntityCacheModel.content = null;
        }

        Date created = getCreated();

        if (created != null) {
            sampleEntityCacheModel.created = created.getTime();
        } else {
            sampleEntityCacheModel.created = Long.MIN_VALUE;
        }

        sampleEntityCacheModel.authorId = getAuthorId();

        return sampleEntityCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(9);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", content=");
        sb.append(getContent());
        sb.append(", created=");
        sb.append(getCreated());
        sb.append(", authorId=");
        sb.append(getAuthorId());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(16);

        sb.append("<model><model-name>");
        sb.append("com.xcolab.services.sample.model.SampleEntity");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>content</column-name><column-value><![CDATA[");
        sb.append(getContent());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>created</column-name><column-value><![CDATA[");
        sb.append(getCreated());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>authorId</column-name><column-value><![CDATA[");
        sb.append(getAuthorId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
