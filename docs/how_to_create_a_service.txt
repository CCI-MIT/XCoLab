How to create a service:

1. ${XCOLAB_SRC}/services/

2. Execute 
  mvn archetype:generate

3. Choose liferay-portlet-archetype (if you can't see all available options execute "mvn archetype:generate > list" and after few seconds press ctrl+c, list of archetypes will be available in "list" file)

4. Enter 6.1.0 as a version

5. as a group it's common to use "org.xcolab.services"

6. as an artifact name enter name of a portlet (ie. sampleService)

7. leave version as it is

8. enter top level package wher your code will reside (usually it should be something like org.xcolab.services.serviceName), proceede with creation

9. enter newly created folder and make sure that "pom.xml" has parent section <project...>: (should be generated by mvn)
    <parent>
        <groupId>org.xcolab.portlets</groupId>
        <artifactId>xcolab-portlets</artifactId>
        <version>1.0-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>

11. change compiler version (in maven-compiler-plugin) to 1.6 (that's not required but let's be consistent) 


12. Little information on what is the structure of newly created artifacts

 Inside created folder you can see two modules:

   SERVICE_NAME-portlet - this is a portlet that will contain hibernate,  
       spring definitions, sql code for newly created service, it also contains 
       "*Impl" classes, ie. classes that you can edit, add methods and 
       propagate entered changes into global api

   SERVICE_NAME-portlet-service - this module contains public API for 
       newly created service, when you change something in your service make
       sure that you execute "mvn install" in here, to make this api 
       available in other projects


13. Create file SERVICE_NAME-portlet/src/main/webapp/WEB-INF/service.xml 
   (you can find samples of service.xml in either XCoLab sources or in Liferay portal, also refer to this http://www.liferay.com/community/wiki/-/wiki/Main/Service+Builder )
   Enter definitions of new entities etc.

14. In SERVICE_NAME-portlet execute:
   mvn liferay:build-service

   this step executes service builder that puts api code into "*-portlet-service" and impl code into "*-portlet" 

15. Now you can work on the code. Update impl classes etc, but don't add "Views" to SERVICE_NAME-portlet as we shouldn't mess services with view

16. After you've edited the code remember to execute step 14 to refresh API classes

17. When you're ready to reuse service across multiple portlets, execute:
  (in SERVICE_NAME-portlet-service) mvn install
  (in SERVICE_NAME-portlet) mvn compile package liferay:deploy




     ECLIPSE

1. To make this project execute "mvn eclipse:eclipse" to create eclipse artifacts

2. After that open eclipse, click on "File" -> "Import" -> "Existing maven projects" and enter newly created service path 






