/**
 * This class is generated by jOOQ
 */
package org.xcolab.client.proposals.pojo;


import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import org.apache.commons.lang3.StringUtils;
import org.springframework.core.ParameterizedTypeReference;
import org.xcolab.util.http.client.types.TypeProvider;

import java.io.Serializable;
import java.util.List;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@JsonIgnoreProperties(ignoreUnknown = true)
public class ProposalRating implements Serializable {

    public static final TypeProvider<ProposalRating> TYPES =
            new TypeProvider<>(ProposalRating.class,
                    new ParameterizedTypeReference<List<ProposalRating>>() {
                    });

    private static final long serialVersionUID = -1837242818;

    private Long    id_;
    private Long    proposalid;
    private Long    contestphaseid;
    private Long    userid;
    private Long    ratingvalueid;
    private String  comment_;
    private Boolean commentenabled;
    private String  otherdatastring;
    private Boolean onlyforinternalusage;

    public ProposalRating() {}

    public ProposalRating(ProposalRating value) {
        this.id_ = value.id_;
        this.proposalid = value.proposalid;
        this.contestphaseid = value.contestphaseid;
        this.userid = value.userid;
        this.ratingvalueid = value.ratingvalueid;
        this.comment_ = value.comment_;
        this.commentenabled = value.commentenabled;
        this.otherdatastring = value.otherdatastring;
        this.onlyforinternalusage = value.onlyforinternalusage;
    }

    public ProposalRating(
        Long    id_,
        Long    proposalid,
        Long    contestphaseid,
        Long    userid,
        Long    ratingvalueid,
        String  comment_,
        Boolean commentenabled,
        String  otherdatastring,
        Boolean onlyforinternalusage
    ) {
        this.id_ = id_;
        this.proposalid = proposalid;
        this.contestphaseid = contestphaseid;
        this.userid = userid;
        this.ratingvalueid = ratingvalueid;
        this.comment_ = comment_;
        this.commentenabled = commentenabled;
        this.otherdatastring = otherdatastring;
        this.onlyforinternalusage = onlyforinternalusage;
    }

    public Long getId_() {
        return this.id_;
    }

    public void setId_(Long id_) {
        this.id_ = id_;
    }

    public Long getProposalId() {
        return this.proposalid;
    }

    public void setProposalId(Long proposalid) {
        this.proposalid = proposalid;
    }

    public Long getContestPhaseId() {
        return this.contestphaseid;
    }

    public void setContestPhaseId(Long contestphaseid) {
        this.contestphaseid = contestphaseid;
    }

    public Long getUserId() {
        return this.userid;
    }

    public void setUserId(Long userid) {
        this.userid = userid;
    }

    public Long getRatingValueId() {
        return this.ratingvalueid;
    }

    public void setRatingValueId(Long ratingvalueid) {
        this.ratingvalueid = ratingvalueid;
    }

    public String getComment_() {
        return this.comment_;
    }

    public void setComment_(String comment_) {
        this.comment_ = comment_;
    }

    public Boolean getCommentEnabled() {
        return this.commentenabled;
    }

    public void setCommentEnabled(Boolean commentenabled) {
        this.commentenabled = commentenabled;
    }

    public String getOtherDataString() {
        return this.otherdatastring;
    }

    public void setOtherDataString(String otherdatastring) {
        this.otherdatastring = otherdatastring;
    }

    public Boolean getOnlyForInternalUsage() {
        return this.onlyforinternalusage;
    }

    public void setOnlyForInternalUsage(Boolean onlyforinternalusage) {
        this.onlyforinternalusage = onlyforinternalusage;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final ProposalRating other = (ProposalRating) obj;
        if (id_ == null) {
            if (other.id_ != null)
                return false;
        }
        else if (!id_.equals(other.id_))
            return false;
        if (proposalid == null) {
            if (other.proposalid != null)
                return false;
        }
        else if (!proposalid.equals(other.proposalid))
            return false;
        if (contestphaseid == null) {
            if (other.contestphaseid != null)
                return false;
        }
        else if (!contestphaseid.equals(other.contestphaseid))
            return false;
        if (userid == null) {
            if (other.userid != null)
                return false;
        }
        else if (!userid.equals(other.userid))
            return false;
        if (ratingvalueid == null) {
            if (other.ratingvalueid != null)
                return false;
        }
        else if (!ratingvalueid.equals(other.ratingvalueid))
            return false;
        if (comment_ == null) {
            if (other.comment_ != null)
                return false;
        }
        else if (!comment_.equals(other.comment_))
            return false;
        if (commentenabled == null) {
            if (other.commentenabled != null)
                return false;
        }
        else if (!commentenabled.equals(other.commentenabled))
            return false;
        if (otherdatastring == null) {
            if (other.otherdatastring != null)
                return false;
        }
        else if (!otherdatastring.equals(other.otherdatastring))
            return false;
        if (onlyforinternalusage == null) {
            if (other.onlyforinternalusage != null)
                return false;
        }
        else if (!onlyforinternalusage.equals(other.onlyforinternalusage))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((id_ == null) ? 0 : id_.hashCode());
        result = prime * result + ((proposalid == null) ? 0 : proposalid.hashCode());
        result = prime * result + ((contestphaseid == null) ? 0 : contestphaseid.hashCode());
        result = prime * result + ((userid == null) ? 0 : userid.hashCode());
        result = prime * result + ((ratingvalueid == null) ? 0 : ratingvalueid.hashCode());
        result = prime * result + ((comment_ == null) ? 0 : comment_.hashCode());
        result = prime * result + ((commentenabled == null) ? 0 : commentenabled.hashCode());
        result = prime * result + ((otherdatastring == null) ? 0 : otherdatastring.hashCode());
        result = prime * result + ((onlyforinternalusage == null) ? 0 : onlyforinternalusage.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("ProposalRating (");

        sb.append(id_);
        sb.append(", ").append(proposalid);
        sb.append(", ").append(contestphaseid);
        sb.append(", ").append(userid);
        sb.append(", ").append(ratingvalueid);
        sb.append(", ").append(comment_);
        sb.append(", ").append(commentenabled);
        sb.append(", ").append(otherdatastring);
        sb.append(", ").append(onlyforinternalusage);

        sb.append(")");
        return sb.toString();
    }

    @JsonIgnore
    public boolean isRatingComplete() {
        return (this.getRatingValueId() > 0 && (!this.getCommentEnabled() || (this.getComment_() != null && !StringUtils.isEmpty(this.getComment_()))));
    }
}
