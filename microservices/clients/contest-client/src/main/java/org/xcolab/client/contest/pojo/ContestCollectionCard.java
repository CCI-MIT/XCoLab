/**
 * This class is generated by jOOQ
 */
package org.xcolab.client.contest.pojo;


import java.io.Serializable;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ContestCollectionCard implements Serializable {

    private static final long serialVersionUID = 767661415;

    private Long    id_;
    private Long    parent;
    private Long    bigOntologyTerm;
    private Long    smallOntologyTerm;
    private String  description;
    private Boolean visible;
    private Integer order;
    private Long    ontologyTermToLoad;
    private Boolean onlyFeatured;

    public ContestCollectionCard() {}

    public ContestCollectionCard(ContestCollectionCard value) {
        this.id_ = value.id_;
        this.parent = value.parent;
        this.bigOntologyTerm = value.bigOntologyTerm;
        this.smallOntologyTerm = value.smallOntologyTerm;
        this.description = value.description;
        this.visible = value.visible;
        this.order = value.order;
        this.ontologyTermToLoad = value.ontologyTermToLoad;
        this.onlyFeatured = value.onlyFeatured;
    }

    public ContestCollectionCard(
        Long    id_,
        Long    parent,
        Long    bigOntologyTerm,
        Long    smallOntologyTerm,
        String  description,
        Boolean visible,
        Integer order,
        Long    ontologyTermToLoad,
        Boolean onlyFeatured
    ) {
        this.id_ = id_;
        this.parent = parent;
        this.bigOntologyTerm = bigOntologyTerm;
        this.smallOntologyTerm = smallOntologyTerm;
        this.description = description;
        this.visible = visible;
        this.order = order;
        this.ontologyTermToLoad = ontologyTermToLoad;
        this.onlyFeatured = onlyFeatured;
    }

    public Long getId_() {
        return this.id_;
    }

    public void setId_(Long id_) {
        this.id_ = id_;
    }

    public Long getParent() {
        return this.parent;
    }

    public void setParent(Long parent) {
        this.parent = parent;
    }

    public Long getBig_ontology_term() {
        return this.bigOntologyTerm;
    }

    public void setBig_ontology_term(Long bigOntologyTerm) {
        this.bigOntologyTerm = bigOntologyTerm;
    }

    public Long getSmall_ontology_term() {
        return this.smallOntologyTerm;
    }

    public void setSmall_ontology_term(Long smallOntologyTerm) {
        this.smallOntologyTerm = smallOntologyTerm;
    }

    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Boolean getVisible() {
        return this.visible;
    }

    public void setVisible(Boolean visible) {
        this.visible = visible;
    }

    public Integer getOrder() {
        return this.order;
    }

    public void setOrder(Integer order) {
        this.order = order;
    }

    public Long getOntology_term_to_load() {
        return this.ontologyTermToLoad;
    }

    public void setOntology_term_to_load(Long ontologyTermToLoad) {
        this.ontologyTermToLoad = ontologyTermToLoad;
    }

    public Boolean getOnly_featured() {
        return this.onlyFeatured;
    }

    public void setOnly_featured(Boolean onlyFeatured) {
        this.onlyFeatured = onlyFeatured;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final ContestCollectionCard other = (ContestCollectionCard) obj;
        if (id_ == null) {
            if (other.id_ != null)
                return false;
        }
        else if (!id_.equals(other.id_))
            return false;
        if (parent == null) {
            if (other.parent != null)
                return false;
        }
        else if (!parent.equals(other.parent))
            return false;
        if (bigOntologyTerm == null) {
            if (other.bigOntologyTerm != null)
                return false;
        }
        else if (!bigOntologyTerm.equals(other.bigOntologyTerm))
            return false;
        if (smallOntologyTerm == null) {
            if (other.smallOntologyTerm != null)
                return false;
        }
        else if (!smallOntologyTerm.equals(other.smallOntologyTerm))
            return false;
        if (description == null) {
            if (other.description != null)
                return false;
        }
        else if (!description.equals(other.description))
            return false;
        if (visible == null) {
            if (other.visible != null)
                return false;
        }
        else if (!visible.equals(other.visible))
            return false;
        if (order == null) {
            if (other.order != null)
                return false;
        }
        else if (!order.equals(other.order))
            return false;
        if (ontologyTermToLoad == null) {
            if (other.ontologyTermToLoad != null)
                return false;
        }
        else if (!ontologyTermToLoad.equals(other.ontologyTermToLoad))
            return false;
        if (onlyFeatured == null) {
            if (other.onlyFeatured != null)
                return false;
        }
        else if (!onlyFeatured.equals(other.onlyFeatured))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((id_ == null) ? 0 : id_.hashCode());
        result = prime * result + ((parent == null) ? 0 : parent.hashCode());
        result = prime * result + ((bigOntologyTerm == null) ? 0 : bigOntologyTerm.hashCode());
        result = prime * result + ((smallOntologyTerm == null) ? 0 : smallOntologyTerm.hashCode());
        result = prime * result + ((description == null) ? 0 : description.hashCode());
        result = prime * result + ((visible == null) ? 0 : visible.hashCode());
        result = prime * result + ((order == null) ? 0 : order.hashCode());
        result = prime * result + ((ontologyTermToLoad == null) ? 0 : ontologyTermToLoad.hashCode());
        result = prime * result + ((onlyFeatured == null) ? 0 : onlyFeatured.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("ContestCollectionCard (");

        sb.append(id_);
        sb.append(", ").append(parent);
        sb.append(", ").append(bigOntologyTerm);
        sb.append(", ").append(smallOntologyTerm);
        sb.append(", ").append(description);
        sb.append(", ").append(visible);
        sb.append(", ").append(order);
        sb.append(", ").append(ontologyTermToLoad);
        sb.append(", ").append(onlyFeatured);

        sb.append(")");
        return sb.toString();
    }
}
