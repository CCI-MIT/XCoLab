/**
 * This class is generated by jOOQ
 */
package org.xcolab.client.contest.pojo;


import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;

import org.springframework.core.ParameterizedTypeReference;
import org.xcolab.util.http.client.types.TypeProvider;

import java.io.Serializable;
import java.util.List;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@JsonIgnoreProperties(ignoreUnknown = true)
@JsonInclude(JsonInclude.Include.NON_NULL)
public class ImpactIteration implements Serializable {

    private static final long serialVersionUID = -1871807687;

    public static final TypeProvider<ImpactIteration> TYPES =
            new TypeProvider<>(ImpactIteration.class,
                    new ParameterizedTypeReference<List<ImpactIteration>>() {
                    });

    private Long    iterationid;
    private Integer year;

    public ImpactIteration() {}

    public ImpactIteration(ImpactIteration value) {
        this.iterationid = value.iterationid;
        this.year = value.year;
    }

    public ImpactIteration(
        Long    iterationid,
        Integer year
    ) {
        this.iterationid = iterationid;
        this.year = year;
    }

    public Long getIterationId() {
        return this.iterationid;
    }

    public void setIterationId(Long iterationid) {
        this.iterationid = iterationid;
    }

    public Integer getYear() {
        return this.year;
    }

    public void setYear(Integer year) {
        this.year = year;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final ImpactIteration other = (ImpactIteration) obj;
        if (iterationid == null) {
            if (other.iterationid != null)
                return false;
        }
        else if (!iterationid.equals(other.iterationid))
            return false;
        if (year == null) {
            if (other.year != null)
                return false;
        }
        else if (!year.equals(other.year))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((iterationid == null) ? 0 : iterationid.hashCode());
        result = prime * result + ((year == null) ? 0 : year.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("ImpactIteration (");

        sb.append(iterationid);
        sb.append(", ").append(year);

        sb.append(")");
        return sb.toString();
    }
}
