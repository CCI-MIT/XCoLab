package com.ext.portlet.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;

/**
 * The base model interface for the DiscussionMessage service. Represents a row in the &quot;xcolab_DiscussionMessage&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.ext.portlet.model.impl.DiscussionMessageModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.ext.portlet.model.impl.DiscussionMessageImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DiscussionMessage
 * @see com.ext.portlet.model.impl.DiscussionMessageImpl
 * @see com.ext.portlet.model.impl.DiscussionMessageModelImpl
 * @generated
 */
public interface DiscussionMessageModel extends BaseModel<DiscussionMessage> {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this interface directly. All methods that expect a discussion message model instance should use the {@link DiscussionMessage} interface instead.
     */

    /**
     * Returns the primary key of this discussion message.
     *
     * @return the primary key of this discussion message
     */
    public long getPrimaryKey();

    /**
     * Sets the primary key of this discussion message.
     *
     * @param primaryKey the primary key of this discussion message
     */
    public void setPrimaryKey(long primaryKey);

    /**
     * Returns the pk of this discussion message.
     *
     * @return the pk of this discussion message
     */
    public long getPk();

    /**
     * Sets the pk of this discussion message.
     *
     * @param pk the pk of this discussion message
     */
    public void setPk(long pk);

    /**
     * Returns the message ID of this discussion message.
     *
     * @return the message ID of this discussion message
     */
    public long getMessageId();

    /**
     * Sets the message ID of this discussion message.
     *
     * @param messageId the message ID of this discussion message
     */
    public void setMessageId(long messageId);

    /**
     * Returns the subject of this discussion message.
     *
     * @return the subject of this discussion message
     */
    @AutoEscape
    public String getSubject();

    /**
     * Sets the subject of this discussion message.
     *
     * @param subject the subject of this discussion message
     */
    public void setSubject(String subject);

    /**
     * Returns the body of this discussion message.
     *
     * @return the body of this discussion message
     */
    @AutoEscape
    public String getBody();

    /**
     * Sets the body of this discussion message.
     *
     * @param body the body of this discussion message
     */
    public void setBody(String body);

    /**
     * Returns the thread ID of this discussion message.
     *
     * @return the thread ID of this discussion message
     */
    public long getThreadId();

    /**
     * Sets the thread ID of this discussion message.
     *
     * @param threadId the thread ID of this discussion message
     */
    public void setThreadId(long threadId);

    /**
     * Returns the category ID of this discussion message.
     *
     * @return the category ID of this discussion message
     */
    public long getCategoryId();

    /**
     * Sets the category ID of this discussion message.
     *
     * @param categoryId the category ID of this discussion message
     */
    public void setCategoryId(long categoryId);

    /**
     * Returns the category group ID of this discussion message.
     *
     * @return the category group ID of this discussion message
     */
    public long getCategoryGroupId();

    /**
     * Sets the category group ID of this discussion message.
     *
     * @param categoryGroupId the category group ID of this discussion message
     */
    public void setCategoryGroupId(long categoryGroupId);

    /**
     * Returns the author ID of this discussion message.
     *
     * @return the author ID of this discussion message
     */
    public long getAuthorId();

    /**
     * Sets the author ID of this discussion message.
     *
     * @param authorId the author ID of this discussion message
     */
    public void setAuthorId(long authorId);

    /**
     * Returns the create date of this discussion message.
     *
     * @return the create date of this discussion message
     */
    public Date getCreateDate();

    /**
     * Sets the create date of this discussion message.
     *
     * @param createDate the create date of this discussion message
     */
    public void setCreateDate(Date createDate);

    /**
     * Returns the version of this discussion message.
     *
     * @return the version of this discussion message
     */
    public long getVersion();

    /**
     * Sets the version of this discussion message.
     *
     * @param version the version of this discussion message
     */
    public void setVersion(long version);

    /**
     * Returns the deleted of this discussion message.
     *
     * @return the deleted of this discussion message
     */
    public Date getDeleted();

    /**
     * Sets the deleted of this discussion message.
     *
     * @param deleted the deleted of this discussion message
     */
    public void setDeleted(Date deleted);

    /**
     * Returns the responses count of this discussion message.
     *
     * @return the responses count of this discussion message
     */
    public int getResponsesCount();

    /**
     * Sets the responses count of this discussion message.
     *
     * @param responsesCount the responses count of this discussion message
     */
    public void setResponsesCount(int responsesCount);

    /**
     * Returns the last activity date of this discussion message.
     *
     * @return the last activity date of this discussion message
     */
    public Date getLastActivityDate();

    /**
     * Sets the last activity date of this discussion message.
     *
     * @param lastActivityDate the last activity date of this discussion message
     */
    public void setLastActivityDate(Date lastActivityDate);

    /**
     * Returns the last activity author ID of this discussion message.
     *
     * @return the last activity author ID of this discussion message
     */
    public long getLastActivityAuthorId();

    /**
     * Sets the last activity author ID of this discussion message.
     *
     * @param lastActivityAuthorId the last activity author ID of this discussion message
     */
    public void setLastActivityAuthorId(long lastActivityAuthorId);

    @Override
    public boolean isNew();

    @Override
    public void setNew(boolean n);

    @Override
    public boolean isCachedModel();

    @Override
    public void setCachedModel(boolean cachedModel);

    @Override
    public boolean isEscapedModel();

    @Override
    public Serializable getPrimaryKeyObj();

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj);

    @Override
    public ExpandoBridge getExpandoBridge();

    @Override
    public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

    @Override
    public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext);

    @Override
    public Object clone();

    @Override
    public int compareTo(DiscussionMessage discussionMessage);

    @Override
    public int hashCode();

    @Override
    public CacheModel<DiscussionMessage> toCacheModel();

    @Override
    public DiscussionMessage toEscapedModel();

    @Override
    public DiscussionMessage toUnescapedModel();

    @Override
    public String toString();

    @Override
    public String toXmlString();
}
