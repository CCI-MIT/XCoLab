package com.ext.portlet.model;

import com.ext.portlet.service.persistence.AnalyticsUserEventPK;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;

/**
 * The base model interface for the AnalyticsUserEvent service. Represents a row in the &quot;xcolab_AnalyticsUserEvent&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.ext.portlet.model.impl.AnalyticsUserEventModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.ext.portlet.model.impl.AnalyticsUserEventImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AnalyticsUserEvent
 * @see com.ext.portlet.model.impl.AnalyticsUserEventImpl
 * @see com.ext.portlet.model.impl.AnalyticsUserEventModelImpl
 * @generated
 */
public interface AnalyticsUserEventModel extends BaseModel<AnalyticsUserEvent> {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this interface directly. All methods that expect a analytics user event model instance should use the {@link AnalyticsUserEvent} interface instead.
     */

    /**
     * Returns the primary key of this analytics user event.
     *
     * @return the primary key of this analytics user event
     */
    public AnalyticsUserEventPK getPrimaryKey();

    /**
     * Sets the primary key of this analytics user event.
     *
     * @param primaryKey the primary key of this analytics user event
     */
    public void setPrimaryKey(AnalyticsUserEventPK primaryKey);

    /**
     * Returns the user ID of this analytics user event.
     *
     * @return the user ID of this analytics user event
     */
    public long getUserId();

    /**
     * Sets the user ID of this analytics user event.
     *
     * @param userId the user ID of this analytics user event
     */
    public void setUserId(long userId);

    /**
     * Returns the user uuid of this analytics user event.
     *
     * @return the user uuid of this analytics user event
     * @throws SystemException if a system exception occurred
     */
    public String getUserUuid() throws SystemException;

    /**
     * Sets the user uuid of this analytics user event.
     *
     * @param userUuid the user uuid of this analytics user event
     */
    public void setUserUuid(String userUuid);

    /**
     * Returns the id string of this analytics user event.
     *
     * @return the id string of this analytics user event
     */
    @AutoEscape
    public String getIdString();

    /**
     * Sets the id string of this analytics user event.
     *
     * @param idString the id string of this analytics user event
     */
    public void setIdString(String idString);

    /**
     * Returns the category of this analytics user event.
     *
     * @return the category of this analytics user event
     */
    @AutoEscape
    public String getCategory();

    /**
     * Sets the category of this analytics user event.
     *
     * @param category the category of this analytics user event
     */
    public void setCategory(String category);

    /**
     * Returns the action of this analytics user event.
     *
     * @return the action of this analytics user event
     */
    @AutoEscape
    public String getAction();

    /**
     * Sets the action of this analytics user event.
     *
     * @param action the action of this analytics user event
     */
    public void setAction(String action);

    /**
     * Returns the label of this analytics user event.
     *
     * @return the label of this analytics user event
     */
    @AutoEscape
    public String getLabel();

    /**
     * Sets the label of this analytics user event.
     *
     * @param label the label of this analytics user event
     */
    public void setLabel(String label);

    /**
     * Returns the value of this analytics user event.
     *
     * @return the value of this analytics user event
     */
    public int getValue();

    /**
     * Sets the value of this analytics user event.
     *
     * @param value the value of this analytics user event
     */
    public void setValue(int value);

    /**
     * Returns the created of this analytics user event.
     *
     * @return the created of this analytics user event
     */
    public Date getCreated();

    /**
     * Sets the created of this analytics user event.
     *
     * @param created the created of this analytics user event
     */
    public void setCreated(Date created);

    @Override
    public boolean isNew();

    @Override
    public void setNew(boolean n);

    @Override
    public boolean isCachedModel();

    @Override
    public void setCachedModel(boolean cachedModel);

    @Override
    public boolean isEscapedModel();

    @Override
    public Serializable getPrimaryKeyObj();

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj);

    @Override
    public ExpandoBridge getExpandoBridge();

    @Override
    public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

    @Override
    public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext);

    @Override
    public Object clone();

    @Override
    public int compareTo(AnalyticsUserEvent analyticsUserEvent);

    @Override
    public int hashCode();

    @Override
    public CacheModel<AnalyticsUserEvent> toCacheModel();

    @Override
    public AnalyticsUserEvent toEscapedModel();

    @Override
    public AnalyticsUserEvent toUnescapedModel();

    @Override
    public String toString();

    @Override
    public String toXmlString();
}
