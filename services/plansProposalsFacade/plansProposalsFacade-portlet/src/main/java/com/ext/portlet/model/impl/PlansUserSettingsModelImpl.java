package com.ext.portlet.model.impl;

import com.ext.portlet.model.PlansUserSettings;
import com.ext.portlet.model.PlansUserSettingsModel;
import com.ext.portlet.model.PlansUserSettingsSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the PlansUserSettings service. Represents a row in the &quot;xcolab_PlansUserSettings&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.PlansUserSettingsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PlansUserSettingsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PlansUserSettingsImpl
 * @see com.ext.portlet.model.PlansUserSettings
 * @see com.ext.portlet.model.PlansUserSettingsModel
 * @generated
 */
@JSON(strict = true)
public class PlansUserSettingsModelImpl extends BaseModelImpl<PlansUserSettings>
    implements PlansUserSettingsModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a plans user settings model instance should use the {@link com.ext.portlet.model.PlansUserSettings} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_PlansUserSettings";
    public static final Object[][] TABLE_COLUMNS = {
            { "planUserSettingsId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "planTypeId", Types.BIGINT },
            { "sortColumn", Types.VARCHAR },
            { "sortDirection", Types.VARCHAR },
            { "filterEnabled", Types.BOOLEAN },
            { "filterPositionsAll", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_PlansUserSettings (planUserSettingsId LONG not null primary key,userId LONG,planTypeId LONG,sortColumn VARCHAR(75) null,sortDirection VARCHAR(75) null,filterEnabled BOOLEAN,filterPositionsAll BOOLEAN)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_PlansUserSettings";
    public static final String ORDER_BY_JPQL = " ORDER BY plansUserSettings.planUserSettingsId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_PlansUserSettings.planUserSettingsId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.PlansUserSettings"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.PlansUserSettings"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.model.PlansUserSettings"),
            true);
    public static long PLANTYPEID_COLUMN_BITMASK = 1L;
    public static long USERID_COLUMN_BITMASK = 2L;
    public static long PLANUSERSETTINGSID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.PlansUserSettings"));
    private static ClassLoader _classLoader = PlansUserSettings.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            PlansUserSettings.class
        };
    private long _planUserSettingsId;
    private long _userId;
    private String _userUuid;
    private long _originalUserId;
    private boolean _setOriginalUserId;
    private long _planTypeId;
    private long _originalPlanTypeId;
    private boolean _setOriginalPlanTypeId;
    private String _sortColumn;
    private String _sortDirection;
    private boolean _filterEnabled;
    private boolean _filterPositionsAll;
    private long _columnBitmask;
    private PlansUserSettings _escapedModel;

    public PlansUserSettingsModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static PlansUserSettings toModel(PlansUserSettingsSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        PlansUserSettings model = new PlansUserSettingsImpl();

        model.setPlanUserSettingsId(soapModel.getPlanUserSettingsId());
        model.setUserId(soapModel.getUserId());
        model.setPlanTypeId(soapModel.getPlanTypeId());
        model.setSortColumn(soapModel.getSortColumn());
        model.setSortDirection(soapModel.getSortDirection());
        model.setFilterEnabled(soapModel.getFilterEnabled());
        model.setFilterPositionsAll(soapModel.getFilterPositionsAll());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<PlansUserSettings> toModels(
        PlansUserSettingsSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<PlansUserSettings> models = new ArrayList<PlansUserSettings>(soapModels.length);

        for (PlansUserSettingsSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _planUserSettingsId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setPlanUserSettingsId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _planUserSettingsId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return PlansUserSettings.class;
    }

    @Override
    public String getModelClassName() {
        return PlansUserSettings.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("planUserSettingsId", getPlanUserSettingsId());
        attributes.put("userId", getUserId());
        attributes.put("planTypeId", getPlanTypeId());
        attributes.put("sortColumn", getSortColumn());
        attributes.put("sortDirection", getSortDirection());
        attributes.put("filterEnabled", getFilterEnabled());
        attributes.put("filterPositionsAll", getFilterPositionsAll());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long planUserSettingsId = (Long) attributes.get("planUserSettingsId");

        if (planUserSettingsId != null) {
            setPlanUserSettingsId(planUserSettingsId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Long planTypeId = (Long) attributes.get("planTypeId");

        if (planTypeId != null) {
            setPlanTypeId(planTypeId);
        }

        String sortColumn = (String) attributes.get("sortColumn");

        if (sortColumn != null) {
            setSortColumn(sortColumn);
        }

        String sortDirection = (String) attributes.get("sortDirection");

        if (sortDirection != null) {
            setSortDirection(sortDirection);
        }

        Boolean filterEnabled = (Boolean) attributes.get("filterEnabled");

        if (filterEnabled != null) {
            setFilterEnabled(filterEnabled);
        }

        Boolean filterPositionsAll = (Boolean) attributes.get(
                "filterPositionsAll");

        if (filterPositionsAll != null) {
            setFilterPositionsAll(filterPositionsAll);
        }
    }

    @JSON
    @Override
    public long getPlanUserSettingsId() {
        return _planUserSettingsId;
    }

    @Override
    public void setPlanUserSettingsId(long planUserSettingsId) {
        _planUserSettingsId = planUserSettingsId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _columnBitmask |= USERID_COLUMN_BITMASK;

        if (!_setOriginalUserId) {
            _setOriginalUserId = true;

            _originalUserId = _userId;
        }

        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    public long getOriginalUserId() {
        return _originalUserId;
    }

    @JSON
    @Override
    public long getPlanTypeId() {
        return _planTypeId;
    }

    @Override
    public void setPlanTypeId(long planTypeId) {
        _columnBitmask |= PLANTYPEID_COLUMN_BITMASK;

        if (!_setOriginalPlanTypeId) {
            _setOriginalPlanTypeId = true;

            _originalPlanTypeId = _planTypeId;
        }

        _planTypeId = planTypeId;
    }

    public long getOriginalPlanTypeId() {
        return _originalPlanTypeId;
    }

    @JSON
    @Override
    public String getSortColumn() {
        if (_sortColumn == null) {
            return StringPool.BLANK;
        } else {
            return _sortColumn;
        }
    }

    @Override
    public void setSortColumn(String sortColumn) {
        _sortColumn = sortColumn;
    }

    @JSON
    @Override
    public String getSortDirection() {
        if (_sortDirection == null) {
            return StringPool.BLANK;
        } else {
            return _sortDirection;
        }
    }

    @Override
    public void setSortDirection(String sortDirection) {
        _sortDirection = sortDirection;
    }

    @JSON
    @Override
    public boolean getFilterEnabled() {
        return _filterEnabled;
    }

    @Override
    public boolean isFilterEnabled() {
        return _filterEnabled;
    }

    @Override
    public void setFilterEnabled(boolean filterEnabled) {
        _filterEnabled = filterEnabled;
    }

    @JSON
    @Override
    public boolean getFilterPositionsAll() {
        return _filterPositionsAll;
    }

    @Override
    public boolean isFilterPositionsAll() {
        return _filterPositionsAll;
    }

    @Override
    public void setFilterPositionsAll(boolean filterPositionsAll) {
        _filterPositionsAll = filterPositionsAll;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            PlansUserSettings.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public PlansUserSettings toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (PlansUserSettings) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        PlansUserSettingsImpl plansUserSettingsImpl = new PlansUserSettingsImpl();

        plansUserSettingsImpl.setPlanUserSettingsId(getPlanUserSettingsId());
        plansUserSettingsImpl.setUserId(getUserId());
        plansUserSettingsImpl.setPlanTypeId(getPlanTypeId());
        plansUserSettingsImpl.setSortColumn(getSortColumn());
        plansUserSettingsImpl.setSortDirection(getSortDirection());
        plansUserSettingsImpl.setFilterEnabled(getFilterEnabled());
        plansUserSettingsImpl.setFilterPositionsAll(getFilterPositionsAll());

        plansUserSettingsImpl.resetOriginalValues();

        return plansUserSettingsImpl;
    }

    @Override
    public int compareTo(PlansUserSettings plansUserSettings) {
        long primaryKey = plansUserSettings.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof PlansUserSettings)) {
            return false;
        }

        PlansUserSettings plansUserSettings = (PlansUserSettings) obj;

        long primaryKey = plansUserSettings.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        PlansUserSettingsModelImpl plansUserSettingsModelImpl = this;

        plansUserSettingsModelImpl._originalUserId = plansUserSettingsModelImpl._userId;

        plansUserSettingsModelImpl._setOriginalUserId = false;

        plansUserSettingsModelImpl._originalPlanTypeId = plansUserSettingsModelImpl._planTypeId;

        plansUserSettingsModelImpl._setOriginalPlanTypeId = false;

        plansUserSettingsModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<PlansUserSettings> toCacheModel() {
        PlansUserSettingsCacheModel plansUserSettingsCacheModel = new PlansUserSettingsCacheModel();

        plansUserSettingsCacheModel.planUserSettingsId = getPlanUserSettingsId();

        plansUserSettingsCacheModel.userId = getUserId();

        plansUserSettingsCacheModel.planTypeId = getPlanTypeId();

        plansUserSettingsCacheModel.sortColumn = getSortColumn();

        String sortColumn = plansUserSettingsCacheModel.sortColumn;

        if ((sortColumn != null) && (sortColumn.length() == 0)) {
            plansUserSettingsCacheModel.sortColumn = null;
        }

        plansUserSettingsCacheModel.sortDirection = getSortDirection();

        String sortDirection = plansUserSettingsCacheModel.sortDirection;

        if ((sortDirection != null) && (sortDirection.length() == 0)) {
            plansUserSettingsCacheModel.sortDirection = null;
        }

        plansUserSettingsCacheModel.filterEnabled = getFilterEnabled();

        plansUserSettingsCacheModel.filterPositionsAll = getFilterPositionsAll();

        return plansUserSettingsCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(15);

        sb.append("{planUserSettingsId=");
        sb.append(getPlanUserSettingsId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", planTypeId=");
        sb.append(getPlanTypeId());
        sb.append(", sortColumn=");
        sb.append(getSortColumn());
        sb.append(", sortDirection=");
        sb.append(getSortDirection());
        sb.append(", filterEnabled=");
        sb.append(getFilterEnabled());
        sb.append(", filterPositionsAll=");
        sb.append(getFilterPositionsAll());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(25);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.PlansUserSettings");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>planUserSettingsId</column-name><column-value><![CDATA[");
        sb.append(getPlanUserSettingsId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>planTypeId</column-name><column-value><![CDATA[");
        sb.append(getPlanTypeId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sortColumn</column-name><column-value><![CDATA[");
        sb.append(getSortColumn());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sortDirection</column-name><column-value><![CDATA[");
        sb.append(getSortDirection());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>filterEnabled</column-name><column-value><![CDATA[");
        sb.append(getFilterEnabled());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>filterPositionsAll</column-name><column-value><![CDATA[");
        sb.append(getFilterPositionsAll());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
