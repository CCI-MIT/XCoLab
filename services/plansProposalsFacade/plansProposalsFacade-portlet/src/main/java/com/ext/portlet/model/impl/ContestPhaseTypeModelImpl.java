package com.ext.portlet.model.impl;

import com.ext.portlet.model.ContestPhaseType;
import com.ext.portlet.model.ContestPhaseTypeModel;
import com.ext.portlet.model.ContestPhaseTypeSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ContestPhaseType service. Represents a row in the &quot;xcolab_ContestPhaseType&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.ContestPhaseTypeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ContestPhaseTypeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ContestPhaseTypeImpl
 * @see com.ext.portlet.model.ContestPhaseType
 * @see com.ext.portlet.model.ContestPhaseTypeModel
 * @generated
 */
@JSON(strict = true)
public class ContestPhaseTypeModelImpl extends BaseModelImpl<ContestPhaseType>
    implements ContestPhaseTypeModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a contest phase type model instance should use the {@link com.ext.portlet.model.ContestPhaseType} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_ContestPhaseType";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "name", Types.VARCHAR },
            { "description", Types.VARCHAR },
            { "status", Types.VARCHAR },
            { "fellowScreeningActiveDefault", Types.BOOLEAN },
            { "contestPhaseAutopromoteDefault", Types.VARCHAR },
            { "invisible", Types.BOOLEAN },
            { "pointsAccessible", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_ContestPhaseType (id_ LONG not null primary key,name VARCHAR(1024) null,description TEXT null,status VARCHAR(75) null,fellowScreeningActiveDefault BOOLEAN,contestPhaseAutopromoteDefault VARCHAR(75) null,invisible BOOLEAN,pointsAccessible INTEGER)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_ContestPhaseType";
    public static final String ORDER_BY_JPQL = " ORDER BY contestPhaseType.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_ContestPhaseType.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.ContestPhaseType"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.ContestPhaseType"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.ContestPhaseType"));
    private static ClassLoader _classLoader = ContestPhaseType.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            ContestPhaseType.class
        };
    private long _id;
    private String _name;
    private String _description;
    private String _status;
    private boolean _fellowScreeningActiveDefault;
    private String _contestPhaseAutopromoteDefault;
    private boolean _invisible;
    private int _pointsAccessible;
    private ContestPhaseType _escapedModel;

    public ContestPhaseTypeModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static ContestPhaseType toModel(ContestPhaseTypeSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        ContestPhaseType model = new ContestPhaseTypeImpl();

        model.setId(soapModel.getId());
        model.setName(soapModel.getName());
        model.setDescription(soapModel.getDescription());
        model.setStatus(soapModel.getStatus());
        model.setFellowScreeningActiveDefault(soapModel.getFellowScreeningActiveDefault());
        model.setContestPhaseAutopromoteDefault(soapModel.getContestPhaseAutopromoteDefault());
        model.setInvisible(soapModel.getInvisible());
        model.setPointsAccessible(soapModel.getPointsAccessible());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<ContestPhaseType> toModels(
        ContestPhaseTypeSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<ContestPhaseType> models = new ArrayList<ContestPhaseType>(soapModels.length);

        for (ContestPhaseTypeSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return ContestPhaseType.class;
    }

    @Override
    public String getModelClassName() {
        return ContestPhaseType.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("name", getName());
        attributes.put("description", getDescription());
        attributes.put("status", getStatus());
        attributes.put("fellowScreeningActiveDefault",
            getFellowScreeningActiveDefault());
        attributes.put("contestPhaseAutopromoteDefault",
            getContestPhaseAutopromoteDefault());
        attributes.put("invisible", getInvisible());
        attributes.put("pointsAccessible", getPointsAccessible());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }

        String status = (String) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }

        Boolean fellowScreeningActiveDefault = (Boolean) attributes.get(
                "fellowScreeningActiveDefault");

        if (fellowScreeningActiveDefault != null) {
            setFellowScreeningActiveDefault(fellowScreeningActiveDefault);
        }

        String contestPhaseAutopromoteDefault = (String) attributes.get(
                "contestPhaseAutopromoteDefault");

        if (contestPhaseAutopromoteDefault != null) {
            setContestPhaseAutopromoteDefault(contestPhaseAutopromoteDefault);
        }

        Boolean invisible = (Boolean) attributes.get("invisible");

        if (invisible != null) {
            setInvisible(invisible);
        }

        Integer pointsAccessible = (Integer) attributes.get("pointsAccessible");

        if (pointsAccessible != null) {
            setPointsAccessible(pointsAccessible);
        }
    }

    @JSON
    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @JSON
    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _name = name;
    }

    @JSON
    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    @JSON
    @Override
    public String getStatus() {
        if (_status == null) {
            return StringPool.BLANK;
        } else {
            return _status;
        }
    }

    @Override
    public void setStatus(String status) {
        _status = status;
    }

    @JSON
    @Override
    public boolean getFellowScreeningActiveDefault() {
        return _fellowScreeningActiveDefault;
    }

    @Override
    public boolean isFellowScreeningActiveDefault() {
        return _fellowScreeningActiveDefault;
    }

    @Override
    public void setFellowScreeningActiveDefault(
        boolean fellowScreeningActiveDefault) {
        _fellowScreeningActiveDefault = fellowScreeningActiveDefault;
    }

    @JSON
    @Override
    public String getContestPhaseAutopromoteDefault() {
        if (_contestPhaseAutopromoteDefault == null) {
            return StringPool.BLANK;
        } else {
            return _contestPhaseAutopromoteDefault;
        }
    }

    @Override
    public void setContestPhaseAutopromoteDefault(
        String contestPhaseAutopromoteDefault) {
        _contestPhaseAutopromoteDefault = contestPhaseAutopromoteDefault;
    }

    @JSON
    @Override
    public boolean getInvisible() {
        return _invisible;
    }

    @Override
    public boolean isInvisible() {
        return _invisible;
    }

    @Override
    public void setInvisible(boolean invisible) {
        _invisible = invisible;
    }

    @JSON
    @Override
    public int getPointsAccessible() {
        return _pointsAccessible;
    }

    @Override
    public void setPointsAccessible(int pointsAccessible) {
        _pointsAccessible = pointsAccessible;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            ContestPhaseType.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public ContestPhaseType toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (ContestPhaseType) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ContestPhaseTypeImpl contestPhaseTypeImpl = new ContestPhaseTypeImpl();

        contestPhaseTypeImpl.setId(getId());
        contestPhaseTypeImpl.setName(getName());
        contestPhaseTypeImpl.setDescription(getDescription());
        contestPhaseTypeImpl.setStatus(getStatus());
        contestPhaseTypeImpl.setFellowScreeningActiveDefault(getFellowScreeningActiveDefault());
        contestPhaseTypeImpl.setContestPhaseAutopromoteDefault(getContestPhaseAutopromoteDefault());
        contestPhaseTypeImpl.setInvisible(getInvisible());
        contestPhaseTypeImpl.setPointsAccessible(getPointsAccessible());

        contestPhaseTypeImpl.resetOriginalValues();

        return contestPhaseTypeImpl;
    }

    @Override
    public int compareTo(ContestPhaseType contestPhaseType) {
        long primaryKey = contestPhaseType.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ContestPhaseType)) {
            return false;
        }

        ContestPhaseType contestPhaseType = (ContestPhaseType) obj;

        long primaryKey = contestPhaseType.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<ContestPhaseType> toCacheModel() {
        ContestPhaseTypeCacheModel contestPhaseTypeCacheModel = new ContestPhaseTypeCacheModel();

        contestPhaseTypeCacheModel.id = getId();

        contestPhaseTypeCacheModel.name = getName();

        String name = contestPhaseTypeCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            contestPhaseTypeCacheModel.name = null;
        }

        contestPhaseTypeCacheModel.description = getDescription();

        String description = contestPhaseTypeCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            contestPhaseTypeCacheModel.description = null;
        }

        contestPhaseTypeCacheModel.status = getStatus();

        String status = contestPhaseTypeCacheModel.status;

        if ((status != null) && (status.length() == 0)) {
            contestPhaseTypeCacheModel.status = null;
        }

        contestPhaseTypeCacheModel.fellowScreeningActiveDefault = getFellowScreeningActiveDefault();

        contestPhaseTypeCacheModel.contestPhaseAutopromoteDefault = getContestPhaseAutopromoteDefault();

        String contestPhaseAutopromoteDefault = contestPhaseTypeCacheModel.contestPhaseAutopromoteDefault;

        if ((contestPhaseAutopromoteDefault != null) &&
                (contestPhaseAutopromoteDefault.length() == 0)) {
            contestPhaseTypeCacheModel.contestPhaseAutopromoteDefault = null;
        }

        contestPhaseTypeCacheModel.invisible = getInvisible();

        contestPhaseTypeCacheModel.pointsAccessible = getPointsAccessible();

        return contestPhaseTypeCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(17);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append(", fellowScreeningActiveDefault=");
        sb.append(getFellowScreeningActiveDefault());
        sb.append(", contestPhaseAutopromoteDefault=");
        sb.append(getContestPhaseAutopromoteDefault());
        sb.append(", invisible=");
        sb.append(getInvisible());
        sb.append(", pointsAccessible=");
        sb.append(getPointsAccessible());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(28);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.ContestPhaseType");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>fellowScreeningActiveDefault</column-name><column-value><![CDATA[");
        sb.append(getFellowScreeningActiveDefault());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contestPhaseAutopromoteDefault</column-name><column-value><![CDATA[");
        sb.append(getContestPhaseAutopromoteDefault());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>invisible</column-name><column-value><![CDATA[");
        sb.append(getInvisible());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>pointsAccessible</column-name><column-value><![CDATA[");
        sb.append(getPointsAccessible());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
