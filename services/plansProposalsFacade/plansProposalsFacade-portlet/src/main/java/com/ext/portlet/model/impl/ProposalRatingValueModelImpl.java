package com.ext.portlet.model.impl;

import com.ext.portlet.model.ProposalRatingValue;
import com.ext.portlet.model.ProposalRatingValueModel;
import com.ext.portlet.model.ProposalRatingValueSoap;
import com.ext.portlet.service.persistence.ProposalRatingValuePK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ProposalRatingValue service. Represents a row in the &quot;xcolab_ProposalRatingValue&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.ProposalRatingValueModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProposalRatingValueImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProposalRatingValueImpl
 * @see com.ext.portlet.model.ProposalRatingValue
 * @see com.ext.portlet.model.ProposalRatingValueModel
 * @generated
 */
@JSON(strict = true)
public class ProposalRatingValueModelImpl extends BaseModelImpl<ProposalRatingValue>
    implements ProposalRatingValueModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a proposal rating value model instance should use the {@link com.ext.portlet.model.ProposalRatingValue} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_ProposalRatingValue";
    public static final Object[][] TABLE_COLUMNS = {
            { "ratingTypeId", Types.BIGINT },
            { "value", Types.BIGINT },
            { "name", Types.VARCHAR },
            { "description", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_ProposalRatingValue (ratingTypeId LONG not null,value LONG not null,name VARCHAR(75) null,description VARCHAR(75) null,primary key (ratingTypeId, value))";
    public static final String TABLE_SQL_DROP = "drop table xcolab_ProposalRatingValue";
    public static final String ORDER_BY_JPQL = " ORDER BY proposalRatingValue.id.ratingTypeId ASC, proposalRatingValue.id.value ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_ProposalRatingValue.ratingTypeId ASC, xcolab_ProposalRatingValue.value ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.ProposalRatingValue"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.ProposalRatingValue"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.ProposalRatingValue"));
    private static ClassLoader _classLoader = ProposalRatingValue.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            ProposalRatingValue.class
        };
    private long _ratingTypeId;
    private long _value;
    private String _name;
    private String _description;
    private ProposalRatingValue _escapedModel;

    public ProposalRatingValueModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static ProposalRatingValue toModel(ProposalRatingValueSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        ProposalRatingValue model = new ProposalRatingValueImpl();

        model.setRatingTypeId(soapModel.getRatingTypeId());
        model.setValue(soapModel.getValue());
        model.setName(soapModel.getName());
        model.setDescription(soapModel.getDescription());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<ProposalRatingValue> toModels(
        ProposalRatingValueSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<ProposalRatingValue> models = new ArrayList<ProposalRatingValue>(soapModels.length);

        for (ProposalRatingValueSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public ProposalRatingValuePK getPrimaryKey() {
        return new ProposalRatingValuePK(_ratingTypeId, _value);
    }

    @Override
    public void setPrimaryKey(ProposalRatingValuePK primaryKey) {
        setRatingTypeId(primaryKey.ratingTypeId);
        setValue(primaryKey.value);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new ProposalRatingValuePK(_ratingTypeId, _value);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((ProposalRatingValuePK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return ProposalRatingValue.class;
    }

    @Override
    public String getModelClassName() {
        return ProposalRatingValue.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("ratingTypeId", getRatingTypeId());
        attributes.put("value", getValue());
        attributes.put("name", getName());
        attributes.put("description", getDescription());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long ratingTypeId = (Long) attributes.get("ratingTypeId");

        if (ratingTypeId != null) {
            setRatingTypeId(ratingTypeId);
        }

        Long value = (Long) attributes.get("value");

        if (value != null) {
            setValue(value);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }
    }

    @JSON
    @Override
    public long getRatingTypeId() {
        return _ratingTypeId;
    }

    @Override
    public void setRatingTypeId(long ratingTypeId) {
        _ratingTypeId = ratingTypeId;
    }

    @JSON
    @Override
    public long getValue() {
        return _value;
    }

    @Override
    public void setValue(long value) {
        _value = value;
    }

    @JSON
    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _name = name;
    }

    @JSON
    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    @Override
    public ProposalRatingValue toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (ProposalRatingValue) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ProposalRatingValueImpl proposalRatingValueImpl = new ProposalRatingValueImpl();

        proposalRatingValueImpl.setRatingTypeId(getRatingTypeId());
        proposalRatingValueImpl.setValue(getValue());
        proposalRatingValueImpl.setName(getName());
        proposalRatingValueImpl.setDescription(getDescription());

        proposalRatingValueImpl.resetOriginalValues();

        return proposalRatingValueImpl;
    }

    @Override
    public int compareTo(ProposalRatingValue proposalRatingValue) {
        ProposalRatingValuePK primaryKey = proposalRatingValue.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ProposalRatingValue)) {
            return false;
        }

        ProposalRatingValue proposalRatingValue = (ProposalRatingValue) obj;

        ProposalRatingValuePK primaryKey = proposalRatingValue.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<ProposalRatingValue> toCacheModel() {
        ProposalRatingValueCacheModel proposalRatingValueCacheModel = new ProposalRatingValueCacheModel();

        proposalRatingValueCacheModel.ratingTypeId = getRatingTypeId();

        proposalRatingValueCacheModel.value = getValue();

        proposalRatingValueCacheModel.name = getName();

        String name = proposalRatingValueCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            proposalRatingValueCacheModel.name = null;
        }

        proposalRatingValueCacheModel.description = getDescription();

        String description = proposalRatingValueCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            proposalRatingValueCacheModel.description = null;
        }

        return proposalRatingValueCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(9);

        sb.append("{ratingTypeId=");
        sb.append(getRatingTypeId());
        sb.append(", value=");
        sb.append(getValue());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(16);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.ProposalRatingValue");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>ratingTypeId</column-name><column-value><![CDATA[");
        sb.append(getRatingTypeId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>value</column-name><column-value><![CDATA[");
        sb.append(getValue());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
