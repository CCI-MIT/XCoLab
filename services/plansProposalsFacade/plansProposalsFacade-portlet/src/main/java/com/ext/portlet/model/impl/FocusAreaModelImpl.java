package com.ext.portlet.model.impl;

import com.ext.portlet.model.FocusArea;
import com.ext.portlet.model.FocusAreaModel;
import com.ext.portlet.model.FocusAreaSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the FocusArea service. Represents a row in the &quot;xcolab_FocusArea&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.FocusAreaModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FocusAreaImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FocusAreaImpl
 * @see com.ext.portlet.model.FocusArea
 * @see com.ext.portlet.model.FocusAreaModel
 * @generated
 */
@JSON(strict = true)
public class FocusAreaModelImpl extends BaseModelImpl<FocusArea>
    implements FocusAreaModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a focus area model instance should use the {@link com.ext.portlet.model.FocusArea} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_FocusArea";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "name", Types.VARCHAR },
            { "order_", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_FocusArea (id_ LONG not null primary key,name VARCHAR(256) null,order_ INTEGER)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_FocusArea";
    public static final String ORDER_BY_JPQL = " ORDER BY focusArea.order ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_FocusArea.order_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.FocusArea"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.FocusArea"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.model.FocusArea"),
            true);
    public static long NAME_COLUMN_BITMASK = 1L;
    public static long ORDER_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.FocusArea"));
    private static ClassLoader _classLoader = FocusArea.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            FocusArea.class
        };
    private long _id;
    private String _name;
    private String _originalName;
    private int _order;
    private long _columnBitmask;
    private FocusArea _escapedModel;

    public FocusAreaModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static FocusArea toModel(FocusAreaSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        FocusArea model = new FocusAreaImpl();

        model.setId(soapModel.getId());
        model.setName(soapModel.getName());
        model.setOrder(soapModel.getOrder());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<FocusArea> toModels(FocusAreaSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<FocusArea> models = new ArrayList<FocusArea>(soapModels.length);

        for (FocusAreaSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return FocusArea.class;
    }

    @Override
    public String getModelClassName() {
        return FocusArea.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("name", getName());
        attributes.put("order", getOrder());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        Integer order = (Integer) attributes.get("order");

        if (order != null) {
            setOrder(order);
        }
    }

    @JSON
    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @JSON
    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _columnBitmask |= NAME_COLUMN_BITMASK;

        if (_originalName == null) {
            _originalName = _name;
        }

        _name = name;
    }

    public String getOriginalName() {
        return GetterUtil.getString(_originalName);
    }

    @JSON
    @Override
    public int getOrder() {
        return _order;
    }

    @Override
    public void setOrder(int order) {
        _columnBitmask = -1L;

        _order = order;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            FocusArea.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public FocusArea toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (FocusArea) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        FocusAreaImpl focusAreaImpl = new FocusAreaImpl();

        focusAreaImpl.setId(getId());
        focusAreaImpl.setName(getName());
        focusAreaImpl.setOrder(getOrder());

        focusAreaImpl.resetOriginalValues();

        return focusAreaImpl;
    }

    @Override
    public int compareTo(FocusArea focusArea) {
        int value = 0;

        if (getOrder() < focusArea.getOrder()) {
            value = -1;
        } else if (getOrder() > focusArea.getOrder()) {
            value = 1;
        } else {
            value = 0;
        }

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof FocusArea)) {
            return false;
        }

        FocusArea focusArea = (FocusArea) obj;

        long primaryKey = focusArea.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        FocusAreaModelImpl focusAreaModelImpl = this;

        focusAreaModelImpl._originalName = focusAreaModelImpl._name;

        focusAreaModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<FocusArea> toCacheModel() {
        FocusAreaCacheModel focusAreaCacheModel = new FocusAreaCacheModel();

        focusAreaCacheModel.id = getId();

        focusAreaCacheModel.name = getName();

        String name = focusAreaCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            focusAreaCacheModel.name = null;
        }

        focusAreaCacheModel.order = getOrder();

        return focusAreaCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", order=");
        sb.append(getOrder());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.FocusArea");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>order</column-name><column-value><![CDATA[");
        sb.append(getOrder());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
