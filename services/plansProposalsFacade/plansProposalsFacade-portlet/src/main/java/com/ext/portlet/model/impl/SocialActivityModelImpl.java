package com.ext.portlet.model.impl;

import com.ext.portlet.model.SocialActivity;
import com.ext.portlet.model.SocialActivityModel;
import com.ext.portlet.model.SocialActivitySoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the SocialActivity service. Represents a row in the &quot;xcolab_SocialActivity&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.SocialActivityModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SocialActivityImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SocialActivityImpl
 * @see com.ext.portlet.model.SocialActivity
 * @see com.ext.portlet.model.SocialActivityModel
 * @generated
 */
@JSON(strict = true)
public class SocialActivityModelImpl extends BaseModelImpl<SocialActivity>
    implements SocialActivityModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a social activity model instance should use the {@link com.ext.portlet.model.SocialActivity} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_SocialActivity";
    public static final Object[][] TABLE_COLUMNS = {
            { "activityId", Types.BIGINT },
            { "userId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_SocialActivity (activityId LONG not null primary key,userId LONG)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_SocialActivity";
    public static final String ORDER_BY_JPQL = " ORDER BY socialActivity.activityId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_SocialActivity.activityId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.SocialActivity"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.SocialActivity"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.SocialActivity"));
    private static ClassLoader _classLoader = SocialActivity.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            SocialActivity.class
        };
    private long _activityId;
    private long _userId;
    private String _userUuid;
    private SocialActivity _escapedModel;

    public SocialActivityModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static SocialActivity toModel(SocialActivitySoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        SocialActivity model = new SocialActivityImpl();

        model.setActivityId(soapModel.getActivityId());
        model.setUserId(soapModel.getUserId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<SocialActivity> toModels(SocialActivitySoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<SocialActivity> models = new ArrayList<SocialActivity>(soapModels.length);

        for (SocialActivitySoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _activityId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setActivityId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _activityId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return SocialActivity.class;
    }

    @Override
    public String getModelClassName() {
        return SocialActivity.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("activityId", getActivityId());
        attributes.put("userId", getUserId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long activityId = (Long) attributes.get("activityId");

        if (activityId != null) {
            setActivityId(activityId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }
    }

    @JSON
    @Override
    public long getActivityId() {
        return _activityId;
    }

    @Override
    public void setActivityId(long activityId) {
        _activityId = activityId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            SocialActivity.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public SocialActivity toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (SocialActivity) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        SocialActivityImpl socialActivityImpl = new SocialActivityImpl();

        socialActivityImpl.setActivityId(getActivityId());
        socialActivityImpl.setUserId(getUserId());

        socialActivityImpl.resetOriginalValues();

        return socialActivityImpl;
    }

    @Override
    public int compareTo(SocialActivity socialActivity) {
        long primaryKey = socialActivity.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof SocialActivity)) {
            return false;
        }

        SocialActivity socialActivity = (SocialActivity) obj;

        long primaryKey = socialActivity.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<SocialActivity> toCacheModel() {
        SocialActivityCacheModel socialActivityCacheModel = new SocialActivityCacheModel();

        socialActivityCacheModel.activityId = getActivityId();

        socialActivityCacheModel.userId = getUserId();

        return socialActivityCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(5);

        sb.append("{activityId=");
        sb.append(getActivityId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(10);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.SocialActivity");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>activityId</column-name><column-value><![CDATA[");
        sb.append(getActivityId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
