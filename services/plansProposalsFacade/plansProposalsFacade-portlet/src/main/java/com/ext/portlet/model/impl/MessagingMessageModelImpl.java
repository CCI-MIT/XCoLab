package com.ext.portlet.model.impl;

import com.ext.portlet.model.MessagingMessage;
import com.ext.portlet.model.MessagingMessageModel;
import com.ext.portlet.model.MessagingMessageSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the MessagingMessage service. Represents a row in the &quot;xcolab_MessagingMessage&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.MessagingMessageModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MessagingMessageImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MessagingMessageImpl
 * @see com.ext.portlet.model.MessagingMessage
 * @see com.ext.portlet.model.MessagingMessageModel
 * @generated
 */
@JSON(strict = true)
public class MessagingMessageModelImpl extends BaseModelImpl<MessagingMessage>
    implements MessagingMessageModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a messaging message model instance should use the {@link com.ext.portlet.model.MessagingMessage} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_MessagingMessage";
    public static final Object[][] TABLE_COLUMNS = {
            { "messageId", Types.BIGINT },
            { "name", Types.VARCHAR },
            { "description", Types.VARCHAR },
            { "subject", Types.VARCHAR },
            { "body", Types.VARCHAR },
            { "replyTo", Types.VARCHAR },
            { "sendToAll", Types.BOOLEAN },
            { "conversionCount", Types.BIGINT },
            { "redirectURL", Types.VARCHAR },
            { "creatorId", Types.BIGINT },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_MessagingMessage (messageId LONG not null primary key,name VARCHAR(75) null,description VARCHAR(75) null,subject VARCHAR(75) null,body VARCHAR(75) null,replyTo VARCHAR(75) null,sendToAll BOOLEAN,conversionCount LONG,redirectURL VARCHAR(75) null,creatorId LONG,createDate DATE null,modifiedDate DATE null)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_MessagingMessage";
    public static final String ORDER_BY_JPQL = " ORDER BY messagingMessage.createDate DESC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_MessagingMessage.createDate DESC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.MessagingMessage"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.MessagingMessage"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.MessagingMessage"));
    private static ClassLoader _classLoader = MessagingMessage.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            MessagingMessage.class
        };
    private long _messageId;
    private String _name;
    private String _description;
    private String _subject;
    private String _body;
    private String _replyTo;
    private boolean _sendToAll;
    private long _conversionCount;
    private String _redirectURL;
    private long _creatorId;
    private Date _createDate;
    private Date _modifiedDate;
    private MessagingMessage _escapedModel;

    public MessagingMessageModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static MessagingMessage toModel(MessagingMessageSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        MessagingMessage model = new MessagingMessageImpl();

        model.setMessageId(soapModel.getMessageId());
        model.setName(soapModel.getName());
        model.setDescription(soapModel.getDescription());
        model.setSubject(soapModel.getSubject());
        model.setBody(soapModel.getBody());
        model.setReplyTo(soapModel.getReplyTo());
        model.setSendToAll(soapModel.getSendToAll());
        model.setConversionCount(soapModel.getConversionCount());
        model.setRedirectURL(soapModel.getRedirectURL());
        model.setCreatorId(soapModel.getCreatorId());
        model.setCreateDate(soapModel.getCreateDate());
        model.setModifiedDate(soapModel.getModifiedDate());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<MessagingMessage> toModels(
        MessagingMessageSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<MessagingMessage> models = new ArrayList<MessagingMessage>(soapModels.length);

        for (MessagingMessageSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _messageId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setMessageId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _messageId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return MessagingMessage.class;
    }

    @Override
    public String getModelClassName() {
        return MessagingMessage.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("messageId", getMessageId());
        attributes.put("name", getName());
        attributes.put("description", getDescription());
        attributes.put("subject", getSubject());
        attributes.put("body", getBody());
        attributes.put("replyTo", getReplyTo());
        attributes.put("sendToAll", getSendToAll());
        attributes.put("conversionCount", getConversionCount());
        attributes.put("redirectURL", getRedirectURL());
        attributes.put("creatorId", getCreatorId());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long messageId = (Long) attributes.get("messageId");

        if (messageId != null) {
            setMessageId(messageId);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }

        String subject = (String) attributes.get("subject");

        if (subject != null) {
            setSubject(subject);
        }

        String body = (String) attributes.get("body");

        if (body != null) {
            setBody(body);
        }

        String replyTo = (String) attributes.get("replyTo");

        if (replyTo != null) {
            setReplyTo(replyTo);
        }

        Boolean sendToAll = (Boolean) attributes.get("sendToAll");

        if (sendToAll != null) {
            setSendToAll(sendToAll);
        }

        Long conversionCount = (Long) attributes.get("conversionCount");

        if (conversionCount != null) {
            setConversionCount(conversionCount);
        }

        String redirectURL = (String) attributes.get("redirectURL");

        if (redirectURL != null) {
            setRedirectURL(redirectURL);
        }

        Long creatorId = (Long) attributes.get("creatorId");

        if (creatorId != null) {
            setCreatorId(creatorId);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }
    }

    @JSON
    @Override
    public long getMessageId() {
        return _messageId;
    }

    @Override
    public void setMessageId(long messageId) {
        _messageId = messageId;
    }

    @JSON
    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _name = name;
    }

    @JSON
    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    @JSON
    @Override
    public String getSubject() {
        if (_subject == null) {
            return StringPool.BLANK;
        } else {
            return _subject;
        }
    }

    @Override
    public void setSubject(String subject) {
        _subject = subject;
    }

    @JSON
    @Override
    public String getBody() {
        if (_body == null) {
            return StringPool.BLANK;
        } else {
            return _body;
        }
    }

    @Override
    public void setBody(String body) {
        _body = body;
    }

    @JSON
    @Override
    public String getReplyTo() {
        if (_replyTo == null) {
            return StringPool.BLANK;
        } else {
            return _replyTo;
        }
    }

    @Override
    public void setReplyTo(String replyTo) {
        _replyTo = replyTo;
    }

    @JSON
    @Override
    public boolean getSendToAll() {
        return _sendToAll;
    }

    @Override
    public boolean isSendToAll() {
        return _sendToAll;
    }

    @Override
    public void setSendToAll(boolean sendToAll) {
        _sendToAll = sendToAll;
    }

    @JSON
    @Override
    public long getConversionCount() {
        return _conversionCount;
    }

    @Override
    public void setConversionCount(long conversionCount) {
        _conversionCount = conversionCount;
    }

    @JSON
    @Override
    public String getRedirectURL() {
        if (_redirectURL == null) {
            return StringPool.BLANK;
        } else {
            return _redirectURL;
        }
    }

    @Override
    public void setRedirectURL(String redirectURL) {
        _redirectURL = redirectURL;
    }

    @JSON
    @Override
    public long getCreatorId() {
        return _creatorId;
    }

    @Override
    public void setCreatorId(long creatorId) {
        _creatorId = creatorId;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            MessagingMessage.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public MessagingMessage toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (MessagingMessage) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        MessagingMessageImpl messagingMessageImpl = new MessagingMessageImpl();

        messagingMessageImpl.setMessageId(getMessageId());
        messagingMessageImpl.setName(getName());
        messagingMessageImpl.setDescription(getDescription());
        messagingMessageImpl.setSubject(getSubject());
        messagingMessageImpl.setBody(getBody());
        messagingMessageImpl.setReplyTo(getReplyTo());
        messagingMessageImpl.setSendToAll(getSendToAll());
        messagingMessageImpl.setConversionCount(getConversionCount());
        messagingMessageImpl.setRedirectURL(getRedirectURL());
        messagingMessageImpl.setCreatorId(getCreatorId());
        messagingMessageImpl.setCreateDate(getCreateDate());
        messagingMessageImpl.setModifiedDate(getModifiedDate());

        messagingMessageImpl.resetOriginalValues();

        return messagingMessageImpl;
    }

    @Override
    public int compareTo(MessagingMessage messagingMessage) {
        int value = 0;

        value = DateUtil.compareTo(getCreateDate(),
                messagingMessage.getCreateDate());

        value = value * -1;

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof MessagingMessage)) {
            return false;
        }

        MessagingMessage messagingMessage = (MessagingMessage) obj;

        long primaryKey = messagingMessage.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<MessagingMessage> toCacheModel() {
        MessagingMessageCacheModel messagingMessageCacheModel = new MessagingMessageCacheModel();

        messagingMessageCacheModel.messageId = getMessageId();

        messagingMessageCacheModel.name = getName();

        String name = messagingMessageCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            messagingMessageCacheModel.name = null;
        }

        messagingMessageCacheModel.description = getDescription();

        String description = messagingMessageCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            messagingMessageCacheModel.description = null;
        }

        messagingMessageCacheModel.subject = getSubject();

        String subject = messagingMessageCacheModel.subject;

        if ((subject != null) && (subject.length() == 0)) {
            messagingMessageCacheModel.subject = null;
        }

        messagingMessageCacheModel.body = getBody();

        String body = messagingMessageCacheModel.body;

        if ((body != null) && (body.length() == 0)) {
            messagingMessageCacheModel.body = null;
        }

        messagingMessageCacheModel.replyTo = getReplyTo();

        String replyTo = messagingMessageCacheModel.replyTo;

        if ((replyTo != null) && (replyTo.length() == 0)) {
            messagingMessageCacheModel.replyTo = null;
        }

        messagingMessageCacheModel.sendToAll = getSendToAll();

        messagingMessageCacheModel.conversionCount = getConversionCount();

        messagingMessageCacheModel.redirectURL = getRedirectURL();

        String redirectURL = messagingMessageCacheModel.redirectURL;

        if ((redirectURL != null) && (redirectURL.length() == 0)) {
            messagingMessageCacheModel.redirectURL = null;
        }

        messagingMessageCacheModel.creatorId = getCreatorId();

        Date createDate = getCreateDate();

        if (createDate != null) {
            messagingMessageCacheModel.createDate = createDate.getTime();
        } else {
            messagingMessageCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            messagingMessageCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            messagingMessageCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        return messagingMessageCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(25);

        sb.append("{messageId=");
        sb.append(getMessageId());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append(", subject=");
        sb.append(getSubject());
        sb.append(", body=");
        sb.append(getBody());
        sb.append(", replyTo=");
        sb.append(getReplyTo());
        sb.append(", sendToAll=");
        sb.append(getSendToAll());
        sb.append(", conversionCount=");
        sb.append(getConversionCount());
        sb.append(", redirectURL=");
        sb.append(getRedirectURL());
        sb.append(", creatorId=");
        sb.append(getCreatorId());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(40);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.MessagingMessage");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>messageId</column-name><column-value><![CDATA[");
        sb.append(getMessageId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>subject</column-name><column-value><![CDATA[");
        sb.append(getSubject());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>body</column-name><column-value><![CDATA[");
        sb.append(getBody());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>replyTo</column-name><column-value><![CDATA[");
        sb.append(getReplyTo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sendToAll</column-name><column-value><![CDATA[");
        sb.append(getSendToAll());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>conversionCount</column-name><column-value><![CDATA[");
        sb.append(getConversionCount());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>redirectURL</column-name><column-value><![CDATA[");
        sb.append(getRedirectURL());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>creatorId</column-name><column-value><![CDATA[");
        sb.append(getCreatorId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
