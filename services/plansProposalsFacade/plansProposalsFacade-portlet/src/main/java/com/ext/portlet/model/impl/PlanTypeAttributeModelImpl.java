package com.ext.portlet.model.impl;

import com.ext.portlet.model.PlanTypeAttribute;
import com.ext.portlet.model.PlanTypeAttributeModel;
import com.ext.portlet.model.PlanTypeAttributeSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the PlanTypeAttribute service. Represents a row in the &quot;xcolab_PlanTypeAttribute&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.PlanTypeAttributeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PlanTypeAttributeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PlanTypeAttributeImpl
 * @see com.ext.portlet.model.PlanTypeAttribute
 * @see com.ext.portlet.model.PlanTypeAttributeModel
 * @generated
 */
@JSON(strict = true)
public class PlanTypeAttributeModelImpl extends BaseModelImpl<PlanTypeAttribute>
    implements PlanTypeAttributeModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a plan type attribute model instance should use the {@link com.ext.portlet.model.PlanTypeAttribute} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_PlanTypeAttribute";
    public static final Object[][] TABLE_COLUMNS = {
            { "planTypeAttributeId", Types.BIGINT },
            { "planTypeId", Types.BIGINT },
            { "attributeName", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_PlanTypeAttribute (planTypeAttributeId LONG not null primary key,planTypeId LONG,attributeName VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_PlanTypeAttribute";
    public static final String ORDER_BY_JPQL = " ORDER BY planTypeAttribute.planTypeAttributeId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_PlanTypeAttribute.planTypeAttributeId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.PlanTypeAttribute"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.PlanTypeAttribute"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.model.PlanTypeAttribute"),
            true);
    public static long ATTRIBUTENAME_COLUMN_BITMASK = 1L;
    public static long PLANTYPEID_COLUMN_BITMASK = 2L;
    public static long PLANTYPEATTRIBUTEID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.PlanTypeAttribute"));
    private static ClassLoader _classLoader = PlanTypeAttribute.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            PlanTypeAttribute.class
        };
    private long _planTypeAttributeId;
    private long _planTypeId;
    private long _originalPlanTypeId;
    private boolean _setOriginalPlanTypeId;
    private String _attributeName;
    private String _originalAttributeName;
    private long _columnBitmask;
    private PlanTypeAttribute _escapedModel;

    public PlanTypeAttributeModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static PlanTypeAttribute toModel(PlanTypeAttributeSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        PlanTypeAttribute model = new PlanTypeAttributeImpl();

        model.setPlanTypeAttributeId(soapModel.getPlanTypeAttributeId());
        model.setPlanTypeId(soapModel.getPlanTypeId());
        model.setAttributeName(soapModel.getAttributeName());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<PlanTypeAttribute> toModels(
        PlanTypeAttributeSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<PlanTypeAttribute> models = new ArrayList<PlanTypeAttribute>(soapModels.length);

        for (PlanTypeAttributeSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _planTypeAttributeId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setPlanTypeAttributeId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _planTypeAttributeId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return PlanTypeAttribute.class;
    }

    @Override
    public String getModelClassName() {
        return PlanTypeAttribute.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("planTypeAttributeId", getPlanTypeAttributeId());
        attributes.put("planTypeId", getPlanTypeId());
        attributes.put("attributeName", getAttributeName());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long planTypeAttributeId = (Long) attributes.get("planTypeAttributeId");

        if (planTypeAttributeId != null) {
            setPlanTypeAttributeId(planTypeAttributeId);
        }

        Long planTypeId = (Long) attributes.get("planTypeId");

        if (planTypeId != null) {
            setPlanTypeId(planTypeId);
        }

        String attributeName = (String) attributes.get("attributeName");

        if (attributeName != null) {
            setAttributeName(attributeName);
        }
    }

    @JSON
    @Override
    public long getPlanTypeAttributeId() {
        return _planTypeAttributeId;
    }

    @Override
    public void setPlanTypeAttributeId(long planTypeAttributeId) {
        _planTypeAttributeId = planTypeAttributeId;
    }

    @JSON
    @Override
    public long getPlanTypeId() {
        return _planTypeId;
    }

    @Override
    public void setPlanTypeId(long planTypeId) {
        _columnBitmask |= PLANTYPEID_COLUMN_BITMASK;

        if (!_setOriginalPlanTypeId) {
            _setOriginalPlanTypeId = true;

            _originalPlanTypeId = _planTypeId;
        }

        _planTypeId = planTypeId;
    }

    public long getOriginalPlanTypeId() {
        return _originalPlanTypeId;
    }

    @JSON
    @Override
    public String getAttributeName() {
        if (_attributeName == null) {
            return StringPool.BLANK;
        } else {
            return _attributeName;
        }
    }

    @Override
    public void setAttributeName(String attributeName) {
        _columnBitmask |= ATTRIBUTENAME_COLUMN_BITMASK;

        if (_originalAttributeName == null) {
            _originalAttributeName = _attributeName;
        }

        _attributeName = attributeName;
    }

    public String getOriginalAttributeName() {
        return GetterUtil.getString(_originalAttributeName);
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            PlanTypeAttribute.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public PlanTypeAttribute toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (PlanTypeAttribute) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        PlanTypeAttributeImpl planTypeAttributeImpl = new PlanTypeAttributeImpl();

        planTypeAttributeImpl.setPlanTypeAttributeId(getPlanTypeAttributeId());
        planTypeAttributeImpl.setPlanTypeId(getPlanTypeId());
        planTypeAttributeImpl.setAttributeName(getAttributeName());

        planTypeAttributeImpl.resetOriginalValues();

        return planTypeAttributeImpl;
    }

    @Override
    public int compareTo(PlanTypeAttribute planTypeAttribute) {
        long primaryKey = planTypeAttribute.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof PlanTypeAttribute)) {
            return false;
        }

        PlanTypeAttribute planTypeAttribute = (PlanTypeAttribute) obj;

        long primaryKey = planTypeAttribute.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        PlanTypeAttributeModelImpl planTypeAttributeModelImpl = this;

        planTypeAttributeModelImpl._originalPlanTypeId = planTypeAttributeModelImpl._planTypeId;

        planTypeAttributeModelImpl._setOriginalPlanTypeId = false;

        planTypeAttributeModelImpl._originalAttributeName = planTypeAttributeModelImpl._attributeName;

        planTypeAttributeModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<PlanTypeAttribute> toCacheModel() {
        PlanTypeAttributeCacheModel planTypeAttributeCacheModel = new PlanTypeAttributeCacheModel();

        planTypeAttributeCacheModel.planTypeAttributeId = getPlanTypeAttributeId();

        planTypeAttributeCacheModel.planTypeId = getPlanTypeId();

        planTypeAttributeCacheModel.attributeName = getAttributeName();

        String attributeName = planTypeAttributeCacheModel.attributeName;

        if ((attributeName != null) && (attributeName.length() == 0)) {
            planTypeAttributeCacheModel.attributeName = null;
        }

        return planTypeAttributeCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{planTypeAttributeId=");
        sb.append(getPlanTypeAttributeId());
        sb.append(", planTypeId=");
        sb.append(getPlanTypeId());
        sb.append(", attributeName=");
        sb.append(getAttributeName());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.PlanTypeAttribute");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>planTypeAttributeId</column-name><column-value><![CDATA[");
        sb.append(getPlanTypeAttributeId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>planTypeId</column-name><column-value><![CDATA[");
        sb.append(getPlanTypeId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>attributeName</column-name><column-value><![CDATA[");
        sb.append(getAttributeName());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
