package com.ext.portlet.model.impl;

import com.ext.portlet.model.BalloonUserTracking;
import com.ext.portlet.model.BalloonUserTrackingModel;
import com.ext.portlet.model.BalloonUserTrackingSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.util.PortalUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the BalloonUserTracking service. Represents a row in the &quot;xcolab_BalloonUserTracking&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.BalloonUserTrackingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BalloonUserTrackingImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see BalloonUserTrackingImpl
 * @see com.ext.portlet.model.BalloonUserTracking
 * @see com.ext.portlet.model.BalloonUserTrackingModel
 * @generated
 */
@JSON(strict = true)
public class BalloonUserTrackingModelImpl extends BaseModelImpl<BalloonUserTracking>
    implements BalloonUserTrackingModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a balloon user tracking model instance should use the {@link com.ext.portlet.model.BalloonUserTracking} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_BalloonUserTracking";
    public static final Object[][] TABLE_COLUMNS = {
            { "uuid_", Types.VARCHAR },
            { "email", Types.VARCHAR },
            { "parent", Types.VARCHAR },
            { "ip", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "registrationDate", Types.TIMESTAMP },
            { "formFiledDate", Types.TIMESTAMP },
            { "userId", Types.BIGINT },
            { "balloonTextId", Types.BIGINT },
            { "referrer", Types.VARCHAR },
            { "latitude", Types.DOUBLE },
            { "longitude", Types.DOUBLE },
            { "city", Types.VARCHAR },
            { "country", Types.VARCHAR },
            { "extraData", Types.CLOB },
            { "balloonLinkUuid", Types.VARCHAR },
            { "balloonLinkContext", Types.VARCHAR },
            { "userAgent", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_BalloonUserTracking (uuid_ VARCHAR(75) not null primary key,email VARCHAR(200) null,parent VARCHAR(75) null,ip VARCHAR(75) null,createDate DATE null,registrationDate DATE null,formFiledDate DATE null,userId LONG,balloonTextId LONG,referrer VARCHAR(500) null,latitude DOUBLE,longitude DOUBLE,city VARCHAR(75) null,country VARCHAR(75) null,extraData TEXT null,balloonLinkUuid VARCHAR(75) null,balloonLinkContext VARCHAR(75) null,userAgent VARCHAR(500) null)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_BalloonUserTracking";
    public static final String ORDER_BY_JPQL = " ORDER BY balloonUserTracking.uuid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_BalloonUserTracking.uuid_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.BalloonUserTracking"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.BalloonUserTracking"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.model.BalloonUserTracking"),
            true);
    public static long EMAIL_COLUMN_BITMASK = 1L;
    public static long UUID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.BalloonUserTracking"));
    private static ClassLoader _classLoader = BalloonUserTracking.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            BalloonUserTracking.class
        };
    private String _uuid;
    private String _email;
    private String _originalEmail;
    private String _parent;
    private String _ip;
    private Date _createDate;
    private Date _registrationDate;
    private Date _formFiledDate;
    private long _userId;
    private String _userUuid;
    private long _balloonTextId;
    private String _referrer;
    private double _latitude;
    private double _longitude;
    private String _city;
    private String _country;
    private String _extraData;
    private String _balloonLinkUuid;
    private String _balloonLinkContext;
    private String _userAgent;
    private long _columnBitmask;
    private BalloonUserTracking _escapedModel;

    public BalloonUserTrackingModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static BalloonUserTracking toModel(BalloonUserTrackingSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        BalloonUserTracking model = new BalloonUserTrackingImpl();

        model.setUuid(soapModel.getUuid());
        model.setEmail(soapModel.getEmail());
        model.setParent(soapModel.getParent());
        model.setIp(soapModel.getIp());
        model.setCreateDate(soapModel.getCreateDate());
        model.setRegistrationDate(soapModel.getRegistrationDate());
        model.setFormFiledDate(soapModel.getFormFiledDate());
        model.setUserId(soapModel.getUserId());
        model.setBalloonTextId(soapModel.getBalloonTextId());
        model.setReferrer(soapModel.getReferrer());
        model.setLatitude(soapModel.getLatitude());
        model.setLongitude(soapModel.getLongitude());
        model.setCity(soapModel.getCity());
        model.setCountry(soapModel.getCountry());
        model.setExtraData(soapModel.getExtraData());
        model.setBalloonLinkUuid(soapModel.getBalloonLinkUuid());
        model.setBalloonLinkContext(soapModel.getBalloonLinkContext());
        model.setUserAgent(soapModel.getUserAgent());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<BalloonUserTracking> toModels(
        BalloonUserTrackingSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<BalloonUserTracking> models = new ArrayList<BalloonUserTracking>(soapModels.length);

        for (BalloonUserTrackingSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public String getPrimaryKey() {
        return _uuid;
    }

    @Override
    public void setPrimaryKey(String primaryKey) {
        setUuid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _uuid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((String) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return BalloonUserTracking.class;
    }

    @Override
    public String getModelClassName() {
        return BalloonUserTracking.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("uuid", getUuid());
        attributes.put("email", getEmail());
        attributes.put("parent", getParent());
        attributes.put("ip", getIp());
        attributes.put("createDate", getCreateDate());
        attributes.put("registrationDate", getRegistrationDate());
        attributes.put("formFiledDate", getFormFiledDate());
        attributes.put("userId", getUserId());
        attributes.put("balloonTextId", getBalloonTextId());
        attributes.put("referrer", getReferrer());
        attributes.put("latitude", getLatitude());
        attributes.put("longitude", getLongitude());
        attributes.put("city", getCity());
        attributes.put("country", getCountry());
        attributes.put("extraData", getExtraData());
        attributes.put("balloonLinkUuid", getBalloonLinkUuid());
        attributes.put("balloonLinkContext", getBalloonLinkContext());
        attributes.put("userAgent", getUserAgent());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String uuid = (String) attributes.get("uuid");

        if (uuid != null) {
            setUuid(uuid);
        }

        String email = (String) attributes.get("email");

        if (email != null) {
            setEmail(email);
        }

        String parent = (String) attributes.get("parent");

        if (parent != null) {
            setParent(parent);
        }

        String ip = (String) attributes.get("ip");

        if (ip != null) {
            setIp(ip);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date registrationDate = (Date) attributes.get("registrationDate");

        if (registrationDate != null) {
            setRegistrationDate(registrationDate);
        }

        Date formFiledDate = (Date) attributes.get("formFiledDate");

        if (formFiledDate != null) {
            setFormFiledDate(formFiledDate);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Long balloonTextId = (Long) attributes.get("balloonTextId");

        if (balloonTextId != null) {
            setBalloonTextId(balloonTextId);
        }

        String referrer = (String) attributes.get("referrer");

        if (referrer != null) {
            setReferrer(referrer);
        }

        Double latitude = (Double) attributes.get("latitude");

        if (latitude != null) {
            setLatitude(latitude);
        }

        Double longitude = (Double) attributes.get("longitude");

        if (longitude != null) {
            setLongitude(longitude);
        }

        String city = (String) attributes.get("city");

        if (city != null) {
            setCity(city);
        }

        String country = (String) attributes.get("country");

        if (country != null) {
            setCountry(country);
        }

        String extraData = (String) attributes.get("extraData");

        if (extraData != null) {
            setExtraData(extraData);
        }

        String balloonLinkUuid = (String) attributes.get("balloonLinkUuid");

        if (balloonLinkUuid != null) {
            setBalloonLinkUuid(balloonLinkUuid);
        }

        String balloonLinkContext = (String) attributes.get(
                "balloonLinkContext");

        if (balloonLinkContext != null) {
            setBalloonLinkContext(balloonLinkContext);
        }

        String userAgent = (String) attributes.get("userAgent");

        if (userAgent != null) {
            setUserAgent(userAgent);
        }
    }

    @JSON
    @Override
    public String getUuid() {
        if (_uuid == null) {
            return StringPool.BLANK;
        } else {
            return _uuid;
        }
    }

    @Override
    public void setUuid(String uuid) {
        _uuid = uuid;
    }

    @JSON
    @Override
    public String getEmail() {
        if (_email == null) {
            return StringPool.BLANK;
        } else {
            return _email;
        }
    }

    @Override
    public void setEmail(String email) {
        _columnBitmask |= EMAIL_COLUMN_BITMASK;

        if (_originalEmail == null) {
            _originalEmail = _email;
        }

        _email = email;
    }

    public String getOriginalEmail() {
        return GetterUtil.getString(_originalEmail);
    }

    @JSON
    @Override
    public String getParent() {
        if (_parent == null) {
            return StringPool.BLANK;
        } else {
            return _parent;
        }
    }

    @Override
    public void setParent(String parent) {
        _parent = parent;
    }

    @JSON
    @Override
    public String getIp() {
        if (_ip == null) {
            return StringPool.BLANK;
        } else {
            return _ip;
        }
    }

    @Override
    public void setIp(String ip) {
        _ip = ip;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public Date getRegistrationDate() {
        return _registrationDate;
    }

    @Override
    public void setRegistrationDate(Date registrationDate) {
        _registrationDate = registrationDate;
    }

    @JSON
    @Override
    public Date getFormFiledDate() {
        return _formFiledDate;
    }

    @Override
    public void setFormFiledDate(Date formFiledDate) {
        _formFiledDate = formFiledDate;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    @Override
    public long getBalloonTextId() {
        return _balloonTextId;
    }

    @Override
    public void setBalloonTextId(long balloonTextId) {
        _balloonTextId = balloonTextId;
    }

    @JSON
    @Override
    public String getReferrer() {
        if (_referrer == null) {
            return StringPool.BLANK;
        } else {
            return _referrer;
        }
    }

    @Override
    public void setReferrer(String referrer) {
        _referrer = referrer;
    }

    @JSON
    @Override
    public double getLatitude() {
        return _latitude;
    }

    @Override
    public void setLatitude(double latitude) {
        _latitude = latitude;
    }

    @JSON
    @Override
    public double getLongitude() {
        return _longitude;
    }

    @Override
    public void setLongitude(double longitude) {
        _longitude = longitude;
    }

    @JSON
    @Override
    public String getCity() {
        if (_city == null) {
            return StringPool.BLANK;
        } else {
            return _city;
        }
    }

    @Override
    public void setCity(String city) {
        _city = city;
    }

    @JSON
    @Override
    public String getCountry() {
        if (_country == null) {
            return StringPool.BLANK;
        } else {
            return _country;
        }
    }

    @Override
    public void setCountry(String country) {
        _country = country;
    }

    @JSON
    @Override
    public String getExtraData() {
        if (_extraData == null) {
            return StringPool.BLANK;
        } else {
            return _extraData;
        }
    }

    @Override
    public void setExtraData(String extraData) {
        _extraData = extraData;
    }

    @JSON
    @Override
    public String getBalloonLinkUuid() {
        if (_balloonLinkUuid == null) {
            return StringPool.BLANK;
        } else {
            return _balloonLinkUuid;
        }
    }

    @Override
    public void setBalloonLinkUuid(String balloonLinkUuid) {
        _balloonLinkUuid = balloonLinkUuid;
    }

    @JSON
    @Override
    public String getBalloonLinkContext() {
        if (_balloonLinkContext == null) {
            return StringPool.BLANK;
        } else {
            return _balloonLinkContext;
        }
    }

    @Override
    public void setBalloonLinkContext(String balloonLinkContext) {
        _balloonLinkContext = balloonLinkContext;
    }

    @JSON
    @Override
    public String getUserAgent() {
        if (_userAgent == null) {
            return StringPool.BLANK;
        } else {
            return _userAgent;
        }
    }

    @Override
    public void setUserAgent(String userAgent) {
        _userAgent = userAgent;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public BalloonUserTracking toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (BalloonUserTracking) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        BalloonUserTrackingImpl balloonUserTrackingImpl = new BalloonUserTrackingImpl();

        balloonUserTrackingImpl.setUuid(getUuid());
        balloonUserTrackingImpl.setEmail(getEmail());
        balloonUserTrackingImpl.setParent(getParent());
        balloonUserTrackingImpl.setIp(getIp());
        balloonUserTrackingImpl.setCreateDate(getCreateDate());
        balloonUserTrackingImpl.setRegistrationDate(getRegistrationDate());
        balloonUserTrackingImpl.setFormFiledDate(getFormFiledDate());
        balloonUserTrackingImpl.setUserId(getUserId());
        balloonUserTrackingImpl.setBalloonTextId(getBalloonTextId());
        balloonUserTrackingImpl.setReferrer(getReferrer());
        balloonUserTrackingImpl.setLatitude(getLatitude());
        balloonUserTrackingImpl.setLongitude(getLongitude());
        balloonUserTrackingImpl.setCity(getCity());
        balloonUserTrackingImpl.setCountry(getCountry());
        balloonUserTrackingImpl.setExtraData(getExtraData());
        balloonUserTrackingImpl.setBalloonLinkUuid(getBalloonLinkUuid());
        balloonUserTrackingImpl.setBalloonLinkContext(getBalloonLinkContext());
        balloonUserTrackingImpl.setUserAgent(getUserAgent());

        balloonUserTrackingImpl.resetOriginalValues();

        return balloonUserTrackingImpl;
    }

    @Override
    public int compareTo(BalloonUserTracking balloonUserTracking) {
        String primaryKey = balloonUserTracking.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof BalloonUserTracking)) {
            return false;
        }

        BalloonUserTracking balloonUserTracking = (BalloonUserTracking) obj;

        String primaryKey = balloonUserTracking.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        BalloonUserTrackingModelImpl balloonUserTrackingModelImpl = this;

        balloonUserTrackingModelImpl._originalEmail = balloonUserTrackingModelImpl._email;

        balloonUserTrackingModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<BalloonUserTracking> toCacheModel() {
        BalloonUserTrackingCacheModel balloonUserTrackingCacheModel = new BalloonUserTrackingCacheModel();

        balloonUserTrackingCacheModel.uuid = getUuid();

        String uuid = balloonUserTrackingCacheModel.uuid;

        if ((uuid != null) && (uuid.length() == 0)) {
            balloonUserTrackingCacheModel.uuid = null;
        }

        balloonUserTrackingCacheModel.email = getEmail();

        String email = balloonUserTrackingCacheModel.email;

        if ((email != null) && (email.length() == 0)) {
            balloonUserTrackingCacheModel.email = null;
        }

        balloonUserTrackingCacheModel.parent = getParent();

        String parent = balloonUserTrackingCacheModel.parent;

        if ((parent != null) && (parent.length() == 0)) {
            balloonUserTrackingCacheModel.parent = null;
        }

        balloonUserTrackingCacheModel.ip = getIp();

        String ip = balloonUserTrackingCacheModel.ip;

        if ((ip != null) && (ip.length() == 0)) {
            balloonUserTrackingCacheModel.ip = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            balloonUserTrackingCacheModel.createDate = createDate.getTime();
        } else {
            balloonUserTrackingCacheModel.createDate = Long.MIN_VALUE;
        }

        Date registrationDate = getRegistrationDate();

        if (registrationDate != null) {
            balloonUserTrackingCacheModel.registrationDate = registrationDate.getTime();
        } else {
            balloonUserTrackingCacheModel.registrationDate = Long.MIN_VALUE;
        }

        Date formFiledDate = getFormFiledDate();

        if (formFiledDate != null) {
            balloonUserTrackingCacheModel.formFiledDate = formFiledDate.getTime();
        } else {
            balloonUserTrackingCacheModel.formFiledDate = Long.MIN_VALUE;
        }

        balloonUserTrackingCacheModel.userId = getUserId();

        balloonUserTrackingCacheModel.balloonTextId = getBalloonTextId();

        balloonUserTrackingCacheModel.referrer = getReferrer();

        String referrer = balloonUserTrackingCacheModel.referrer;

        if ((referrer != null) && (referrer.length() == 0)) {
            balloonUserTrackingCacheModel.referrer = null;
        }

        balloonUserTrackingCacheModel.latitude = getLatitude();

        balloonUserTrackingCacheModel.longitude = getLongitude();

        balloonUserTrackingCacheModel.city = getCity();

        String city = balloonUserTrackingCacheModel.city;

        if ((city != null) && (city.length() == 0)) {
            balloonUserTrackingCacheModel.city = null;
        }

        balloonUserTrackingCacheModel.country = getCountry();

        String country = balloonUserTrackingCacheModel.country;

        if ((country != null) && (country.length() == 0)) {
            balloonUserTrackingCacheModel.country = null;
        }

        balloonUserTrackingCacheModel.extraData = getExtraData();

        String extraData = balloonUserTrackingCacheModel.extraData;

        if ((extraData != null) && (extraData.length() == 0)) {
            balloonUserTrackingCacheModel.extraData = null;
        }

        balloonUserTrackingCacheModel.balloonLinkUuid = getBalloonLinkUuid();

        String balloonLinkUuid = balloonUserTrackingCacheModel.balloonLinkUuid;

        if ((balloonLinkUuid != null) && (balloonLinkUuid.length() == 0)) {
            balloonUserTrackingCacheModel.balloonLinkUuid = null;
        }

        balloonUserTrackingCacheModel.balloonLinkContext = getBalloonLinkContext();

        String balloonLinkContext = balloonUserTrackingCacheModel.balloonLinkContext;

        if ((balloonLinkContext != null) && (balloonLinkContext.length() == 0)) {
            balloonUserTrackingCacheModel.balloonLinkContext = null;
        }

        balloonUserTrackingCacheModel.userAgent = getUserAgent();

        String userAgent = balloonUserTrackingCacheModel.userAgent;

        if ((userAgent != null) && (userAgent.length() == 0)) {
            balloonUserTrackingCacheModel.userAgent = null;
        }

        return balloonUserTrackingCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(37);

        sb.append("{uuid=");
        sb.append(getUuid());
        sb.append(", email=");
        sb.append(getEmail());
        sb.append(", parent=");
        sb.append(getParent());
        sb.append(", ip=");
        sb.append(getIp());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", registrationDate=");
        sb.append(getRegistrationDate());
        sb.append(", formFiledDate=");
        sb.append(getFormFiledDate());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", balloonTextId=");
        sb.append(getBalloonTextId());
        sb.append(", referrer=");
        sb.append(getReferrer());
        sb.append(", latitude=");
        sb.append(getLatitude());
        sb.append(", longitude=");
        sb.append(getLongitude());
        sb.append(", city=");
        sb.append(getCity());
        sb.append(", country=");
        sb.append(getCountry());
        sb.append(", extraData=");
        sb.append(getExtraData());
        sb.append(", balloonLinkUuid=");
        sb.append(getBalloonLinkUuid());
        sb.append(", balloonLinkContext=");
        sb.append(getBalloonLinkContext());
        sb.append(", userAgent=");
        sb.append(getUserAgent());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(58);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.BalloonUserTracking");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>uuid</column-name><column-value><![CDATA[");
        sb.append(getUuid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>email</column-name><column-value><![CDATA[");
        sb.append(getEmail());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>parent</column-name><column-value><![CDATA[");
        sb.append(getParent());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ip</column-name><column-value><![CDATA[");
        sb.append(getIp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>registrationDate</column-name><column-value><![CDATA[");
        sb.append(getRegistrationDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>formFiledDate</column-name><column-value><![CDATA[");
        sb.append(getFormFiledDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>balloonTextId</column-name><column-value><![CDATA[");
        sb.append(getBalloonTextId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>referrer</column-name><column-value><![CDATA[");
        sb.append(getReferrer());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>latitude</column-name><column-value><![CDATA[");
        sb.append(getLatitude());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>longitude</column-name><column-value><![CDATA[");
        sb.append(getLongitude());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>city</column-name><column-value><![CDATA[");
        sb.append(getCity());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>country</column-name><column-value><![CDATA[");
        sb.append(getCountry());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>extraData</column-name><column-value><![CDATA[");
        sb.append(getExtraData());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>balloonLinkUuid</column-name><column-value><![CDATA[");
        sb.append(getBalloonLinkUuid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>balloonLinkContext</column-name><column-value><![CDATA[");
        sb.append(getBalloonLinkContext());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userAgent</column-name><column-value><![CDATA[");
        sb.append(getUserAgent());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
