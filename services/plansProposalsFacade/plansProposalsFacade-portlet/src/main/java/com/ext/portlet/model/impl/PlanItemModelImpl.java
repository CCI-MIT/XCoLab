package com.ext.portlet.model.impl;

import com.ext.portlet.model.PlanItem;
import com.ext.portlet.model.PlanItemModel;
import com.ext.portlet.model.PlanItemSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the PlanItem service. Represents a row in the &quot;xcolab_PlanItem&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.PlanItemModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PlanItemImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PlanItemImpl
 * @see com.ext.portlet.model.PlanItem
 * @see com.ext.portlet.model.PlanItemModel
 * @generated
 */
@JSON(strict = true)
public class PlanItemModelImpl extends BaseModelImpl<PlanItem>
    implements PlanItemModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a plan item model instance should use the {@link com.ext.portlet.model.PlanItem} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_PlanItem";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "planId", Types.BIGINT },
            { "state_", Types.VARCHAR },
            { "updated", Types.TIMESTAMP },
            { "updateAuthorId", Types.BIGINT },
            { "updateType", Types.VARCHAR },
            { "version", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_PlanItem (id_ LONG not null primary key,planId LONG,state_ VARCHAR(75) null,updated DATE null,updateAuthorId LONG,updateType VARCHAR(75) null,version LONG)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_PlanItem";
    public static final String ORDER_BY_JPQL = " ORDER BY planItem.id DESC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_PlanItem.id_ DESC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.PlanItem"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.PlanItem"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.model.PlanItem"),
            true);
    public static long PLANID_COLUMN_BITMASK = 1L;
    public static long ID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.PlanItem"));
    private static ClassLoader _classLoader = PlanItem.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            PlanItem.class
        };
    private long _id;
    private long _planId;
    private long _originalPlanId;
    private boolean _setOriginalPlanId;
    private String _state;
    private Date _updated;
    private long _updateAuthorId;
    private String _updateType;
    private long _version;
    private long _columnBitmask;
    private PlanItem _escapedModel;

    public PlanItemModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static PlanItem toModel(PlanItemSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        PlanItem model = new PlanItemImpl();

        model.setId(soapModel.getId());
        model.setPlanId(soapModel.getPlanId());
        model.setState(soapModel.getState());
        model.setUpdated(soapModel.getUpdated());
        model.setUpdateAuthorId(soapModel.getUpdateAuthorId());
        model.setUpdateType(soapModel.getUpdateType());
        model.setVersion(soapModel.getVersion());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<PlanItem> toModels(PlanItemSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<PlanItem> models = new ArrayList<PlanItem>(soapModels.length);

        for (PlanItemSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return PlanItem.class;
    }

    @Override
    public String getModelClassName() {
        return PlanItem.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("planId", getPlanId());
        attributes.put("state", getState());
        attributes.put("updated", getUpdated());
        attributes.put("updateAuthorId", getUpdateAuthorId());
        attributes.put("updateType", getUpdateType());
        attributes.put("version", getVersion());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        Long planId = (Long) attributes.get("planId");

        if (planId != null) {
            setPlanId(planId);
        }

        String state = (String) attributes.get("state");

        if (state != null) {
            setState(state);
        }

        Date updated = (Date) attributes.get("updated");

        if (updated != null) {
            setUpdated(updated);
        }

        Long updateAuthorId = (Long) attributes.get("updateAuthorId");

        if (updateAuthorId != null) {
            setUpdateAuthorId(updateAuthorId);
        }

        String updateType = (String) attributes.get("updateType");

        if (updateType != null) {
            setUpdateType(updateType);
        }

        Long version = (Long) attributes.get("version");

        if (version != null) {
            setVersion(version);
        }
    }

    @JSON
    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _columnBitmask = -1L;

        _id = id;
    }

    @JSON
    @Override
    public long getPlanId() {
        return _planId;
    }

    @Override
    public void setPlanId(long planId) {
        _columnBitmask |= PLANID_COLUMN_BITMASK;

        if (!_setOriginalPlanId) {
            _setOriginalPlanId = true;

            _originalPlanId = _planId;
        }

        _planId = planId;
    }

    public long getOriginalPlanId() {
        return _originalPlanId;
    }

    @JSON
    @Override
    public String getState() {
        if (_state == null) {
            return StringPool.BLANK;
        } else {
            return _state;
        }
    }

    @Override
    public void setState(String state) {
        _state = state;
    }

    @JSON
    @Override
    public Date getUpdated() {
        return _updated;
    }

    @Override
    public void setUpdated(Date updated) {
        _updated = updated;
    }

    @JSON
    @Override
    public long getUpdateAuthorId() {
        return _updateAuthorId;
    }

    @Override
    public void setUpdateAuthorId(long updateAuthorId) {
        _updateAuthorId = updateAuthorId;
    }

    @JSON
    @Override
    public String getUpdateType() {
        if (_updateType == null) {
            return StringPool.BLANK;
        } else {
            return _updateType;
        }
    }

    @Override
    public void setUpdateType(String updateType) {
        _updateType = updateType;
    }

    @JSON
    @Override
    public long getVersion() {
        return _version;
    }

    @Override
    public void setVersion(long version) {
        _version = version;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            PlanItem.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public PlanItem toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (PlanItem) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        PlanItemImpl planItemImpl = new PlanItemImpl();

        planItemImpl.setId(getId());
        planItemImpl.setPlanId(getPlanId());
        planItemImpl.setState(getState());
        planItemImpl.setUpdated(getUpdated());
        planItemImpl.setUpdateAuthorId(getUpdateAuthorId());
        planItemImpl.setUpdateType(getUpdateType());
        planItemImpl.setVersion(getVersion());

        planItemImpl.resetOriginalValues();

        return planItemImpl;
    }

    @Override
    public int compareTo(PlanItem planItem) {
        int value = 0;

        if (getId() < planItem.getId()) {
            value = -1;
        } else if (getId() > planItem.getId()) {
            value = 1;
        } else {
            value = 0;
        }

        value = value * -1;

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof PlanItem)) {
            return false;
        }

        PlanItem planItem = (PlanItem) obj;

        long primaryKey = planItem.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        PlanItemModelImpl planItemModelImpl = this;

        planItemModelImpl._originalPlanId = planItemModelImpl._planId;

        planItemModelImpl._setOriginalPlanId = false;

        planItemModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<PlanItem> toCacheModel() {
        PlanItemCacheModel planItemCacheModel = new PlanItemCacheModel();

        planItemCacheModel.id = getId();

        planItemCacheModel.planId = getPlanId();

        planItemCacheModel.state = getState();

        String state = planItemCacheModel.state;

        if ((state != null) && (state.length() == 0)) {
            planItemCacheModel.state = null;
        }

        Date updated = getUpdated();

        if (updated != null) {
            planItemCacheModel.updated = updated.getTime();
        } else {
            planItemCacheModel.updated = Long.MIN_VALUE;
        }

        planItemCacheModel.updateAuthorId = getUpdateAuthorId();

        planItemCacheModel.updateType = getUpdateType();

        String updateType = planItemCacheModel.updateType;

        if ((updateType != null) && (updateType.length() == 0)) {
            planItemCacheModel.updateType = null;
        }

        planItemCacheModel.version = getVersion();

        return planItemCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(15);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", planId=");
        sb.append(getPlanId());
        sb.append(", state=");
        sb.append(getState());
        sb.append(", updated=");
        sb.append(getUpdated());
        sb.append(", updateAuthorId=");
        sb.append(getUpdateAuthorId());
        sb.append(", updateType=");
        sb.append(getUpdateType());
        sb.append(", version=");
        sb.append(getVersion());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(25);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.PlanItem");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>planId</column-name><column-value><![CDATA[");
        sb.append(getPlanId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>state</column-name><column-value><![CDATA[");
        sb.append(getState());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>updated</column-name><column-value><![CDATA[");
        sb.append(getUpdated());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>updateAuthorId</column-name><column-value><![CDATA[");
        sb.append(getUpdateAuthorId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>updateType</column-name><column-value><![CDATA[");
        sb.append(getUpdateType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>version</column-name><column-value><![CDATA[");
        sb.append(getVersion());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
