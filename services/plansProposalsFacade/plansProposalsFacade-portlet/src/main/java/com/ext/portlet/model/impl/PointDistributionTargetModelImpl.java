package com.ext.portlet.model.impl;

import com.ext.portlet.model.PointDistributionTarget;
import com.ext.portlet.model.PointDistributionTargetModel;
import com.ext.portlet.model.PointDistributionTargetSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the PointDistributionTarget service. Represents a row in the &quot;xcolab_PointDistributionTarget&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.PointDistributionTargetModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PointDistributionTargetImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PointDistributionTargetImpl
 * @see com.ext.portlet.model.PointDistributionTarget
 * @see com.ext.portlet.model.PointDistributionTargetModel
 * @generated
 */
@JSON(strict = true)
public class PointDistributionTargetModelImpl extends BaseModelImpl<PointDistributionTarget>
    implements PointDistributionTargetModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a point distribution target model instance should use the {@link com.ext.portlet.model.PointDistributionTarget} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_PointDistributionTarget";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "contestId", Types.BIGINT },
            { "proposalId", Types.BIGINT },
            { "numberOfPoints", Types.DOUBLE },
            { "pointTypeOverride", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_PointDistributionTarget (id_ LONG not null primary key,contestId LONG,proposalId LONG,numberOfPoints DOUBLE,pointTypeOverride LONG)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_PointDistributionTarget";
    public static final String ORDER_BY_JPQL = " ORDER BY pointDistributionTarget.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_PointDistributionTarget.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.PointDistributionTarget"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.PointDistributionTarget"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.model.PointDistributionTarget"),
            true);
    public static long CONTESTID_COLUMN_BITMASK = 1L;
    public static long PROPOSALID_COLUMN_BITMASK = 2L;
    public static long ID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.PointDistributionTarget"));
    private static ClassLoader _classLoader = PointDistributionTarget.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            PointDistributionTarget.class
        };
    private long _id;
    private long _contestId;
    private long _originalContestId;
    private boolean _setOriginalContestId;
    private long _proposalId;
    private long _originalProposalId;
    private boolean _setOriginalProposalId;
    private double _numberOfPoints;
    private long _pointTypeOverride;
    private long _columnBitmask;
    private PointDistributionTarget _escapedModel;

    public PointDistributionTargetModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static PointDistributionTarget toModel(
        PointDistributionTargetSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        PointDistributionTarget model = new PointDistributionTargetImpl();

        model.setId(soapModel.getId());
        model.setContestId(soapModel.getContestId());
        model.setProposalId(soapModel.getProposalId());
        model.setNumberOfPoints(soapModel.getNumberOfPoints());
        model.setPointTypeOverride(soapModel.getPointTypeOverride());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<PointDistributionTarget> toModels(
        PointDistributionTargetSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<PointDistributionTarget> models = new ArrayList<PointDistributionTarget>(soapModels.length);

        for (PointDistributionTargetSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return PointDistributionTarget.class;
    }

    @Override
    public String getModelClassName() {
        return PointDistributionTarget.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("contestId", getContestId());
        attributes.put("proposalId", getProposalId());
        attributes.put("numberOfPoints", getNumberOfPoints());
        attributes.put("pointTypeOverride", getPointTypeOverride());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        Long contestId = (Long) attributes.get("contestId");

        if (contestId != null) {
            setContestId(contestId);
        }

        Long proposalId = (Long) attributes.get("proposalId");

        if (proposalId != null) {
            setProposalId(proposalId);
        }

        Double numberOfPoints = (Double) attributes.get("numberOfPoints");

        if (numberOfPoints != null) {
            setNumberOfPoints(numberOfPoints);
        }

        Long pointTypeOverride = (Long) attributes.get("pointTypeOverride");

        if (pointTypeOverride != null) {
            setPointTypeOverride(pointTypeOverride);
        }
    }

    @JSON
    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @JSON
    @Override
    public long getContestId() {
        return _contestId;
    }

    @Override
    public void setContestId(long contestId) {
        _columnBitmask |= CONTESTID_COLUMN_BITMASK;

        if (!_setOriginalContestId) {
            _setOriginalContestId = true;

            _originalContestId = _contestId;
        }

        _contestId = contestId;
    }

    public long getOriginalContestId() {
        return _originalContestId;
    }

    @JSON
    @Override
    public long getProposalId() {
        return _proposalId;
    }

    @Override
    public void setProposalId(long proposalId) {
        _columnBitmask |= PROPOSALID_COLUMN_BITMASK;

        if (!_setOriginalProposalId) {
            _setOriginalProposalId = true;

            _originalProposalId = _proposalId;
        }

        _proposalId = proposalId;
    }

    public long getOriginalProposalId() {
        return _originalProposalId;
    }

    @JSON
    @Override
    public double getNumberOfPoints() {
        return _numberOfPoints;
    }

    @Override
    public void setNumberOfPoints(double numberOfPoints) {
        _numberOfPoints = numberOfPoints;
    }

    @JSON
    @Override
    public long getPointTypeOverride() {
        return _pointTypeOverride;
    }

    @Override
    public void setPointTypeOverride(long pointTypeOverride) {
        _pointTypeOverride = pointTypeOverride;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            PointDistributionTarget.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public PointDistributionTarget toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (PointDistributionTarget) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        PointDistributionTargetImpl pointDistributionTargetImpl = new PointDistributionTargetImpl();

        pointDistributionTargetImpl.setId(getId());
        pointDistributionTargetImpl.setContestId(getContestId());
        pointDistributionTargetImpl.setProposalId(getProposalId());
        pointDistributionTargetImpl.setNumberOfPoints(getNumberOfPoints());
        pointDistributionTargetImpl.setPointTypeOverride(getPointTypeOverride());

        pointDistributionTargetImpl.resetOriginalValues();

        return pointDistributionTargetImpl;
    }

    @Override
    public int compareTo(PointDistributionTarget pointDistributionTarget) {
        long primaryKey = pointDistributionTarget.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof PointDistributionTarget)) {
            return false;
        }

        PointDistributionTarget pointDistributionTarget = (PointDistributionTarget) obj;

        long primaryKey = pointDistributionTarget.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        PointDistributionTargetModelImpl pointDistributionTargetModelImpl = this;

        pointDistributionTargetModelImpl._originalContestId = pointDistributionTargetModelImpl._contestId;

        pointDistributionTargetModelImpl._setOriginalContestId = false;

        pointDistributionTargetModelImpl._originalProposalId = pointDistributionTargetModelImpl._proposalId;

        pointDistributionTargetModelImpl._setOriginalProposalId = false;

        pointDistributionTargetModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<PointDistributionTarget> toCacheModel() {
        PointDistributionTargetCacheModel pointDistributionTargetCacheModel = new PointDistributionTargetCacheModel();

        pointDistributionTargetCacheModel.id = getId();

        pointDistributionTargetCacheModel.contestId = getContestId();

        pointDistributionTargetCacheModel.proposalId = getProposalId();

        pointDistributionTargetCacheModel.numberOfPoints = getNumberOfPoints();

        pointDistributionTargetCacheModel.pointTypeOverride = getPointTypeOverride();

        return pointDistributionTargetCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", contestId=");
        sb.append(getContestId());
        sb.append(", proposalId=");
        sb.append(getProposalId());
        sb.append(", numberOfPoints=");
        sb.append(getNumberOfPoints());
        sb.append(", pointTypeOverride=");
        sb.append(getPointTypeOverride());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.PointDistributionTarget");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contestId</column-name><column-value><![CDATA[");
        sb.append(getContestId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>proposalId</column-name><column-value><![CDATA[");
        sb.append(getProposalId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>numberOfPoints</column-name><column-value><![CDATA[");
        sb.append(getNumberOfPoints());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>pointTypeOverride</column-name><column-value><![CDATA[");
        sb.append(getPointTypeOverride());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
