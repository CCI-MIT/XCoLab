package com.ext.portlet.model.impl;

import com.ext.portlet.model.ImpactDefaultSeriesData;
import com.ext.portlet.model.ImpactDefaultSeriesDataModel;
import com.ext.portlet.model.ImpactDefaultSeriesDataSoap;
import com.ext.portlet.service.persistence.ImpactDefaultSeriesDataPK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ImpactDefaultSeriesData service. Represents a row in the &quot;xcolab_ImpactDefaultSeriesData&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.ImpactDefaultSeriesDataModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ImpactDefaultSeriesDataImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ImpactDefaultSeriesDataImpl
 * @see com.ext.portlet.model.ImpactDefaultSeriesData
 * @see com.ext.portlet.model.ImpactDefaultSeriesDataModel
 * @generated
 */
@JSON(strict = true)
public class ImpactDefaultSeriesDataModelImpl extends BaseModelImpl<ImpactDefaultSeriesData>
    implements ImpactDefaultSeriesDataModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a impact default series data model instance should use the {@link com.ext.portlet.model.ImpactDefaultSeriesData} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_ImpactDefaultSeriesData";
    public static final Object[][] TABLE_COLUMNS = {
            { "seriesId", Types.BIGINT },
            { "year", Types.INTEGER },
            { "value", Types.DOUBLE }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_ImpactDefaultSeriesData (seriesId LONG not null,year INTEGER not null,value DOUBLE,primary key (seriesId, year))";
    public static final String TABLE_SQL_DROP = "drop table xcolab_ImpactDefaultSeriesData";
    public static final String ORDER_BY_JPQL = " ORDER BY impactDefaultSeriesData.id.seriesId ASC, impactDefaultSeriesData.id.year ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_ImpactDefaultSeriesData.seriesId ASC, xcolab_ImpactDefaultSeriesData.year ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.ImpactDefaultSeriesData"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.ImpactDefaultSeriesData"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.model.ImpactDefaultSeriesData"),
            true);
    public static long SERIESID_COLUMN_BITMASK = 1L;
    public static long YEAR_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.ImpactDefaultSeriesData"));
    private static ClassLoader _classLoader = ImpactDefaultSeriesData.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            ImpactDefaultSeriesData.class
        };
    private long _seriesId;
    private long _originalSeriesId;
    private boolean _setOriginalSeriesId;
    private int _year;
    private int _originalYear;
    private boolean _setOriginalYear;
    private double _value;
    private long _columnBitmask;
    private ImpactDefaultSeriesData _escapedModel;

    public ImpactDefaultSeriesDataModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static ImpactDefaultSeriesData toModel(
        ImpactDefaultSeriesDataSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        ImpactDefaultSeriesData model = new ImpactDefaultSeriesDataImpl();

        model.setSeriesId(soapModel.getSeriesId());
        model.setYear(soapModel.getYear());
        model.setValue(soapModel.getValue());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<ImpactDefaultSeriesData> toModels(
        ImpactDefaultSeriesDataSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<ImpactDefaultSeriesData> models = new ArrayList<ImpactDefaultSeriesData>(soapModels.length);

        for (ImpactDefaultSeriesDataSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public ImpactDefaultSeriesDataPK getPrimaryKey() {
        return new ImpactDefaultSeriesDataPK(_seriesId, _year);
    }

    @Override
    public void setPrimaryKey(ImpactDefaultSeriesDataPK primaryKey) {
        setSeriesId(primaryKey.seriesId);
        setYear(primaryKey.year);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new ImpactDefaultSeriesDataPK(_seriesId, _year);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((ImpactDefaultSeriesDataPK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return ImpactDefaultSeriesData.class;
    }

    @Override
    public String getModelClassName() {
        return ImpactDefaultSeriesData.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("seriesId", getSeriesId());
        attributes.put("year", getYear());
        attributes.put("value", getValue());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long seriesId = (Long) attributes.get("seriesId");

        if (seriesId != null) {
            setSeriesId(seriesId);
        }

        Integer year = (Integer) attributes.get("year");

        if (year != null) {
            setYear(year);
        }

        Double value = (Double) attributes.get("value");

        if (value != null) {
            setValue(value);
        }
    }

    @JSON
    @Override
    public long getSeriesId() {
        return _seriesId;
    }

    @Override
    public void setSeriesId(long seriesId) {
        _columnBitmask |= SERIESID_COLUMN_BITMASK;

        if (!_setOriginalSeriesId) {
            _setOriginalSeriesId = true;

            _originalSeriesId = _seriesId;
        }

        _seriesId = seriesId;
    }

    public long getOriginalSeriesId() {
        return _originalSeriesId;
    }

    @JSON
    @Override
    public int getYear() {
        return _year;
    }

    @Override
    public void setYear(int year) {
        _columnBitmask |= YEAR_COLUMN_BITMASK;

        if (!_setOriginalYear) {
            _setOriginalYear = true;

            _originalYear = _year;
        }

        _year = year;
    }

    public int getOriginalYear() {
        return _originalYear;
    }

    @JSON
    @Override
    public double getValue() {
        return _value;
    }

    @Override
    public void setValue(double value) {
        _value = value;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ImpactDefaultSeriesData toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (ImpactDefaultSeriesData) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ImpactDefaultSeriesDataImpl impactDefaultSeriesDataImpl = new ImpactDefaultSeriesDataImpl();

        impactDefaultSeriesDataImpl.setSeriesId(getSeriesId());
        impactDefaultSeriesDataImpl.setYear(getYear());
        impactDefaultSeriesDataImpl.setValue(getValue());

        impactDefaultSeriesDataImpl.resetOriginalValues();

        return impactDefaultSeriesDataImpl;
    }

    @Override
    public int compareTo(ImpactDefaultSeriesData impactDefaultSeriesData) {
        ImpactDefaultSeriesDataPK primaryKey = impactDefaultSeriesData.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ImpactDefaultSeriesData)) {
            return false;
        }

        ImpactDefaultSeriesData impactDefaultSeriesData = (ImpactDefaultSeriesData) obj;

        ImpactDefaultSeriesDataPK primaryKey = impactDefaultSeriesData.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        ImpactDefaultSeriesDataModelImpl impactDefaultSeriesDataModelImpl = this;

        impactDefaultSeriesDataModelImpl._originalSeriesId = impactDefaultSeriesDataModelImpl._seriesId;

        impactDefaultSeriesDataModelImpl._setOriginalSeriesId = false;

        impactDefaultSeriesDataModelImpl._originalYear = impactDefaultSeriesDataModelImpl._year;

        impactDefaultSeriesDataModelImpl._setOriginalYear = false;

        impactDefaultSeriesDataModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<ImpactDefaultSeriesData> toCacheModel() {
        ImpactDefaultSeriesDataCacheModel impactDefaultSeriesDataCacheModel = new ImpactDefaultSeriesDataCacheModel();

        impactDefaultSeriesDataCacheModel.seriesId = getSeriesId();

        impactDefaultSeriesDataCacheModel.year = getYear();

        impactDefaultSeriesDataCacheModel.value = getValue();

        return impactDefaultSeriesDataCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{seriesId=");
        sb.append(getSeriesId());
        sb.append(", year=");
        sb.append(getYear());
        sb.append(", value=");
        sb.append(getValue());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.ImpactDefaultSeriesData");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>seriesId</column-name><column-value><![CDATA[");
        sb.append(getSeriesId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>year</column-name><column-value><![CDATA[");
        sb.append(getYear());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>value</column-name><column-value><![CDATA[");
        sb.append(getValue());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
