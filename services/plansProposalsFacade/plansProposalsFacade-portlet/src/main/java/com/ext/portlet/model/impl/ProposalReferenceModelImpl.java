package com.ext.portlet.model.impl;

import com.ext.portlet.model.ProposalReference;
import com.ext.portlet.model.ProposalReferenceModel;
import com.ext.portlet.model.ProposalReferenceSoap;
import com.ext.portlet.service.persistence.ProposalReferencePK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ProposalReference service. Represents a row in the &quot;xcolab_ProposalReference&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.ProposalReferenceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProposalReferenceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProposalReferenceImpl
 * @see com.ext.portlet.model.ProposalReference
 * @see com.ext.portlet.model.ProposalReferenceModel
 * @generated
 */
@JSON(strict = true)
public class ProposalReferenceModelImpl extends BaseModelImpl<ProposalReference>
    implements ProposalReferenceModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a proposal reference model instance should use the {@link com.ext.portlet.model.ProposalReference} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_ProposalReference";
    public static final Object[][] TABLE_COLUMNS = {
            { "proposalId", Types.BIGINT },
            { "subProposalId", Types.BIGINT },
            { "sectionAttributeId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_ProposalReference (proposalId LONG not null,subProposalId LONG not null,sectionAttributeId LONG,primary key (proposalId, subProposalId))";
    public static final String TABLE_SQL_DROP = "drop table xcolab_ProposalReference";
    public static final String ORDER_BY_JPQL = " ORDER BY proposalReference.id.proposalId ASC, proposalReference.id.subProposalId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_ProposalReference.proposalId ASC, xcolab_ProposalReference.subProposalId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.ProposalReference"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.ProposalReference"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.model.ProposalReference"),
            true);
    public static long PROPOSALID_COLUMN_BITMASK = 1L;
    public static long SUBPROPOSALID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.ProposalReference"));
    private static ClassLoader _classLoader = ProposalReference.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            ProposalReference.class
        };
    private long _proposalId;
    private long _originalProposalId;
    private boolean _setOriginalProposalId;
    private long _subProposalId;
    private long _originalSubProposalId;
    private boolean _setOriginalSubProposalId;
    private long _sectionAttributeId;
    private long _columnBitmask;
    private ProposalReference _escapedModel;

    public ProposalReferenceModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static ProposalReference toModel(ProposalReferenceSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        ProposalReference model = new ProposalReferenceImpl();

        model.setProposalId(soapModel.getProposalId());
        model.setSubProposalId(soapModel.getSubProposalId());
        model.setSectionAttributeId(soapModel.getSectionAttributeId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<ProposalReference> toModels(
        ProposalReferenceSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<ProposalReference> models = new ArrayList<ProposalReference>(soapModels.length);

        for (ProposalReferenceSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public ProposalReferencePK getPrimaryKey() {
        return new ProposalReferencePK(_proposalId, _subProposalId);
    }

    @Override
    public void setPrimaryKey(ProposalReferencePK primaryKey) {
        setProposalId(primaryKey.proposalId);
        setSubProposalId(primaryKey.subProposalId);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new ProposalReferencePK(_proposalId, _subProposalId);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((ProposalReferencePK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return ProposalReference.class;
    }

    @Override
    public String getModelClassName() {
        return ProposalReference.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("proposalId", getProposalId());
        attributes.put("subProposalId", getSubProposalId());
        attributes.put("sectionAttributeId", getSectionAttributeId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long proposalId = (Long) attributes.get("proposalId");

        if (proposalId != null) {
            setProposalId(proposalId);
        }

        Long subProposalId = (Long) attributes.get("subProposalId");

        if (subProposalId != null) {
            setSubProposalId(subProposalId);
        }

        Long sectionAttributeId = (Long) attributes.get("sectionAttributeId");

        if (sectionAttributeId != null) {
            setSectionAttributeId(sectionAttributeId);
        }
    }

    @JSON
    @Override
    public long getProposalId() {
        return _proposalId;
    }

    @Override
    public void setProposalId(long proposalId) {
        _columnBitmask |= PROPOSALID_COLUMN_BITMASK;

        if (!_setOriginalProposalId) {
            _setOriginalProposalId = true;

            _originalProposalId = _proposalId;
        }

        _proposalId = proposalId;
    }

    public long getOriginalProposalId() {
        return _originalProposalId;
    }

    @JSON
    @Override
    public long getSubProposalId() {
        return _subProposalId;
    }

    @Override
    public void setSubProposalId(long subProposalId) {
        _columnBitmask |= SUBPROPOSALID_COLUMN_BITMASK;

        if (!_setOriginalSubProposalId) {
            _setOriginalSubProposalId = true;

            _originalSubProposalId = _subProposalId;
        }

        _subProposalId = subProposalId;
    }

    public long getOriginalSubProposalId() {
        return _originalSubProposalId;
    }

    @JSON
    @Override
    public long getSectionAttributeId() {
        return _sectionAttributeId;
    }

    @Override
    public void setSectionAttributeId(long sectionAttributeId) {
        _sectionAttributeId = sectionAttributeId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ProposalReference toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (ProposalReference) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ProposalReferenceImpl proposalReferenceImpl = new ProposalReferenceImpl();

        proposalReferenceImpl.setProposalId(getProposalId());
        proposalReferenceImpl.setSubProposalId(getSubProposalId());
        proposalReferenceImpl.setSectionAttributeId(getSectionAttributeId());

        proposalReferenceImpl.resetOriginalValues();

        return proposalReferenceImpl;
    }

    @Override
    public int compareTo(ProposalReference proposalReference) {
        ProposalReferencePK primaryKey = proposalReference.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ProposalReference)) {
            return false;
        }

        ProposalReference proposalReference = (ProposalReference) obj;

        ProposalReferencePK primaryKey = proposalReference.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        ProposalReferenceModelImpl proposalReferenceModelImpl = this;

        proposalReferenceModelImpl._originalProposalId = proposalReferenceModelImpl._proposalId;

        proposalReferenceModelImpl._setOriginalProposalId = false;

        proposalReferenceModelImpl._originalSubProposalId = proposalReferenceModelImpl._subProposalId;

        proposalReferenceModelImpl._setOriginalSubProposalId = false;

        proposalReferenceModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<ProposalReference> toCacheModel() {
        ProposalReferenceCacheModel proposalReferenceCacheModel = new ProposalReferenceCacheModel();

        proposalReferenceCacheModel.proposalId = getProposalId();

        proposalReferenceCacheModel.subProposalId = getSubProposalId();

        proposalReferenceCacheModel.sectionAttributeId = getSectionAttributeId();

        return proposalReferenceCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{proposalId=");
        sb.append(getProposalId());
        sb.append(", subProposalId=");
        sb.append(getSubProposalId());
        sb.append(", sectionAttributeId=");
        sb.append(getSectionAttributeId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.ProposalReference");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>proposalId</column-name><column-value><![CDATA[");
        sb.append(getProposalId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>subProposalId</column-name><column-value><![CDATA[");
        sb.append(getSubProposalId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sectionAttributeId</column-name><column-value><![CDATA[");
        sb.append(getSectionAttributeId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
