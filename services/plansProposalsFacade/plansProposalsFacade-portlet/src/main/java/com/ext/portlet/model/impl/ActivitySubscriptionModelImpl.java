package com.ext.portlet.model.impl;

import com.ext.portlet.model.ActivitySubscription;
import com.ext.portlet.model.ActivitySubscriptionModel;
import com.ext.portlet.model.ActivitySubscriptionSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ActivitySubscription service. Represents a row in the &quot;xcolab_ActivitySubscription&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.ActivitySubscriptionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ActivitySubscriptionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ActivitySubscriptionImpl
 * @see com.ext.portlet.model.ActivitySubscription
 * @see com.ext.portlet.model.ActivitySubscriptionModel
 * @generated
 */
@JSON(strict = true)
public class ActivitySubscriptionModelImpl extends BaseModelImpl<ActivitySubscription>
    implements ActivitySubscriptionModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a activity subscription model instance should use the {@link com.ext.portlet.model.ActivitySubscription} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_ActivitySubscription";
    public static final Object[][] TABLE_COLUMNS = {
            { "pk", Types.BIGINT },
            { "classNameId", Types.BIGINT },
            { "classPK", Types.BIGINT },
            { "type_", Types.INTEGER },
            { "automaticSubscriptionCounter", Types.INTEGER },
            { "extraData", Types.VARCHAR },
            { "receiverId", Types.BIGINT },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_ActivitySubscription (pk LONG not null primary key,classNameId LONG,classPK LONG,type_ INTEGER,automaticSubscriptionCounter INTEGER,extraData VARCHAR(256) null,receiverId LONG,createDate DATE null,modifiedDate DATE null)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_ActivitySubscription";
    public static final String ORDER_BY_JPQL = " ORDER BY activitySubscription.pk ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_ActivitySubscription.pk ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.ActivitySubscription"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.ActivitySubscription"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.model.ActivitySubscription"),
            true);
    public static long CLASSNAMEID_COLUMN_BITMASK = 1L;
    public static long CLASSPK_COLUMN_BITMASK = 2L;
    public static long EXTRADATA_COLUMN_BITMASK = 4L;
    public static long RECEIVERID_COLUMN_BITMASK = 8L;
    public static long TYPE_COLUMN_BITMASK = 16L;
    public static long PK_COLUMN_BITMASK = 32L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.ActivitySubscription"));
    private static ClassLoader _classLoader = ActivitySubscription.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            ActivitySubscription.class
        };
    private long _pk;
    private long _classNameId;
    private long _originalClassNameId;
    private boolean _setOriginalClassNameId;
    private long _classPK;
    private long _originalClassPK;
    private boolean _setOriginalClassPK;
    private int _type;
    private int _originalType;
    private boolean _setOriginalType;
    private int _automaticSubscriptionCounter;
    private String _extraData;
    private String _originalExtraData;
    private long _receiverId;
    private long _originalReceiverId;
    private boolean _setOriginalReceiverId;
    private Date _createDate;
    private Date _modifiedDate;
    private long _columnBitmask;
    private ActivitySubscription _escapedModel;

    public ActivitySubscriptionModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static ActivitySubscription toModel(
        ActivitySubscriptionSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        ActivitySubscription model = new ActivitySubscriptionImpl();

        model.setPk(soapModel.getPk());
        model.setClassNameId(soapModel.getClassNameId());
        model.setClassPK(soapModel.getClassPK());
        model.setType(soapModel.getType());
        model.setAutomaticSubscriptionCounter(soapModel.getAutomaticSubscriptionCounter());
        model.setExtraData(soapModel.getExtraData());
        model.setReceiverId(soapModel.getReceiverId());
        model.setCreateDate(soapModel.getCreateDate());
        model.setModifiedDate(soapModel.getModifiedDate());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<ActivitySubscription> toModels(
        ActivitySubscriptionSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<ActivitySubscription> models = new ArrayList<ActivitySubscription>(soapModels.length);

        for (ActivitySubscriptionSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _pk;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setPk(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _pk;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return ActivitySubscription.class;
    }

    @Override
    public String getModelClassName() {
        return ActivitySubscription.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("pk", getPk());
        attributes.put("classNameId", getClassNameId());
        attributes.put("classPK", getClassPK());
        attributes.put("type", getType());
        attributes.put("automaticSubscriptionCounter",
            getAutomaticSubscriptionCounter());
        attributes.put("extraData", getExtraData());
        attributes.put("receiverId", getReceiverId());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long pk = (Long) attributes.get("pk");

        if (pk != null) {
            setPk(pk);
        }

        Long classNameId = (Long) attributes.get("classNameId");

        if (classNameId != null) {
            setClassNameId(classNameId);
        }

        Long classPK = (Long) attributes.get("classPK");

        if (classPK != null) {
            setClassPK(classPK);
        }

        Integer type = (Integer) attributes.get("type");

        if (type != null) {
            setType(type);
        }

        Integer automaticSubscriptionCounter = (Integer) attributes.get(
                "automaticSubscriptionCounter");

        if (automaticSubscriptionCounter != null) {
            setAutomaticSubscriptionCounter(automaticSubscriptionCounter);
        }

        String extraData = (String) attributes.get("extraData");

        if (extraData != null) {
            setExtraData(extraData);
        }

        Long receiverId = (Long) attributes.get("receiverId");

        if (receiverId != null) {
            setReceiverId(receiverId);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }
    }

    @JSON
    @Override
    public long getPk() {
        return _pk;
    }

    @Override
    public void setPk(long pk) {
        _pk = pk;
    }

    @Override
    public String getClassName() {
        if (getClassNameId() <= 0) {
            return StringPool.BLANK;
        }

        return PortalUtil.getClassName(getClassNameId());
    }

    @Override
    public void setClassName(String className) {
        long classNameId = 0;

        if (Validator.isNotNull(className)) {
            classNameId = PortalUtil.getClassNameId(className);
        }

        setClassNameId(classNameId);
    }

    @JSON
    @Override
    public long getClassNameId() {
        return _classNameId;
    }

    @Override
    public void setClassNameId(long classNameId) {
        _columnBitmask |= CLASSNAMEID_COLUMN_BITMASK;

        if (!_setOriginalClassNameId) {
            _setOriginalClassNameId = true;

            _originalClassNameId = _classNameId;
        }

        _classNameId = classNameId;
    }

    public long getOriginalClassNameId() {
        return _originalClassNameId;
    }

    @JSON
    @Override
    public long getClassPK() {
        return _classPK;
    }

    @Override
    public void setClassPK(long classPK) {
        _columnBitmask |= CLASSPK_COLUMN_BITMASK;

        if (!_setOriginalClassPK) {
            _setOriginalClassPK = true;

            _originalClassPK = _classPK;
        }

        _classPK = classPK;
    }

    public long getOriginalClassPK() {
        return _originalClassPK;
    }

    @JSON
    @Override
    public int getType() {
        return _type;
    }

    @Override
    public void setType(int type) {
        _columnBitmask |= TYPE_COLUMN_BITMASK;

        if (!_setOriginalType) {
            _setOriginalType = true;

            _originalType = _type;
        }

        _type = type;
    }

    public int getOriginalType() {
        return _originalType;
    }

    @JSON
    @Override
    public int getAutomaticSubscriptionCounter() {
        return _automaticSubscriptionCounter;
    }

    @Override
    public void setAutomaticSubscriptionCounter(
        int automaticSubscriptionCounter) {
        _automaticSubscriptionCounter = automaticSubscriptionCounter;
    }

    @JSON
    @Override
    public String getExtraData() {
        if (_extraData == null) {
            return StringPool.BLANK;
        } else {
            return _extraData;
        }
    }

    @Override
    public void setExtraData(String extraData) {
        _columnBitmask |= EXTRADATA_COLUMN_BITMASK;

        if (_originalExtraData == null) {
            _originalExtraData = _extraData;
        }

        _extraData = extraData;
    }

    public String getOriginalExtraData() {
        return GetterUtil.getString(_originalExtraData);
    }

    @JSON
    @Override
    public long getReceiverId() {
        return _receiverId;
    }

    @Override
    public void setReceiverId(long receiverId) {
        _columnBitmask |= RECEIVERID_COLUMN_BITMASK;

        if (!_setOriginalReceiverId) {
            _setOriginalReceiverId = true;

            _originalReceiverId = _receiverId;
        }

        _receiverId = receiverId;
    }

    public long getOriginalReceiverId() {
        return _originalReceiverId;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            ActivitySubscription.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public ActivitySubscription toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (ActivitySubscription) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ActivitySubscriptionImpl activitySubscriptionImpl = new ActivitySubscriptionImpl();

        activitySubscriptionImpl.setPk(getPk());
        activitySubscriptionImpl.setClassNameId(getClassNameId());
        activitySubscriptionImpl.setClassPK(getClassPK());
        activitySubscriptionImpl.setType(getType());
        activitySubscriptionImpl.setAutomaticSubscriptionCounter(getAutomaticSubscriptionCounter());
        activitySubscriptionImpl.setExtraData(getExtraData());
        activitySubscriptionImpl.setReceiverId(getReceiverId());
        activitySubscriptionImpl.setCreateDate(getCreateDate());
        activitySubscriptionImpl.setModifiedDate(getModifiedDate());

        activitySubscriptionImpl.resetOriginalValues();

        return activitySubscriptionImpl;
    }

    @Override
    public int compareTo(ActivitySubscription activitySubscription) {
        long primaryKey = activitySubscription.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ActivitySubscription)) {
            return false;
        }

        ActivitySubscription activitySubscription = (ActivitySubscription) obj;

        long primaryKey = activitySubscription.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        ActivitySubscriptionModelImpl activitySubscriptionModelImpl = this;

        activitySubscriptionModelImpl._originalClassNameId = activitySubscriptionModelImpl._classNameId;

        activitySubscriptionModelImpl._setOriginalClassNameId = false;

        activitySubscriptionModelImpl._originalClassPK = activitySubscriptionModelImpl._classPK;

        activitySubscriptionModelImpl._setOriginalClassPK = false;

        activitySubscriptionModelImpl._originalType = activitySubscriptionModelImpl._type;

        activitySubscriptionModelImpl._setOriginalType = false;

        activitySubscriptionModelImpl._originalExtraData = activitySubscriptionModelImpl._extraData;

        activitySubscriptionModelImpl._originalReceiverId = activitySubscriptionModelImpl._receiverId;

        activitySubscriptionModelImpl._setOriginalReceiverId = false;

        activitySubscriptionModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<ActivitySubscription> toCacheModel() {
        ActivitySubscriptionCacheModel activitySubscriptionCacheModel = new ActivitySubscriptionCacheModel();

        activitySubscriptionCacheModel.pk = getPk();

        activitySubscriptionCacheModel.classNameId = getClassNameId();

        activitySubscriptionCacheModel.classPK = getClassPK();

        activitySubscriptionCacheModel.type = getType();

        activitySubscriptionCacheModel.automaticSubscriptionCounter = getAutomaticSubscriptionCounter();

        activitySubscriptionCacheModel.extraData = getExtraData();

        String extraData = activitySubscriptionCacheModel.extraData;

        if ((extraData != null) && (extraData.length() == 0)) {
            activitySubscriptionCacheModel.extraData = null;
        }

        activitySubscriptionCacheModel.receiverId = getReceiverId();

        Date createDate = getCreateDate();

        if (createDate != null) {
            activitySubscriptionCacheModel.createDate = createDate.getTime();
        } else {
            activitySubscriptionCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            activitySubscriptionCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            activitySubscriptionCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        return activitySubscriptionCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(19);

        sb.append("{pk=");
        sb.append(getPk());
        sb.append(", classNameId=");
        sb.append(getClassNameId());
        sb.append(", classPK=");
        sb.append(getClassPK());
        sb.append(", type=");
        sb.append(getType());
        sb.append(", automaticSubscriptionCounter=");
        sb.append(getAutomaticSubscriptionCounter());
        sb.append(", extraData=");
        sb.append(getExtraData());
        sb.append(", receiverId=");
        sb.append(getReceiverId());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(31);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.ActivitySubscription");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>pk</column-name><column-value><![CDATA[");
        sb.append(getPk());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>classNameId</column-name><column-value><![CDATA[");
        sb.append(getClassNameId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>classPK</column-name><column-value><![CDATA[");
        sb.append(getClassPK());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>type</column-name><column-value><![CDATA[");
        sb.append(getType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>automaticSubscriptionCounter</column-name><column-value><![CDATA[");
        sb.append(getAutomaticSubscriptionCounter());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>extraData</column-name><column-value><![CDATA[");
        sb.append(getExtraData());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>receiverId</column-name><column-value><![CDATA[");
        sb.append(getReceiverId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
