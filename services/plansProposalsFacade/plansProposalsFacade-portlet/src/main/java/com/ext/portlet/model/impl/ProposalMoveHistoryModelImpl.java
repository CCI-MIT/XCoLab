package com.ext.portlet.model.impl;

import com.ext.portlet.model.ProposalMoveHistory;
import com.ext.portlet.model.ProposalMoveHistoryModel;
import com.ext.portlet.model.ProposalMoveHistorySoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ProposalMoveHistory service. Represents a row in the &quot;xcolab_ProposalMoveHistory&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.ProposalMoveHistoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProposalMoveHistoryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProposalMoveHistoryImpl
 * @see com.ext.portlet.model.ProposalMoveHistory
 * @see com.ext.portlet.model.ProposalMoveHistoryModel
 * @generated
 */
@JSON(strict = true)
public class ProposalMoveHistoryModelImpl extends BaseModelImpl<ProposalMoveHistory>
    implements ProposalMoveHistoryModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a proposal move history model instance should use the {@link com.ext.portlet.model.ProposalMoveHistory} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_ProposalMoveHistory";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "sourceProposalId", Types.BIGINT },
            { "sourceContestId", Types.BIGINT },
            { "sourcePhaseId", Types.BIGINT },
            { "targetProposalId", Types.BIGINT },
            { "targetContestId", Types.BIGINT },
            { "targetPhaseId", Types.BIGINT },
            { "movingUserId", Types.BIGINT },
            { "moveDate", Types.TIMESTAMP },
            { "moveType", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_ProposalMoveHistory (id_ LONG not null primary key,sourceProposalId LONG,sourceContestId LONG,sourcePhaseId LONG,targetProposalId LONG,targetContestId LONG,targetPhaseId LONG,movingUserId LONG,moveDate DATE null,moveType VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_ProposalMoveHistory";
    public static final String ORDER_BY_JPQL = " ORDER BY proposalMoveHistory.id_ ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_ProposalMoveHistory.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.ProposalMoveHistory"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.ProposalMoveHistory"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.model.ProposalMoveHistory"),
            true);
    public static long SOURCECONTESTID_COLUMN_BITMASK = 1L;
    public static long SOURCEPHASEID_COLUMN_BITMASK = 2L;
    public static long SOURCEPROPOSALID_COLUMN_BITMASK = 4L;
    public static long TARGETCONTESTID_COLUMN_BITMASK = 8L;
    public static long TARGETPHASEID_COLUMN_BITMASK = 16L;
    public static long TARGETPROPOSALID_COLUMN_BITMASK = 32L;
    public static long ID__COLUMN_BITMASK = 64L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.ProposalMoveHistory"));
    private static ClassLoader _classLoader = ProposalMoveHistory.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            ProposalMoveHistory.class
        };
    private long _id_;
    private long _sourceProposalId;
    private long _originalSourceProposalId;
    private boolean _setOriginalSourceProposalId;
    private long _sourceContestId;
    private long _originalSourceContestId;
    private boolean _setOriginalSourceContestId;
    private long _sourcePhaseId;
    private long _originalSourcePhaseId;
    private boolean _setOriginalSourcePhaseId;
    private long _targetProposalId;
    private long _originalTargetProposalId;
    private boolean _setOriginalTargetProposalId;
    private long _targetContestId;
    private long _originalTargetContestId;
    private boolean _setOriginalTargetContestId;
    private long _targetPhaseId;
    private long _originalTargetPhaseId;
    private boolean _setOriginalTargetPhaseId;
    private long _movingUserId;
    private String _movingUserUuid;
    private Date _moveDate;
    private String _moveType;
    private long _columnBitmask;
    private ProposalMoveHistory _escapedModel;

    public ProposalMoveHistoryModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static ProposalMoveHistory toModel(ProposalMoveHistorySoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        ProposalMoveHistory model = new ProposalMoveHistoryImpl();

        model.setId_(soapModel.getId_());
        model.setSourceProposalId(soapModel.getSourceProposalId());
        model.setSourceContestId(soapModel.getSourceContestId());
        model.setSourcePhaseId(soapModel.getSourcePhaseId());
        model.setTargetProposalId(soapModel.getTargetProposalId());
        model.setTargetContestId(soapModel.getTargetContestId());
        model.setTargetPhaseId(soapModel.getTargetPhaseId());
        model.setMovingUserId(soapModel.getMovingUserId());
        model.setMoveDate(soapModel.getMoveDate());
        model.setMoveType(soapModel.getMoveType());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<ProposalMoveHistory> toModels(
        ProposalMoveHistorySoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<ProposalMoveHistory> models = new ArrayList<ProposalMoveHistory>(soapModels.length);

        for (ProposalMoveHistorySoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _id_;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId_(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id_;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return ProposalMoveHistory.class;
    }

    @Override
    public String getModelClassName() {
        return ProposalMoveHistory.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id_", getId_());
        attributes.put("sourceProposalId", getSourceProposalId());
        attributes.put("sourceContestId", getSourceContestId());
        attributes.put("sourcePhaseId", getSourcePhaseId());
        attributes.put("targetProposalId", getTargetProposalId());
        attributes.put("targetContestId", getTargetContestId());
        attributes.put("targetPhaseId", getTargetPhaseId());
        attributes.put("movingUserId", getMovingUserId());
        attributes.put("moveDate", getMoveDate());
        attributes.put("moveType", getMoveType());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id_ = (Long) attributes.get("id_");

        if (id_ != null) {
            setId_(id_);
        }

        Long sourceProposalId = (Long) attributes.get("sourceProposalId");

        if (sourceProposalId != null) {
            setSourceProposalId(sourceProposalId);
        }

        Long sourceContestId = (Long) attributes.get("sourceContestId");

        if (sourceContestId != null) {
            setSourceContestId(sourceContestId);
        }

        Long sourcePhaseId = (Long) attributes.get("sourcePhaseId");

        if (sourcePhaseId != null) {
            setSourcePhaseId(sourcePhaseId);
        }

        Long targetProposalId = (Long) attributes.get("targetProposalId");

        if (targetProposalId != null) {
            setTargetProposalId(targetProposalId);
        }

        Long targetContestId = (Long) attributes.get("targetContestId");

        if (targetContestId != null) {
            setTargetContestId(targetContestId);
        }

        Long targetPhaseId = (Long) attributes.get("targetPhaseId");

        if (targetPhaseId != null) {
            setTargetPhaseId(targetPhaseId);
        }

        Long movingUserId = (Long) attributes.get("movingUserId");

        if (movingUserId != null) {
            setMovingUserId(movingUserId);
        }

        Date moveDate = (Date) attributes.get("moveDate");

        if (moveDate != null) {
            setMoveDate(moveDate);
        }

        String moveType = (String) attributes.get("moveType");

        if (moveType != null) {
            setMoveType(moveType);
        }
    }

    @JSON
    @Override
    public long getId_() {
        return _id_;
    }

    @Override
    public void setId_(long id_) {
        _id_ = id_;
    }

    @JSON
    @Override
    public long getSourceProposalId() {
        return _sourceProposalId;
    }

    @Override
    public void setSourceProposalId(long sourceProposalId) {
        _columnBitmask |= SOURCEPROPOSALID_COLUMN_BITMASK;

        if (!_setOriginalSourceProposalId) {
            _setOriginalSourceProposalId = true;

            _originalSourceProposalId = _sourceProposalId;
        }

        _sourceProposalId = sourceProposalId;
    }

    public long getOriginalSourceProposalId() {
        return _originalSourceProposalId;
    }

    @JSON
    @Override
    public long getSourceContestId() {
        return _sourceContestId;
    }

    @Override
    public void setSourceContestId(long sourceContestId) {
        _columnBitmask |= SOURCECONTESTID_COLUMN_BITMASK;

        if (!_setOriginalSourceContestId) {
            _setOriginalSourceContestId = true;

            _originalSourceContestId = _sourceContestId;
        }

        _sourceContestId = sourceContestId;
    }

    public long getOriginalSourceContestId() {
        return _originalSourceContestId;
    }

    @JSON
    @Override
    public long getSourcePhaseId() {
        return _sourcePhaseId;
    }

    @Override
    public void setSourcePhaseId(long sourcePhaseId) {
        _columnBitmask |= SOURCEPHASEID_COLUMN_BITMASK;

        if (!_setOriginalSourcePhaseId) {
            _setOriginalSourcePhaseId = true;

            _originalSourcePhaseId = _sourcePhaseId;
        }

        _sourcePhaseId = sourcePhaseId;
    }

    public long getOriginalSourcePhaseId() {
        return _originalSourcePhaseId;
    }

    @JSON
    @Override
    public long getTargetProposalId() {
        return _targetProposalId;
    }

    @Override
    public void setTargetProposalId(long targetProposalId) {
        _columnBitmask |= TARGETPROPOSALID_COLUMN_BITMASK;

        if (!_setOriginalTargetProposalId) {
            _setOriginalTargetProposalId = true;

            _originalTargetProposalId = _targetProposalId;
        }

        _targetProposalId = targetProposalId;
    }

    public long getOriginalTargetProposalId() {
        return _originalTargetProposalId;
    }

    @JSON
    @Override
    public long getTargetContestId() {
        return _targetContestId;
    }

    @Override
    public void setTargetContestId(long targetContestId) {
        _columnBitmask |= TARGETCONTESTID_COLUMN_BITMASK;

        if (!_setOriginalTargetContestId) {
            _setOriginalTargetContestId = true;

            _originalTargetContestId = _targetContestId;
        }

        _targetContestId = targetContestId;
    }

    public long getOriginalTargetContestId() {
        return _originalTargetContestId;
    }

    @JSON
    @Override
    public long getTargetPhaseId() {
        return _targetPhaseId;
    }

    @Override
    public void setTargetPhaseId(long targetPhaseId) {
        _columnBitmask |= TARGETPHASEID_COLUMN_BITMASK;

        if (!_setOriginalTargetPhaseId) {
            _setOriginalTargetPhaseId = true;

            _originalTargetPhaseId = _targetPhaseId;
        }

        _targetPhaseId = targetPhaseId;
    }

    public long getOriginalTargetPhaseId() {
        return _originalTargetPhaseId;
    }

    @JSON
    @Override
    public long getMovingUserId() {
        return _movingUserId;
    }

    @Override
    public void setMovingUserId(long movingUserId) {
        _movingUserId = movingUserId;
    }

    @Override
    public String getMovingUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getMovingUserId(), "uuid",
            _movingUserUuid);
    }

    @Override
    public void setMovingUserUuid(String movingUserUuid) {
        _movingUserUuid = movingUserUuid;
    }

    @JSON
    @Override
    public Date getMoveDate() {
        return _moveDate;
    }

    @Override
    public void setMoveDate(Date moveDate) {
        _moveDate = moveDate;
    }

    @JSON
    @Override
    public String getMoveType() {
        if (_moveType == null) {
            return StringPool.BLANK;
        } else {
            return _moveType;
        }
    }

    @Override
    public void setMoveType(String moveType) {
        _moveType = moveType;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            ProposalMoveHistory.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public ProposalMoveHistory toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (ProposalMoveHistory) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ProposalMoveHistoryImpl proposalMoveHistoryImpl = new ProposalMoveHistoryImpl();

        proposalMoveHistoryImpl.setId_(getId_());
        proposalMoveHistoryImpl.setSourceProposalId(getSourceProposalId());
        proposalMoveHistoryImpl.setSourceContestId(getSourceContestId());
        proposalMoveHistoryImpl.setSourcePhaseId(getSourcePhaseId());
        proposalMoveHistoryImpl.setTargetProposalId(getTargetProposalId());
        proposalMoveHistoryImpl.setTargetContestId(getTargetContestId());
        proposalMoveHistoryImpl.setTargetPhaseId(getTargetPhaseId());
        proposalMoveHistoryImpl.setMovingUserId(getMovingUserId());
        proposalMoveHistoryImpl.setMoveDate(getMoveDate());
        proposalMoveHistoryImpl.setMoveType(getMoveType());

        proposalMoveHistoryImpl.resetOriginalValues();

        return proposalMoveHistoryImpl;
    }

    @Override
    public int compareTo(ProposalMoveHistory proposalMoveHistory) {
        long primaryKey = proposalMoveHistory.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ProposalMoveHistory)) {
            return false;
        }

        ProposalMoveHistory proposalMoveHistory = (ProposalMoveHistory) obj;

        long primaryKey = proposalMoveHistory.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        ProposalMoveHistoryModelImpl proposalMoveHistoryModelImpl = this;

        proposalMoveHistoryModelImpl._originalSourceProposalId = proposalMoveHistoryModelImpl._sourceProposalId;

        proposalMoveHistoryModelImpl._setOriginalSourceProposalId = false;

        proposalMoveHistoryModelImpl._originalSourceContestId = proposalMoveHistoryModelImpl._sourceContestId;

        proposalMoveHistoryModelImpl._setOriginalSourceContestId = false;

        proposalMoveHistoryModelImpl._originalSourcePhaseId = proposalMoveHistoryModelImpl._sourcePhaseId;

        proposalMoveHistoryModelImpl._setOriginalSourcePhaseId = false;

        proposalMoveHistoryModelImpl._originalTargetProposalId = proposalMoveHistoryModelImpl._targetProposalId;

        proposalMoveHistoryModelImpl._setOriginalTargetProposalId = false;

        proposalMoveHistoryModelImpl._originalTargetContestId = proposalMoveHistoryModelImpl._targetContestId;

        proposalMoveHistoryModelImpl._setOriginalTargetContestId = false;

        proposalMoveHistoryModelImpl._originalTargetPhaseId = proposalMoveHistoryModelImpl._targetPhaseId;

        proposalMoveHistoryModelImpl._setOriginalTargetPhaseId = false;

        proposalMoveHistoryModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<ProposalMoveHistory> toCacheModel() {
        ProposalMoveHistoryCacheModel proposalMoveHistoryCacheModel = new ProposalMoveHistoryCacheModel();

        proposalMoveHistoryCacheModel.id_ = getId_();

        proposalMoveHistoryCacheModel.sourceProposalId = getSourceProposalId();

        proposalMoveHistoryCacheModel.sourceContestId = getSourceContestId();

        proposalMoveHistoryCacheModel.sourcePhaseId = getSourcePhaseId();

        proposalMoveHistoryCacheModel.targetProposalId = getTargetProposalId();

        proposalMoveHistoryCacheModel.targetContestId = getTargetContestId();

        proposalMoveHistoryCacheModel.targetPhaseId = getTargetPhaseId();

        proposalMoveHistoryCacheModel.movingUserId = getMovingUserId();

        Date moveDate = getMoveDate();

        if (moveDate != null) {
            proposalMoveHistoryCacheModel.moveDate = moveDate.getTime();
        } else {
            proposalMoveHistoryCacheModel.moveDate = Long.MIN_VALUE;
        }

        proposalMoveHistoryCacheModel.moveType = getMoveType();

        String moveType = proposalMoveHistoryCacheModel.moveType;

        if ((moveType != null) && (moveType.length() == 0)) {
            proposalMoveHistoryCacheModel.moveType = null;
        }

        return proposalMoveHistoryCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(21);

        sb.append("{id_=");
        sb.append(getId_());
        sb.append(", sourceProposalId=");
        sb.append(getSourceProposalId());
        sb.append(", sourceContestId=");
        sb.append(getSourceContestId());
        sb.append(", sourcePhaseId=");
        sb.append(getSourcePhaseId());
        sb.append(", targetProposalId=");
        sb.append(getTargetProposalId());
        sb.append(", targetContestId=");
        sb.append(getTargetContestId());
        sb.append(", targetPhaseId=");
        sb.append(getTargetPhaseId());
        sb.append(", movingUserId=");
        sb.append(getMovingUserId());
        sb.append(", moveDate=");
        sb.append(getMoveDate());
        sb.append(", moveType=");
        sb.append(getMoveType());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(34);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.ProposalMoveHistory");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id_</column-name><column-value><![CDATA[");
        sb.append(getId_());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sourceProposalId</column-name><column-value><![CDATA[");
        sb.append(getSourceProposalId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sourceContestId</column-name><column-value><![CDATA[");
        sb.append(getSourceContestId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sourcePhaseId</column-name><column-value><![CDATA[");
        sb.append(getSourcePhaseId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>targetProposalId</column-name><column-value><![CDATA[");
        sb.append(getTargetProposalId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>targetContestId</column-name><column-value><![CDATA[");
        sb.append(getTargetContestId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>targetPhaseId</column-name><column-value><![CDATA[");
        sb.append(getTargetPhaseId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>movingUserId</column-name><column-value><![CDATA[");
        sb.append(getMovingUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>moveDate</column-name><column-value><![CDATA[");
        sb.append(getMoveDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>moveType</column-name><column-value><![CDATA[");
        sb.append(getMoveType());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
