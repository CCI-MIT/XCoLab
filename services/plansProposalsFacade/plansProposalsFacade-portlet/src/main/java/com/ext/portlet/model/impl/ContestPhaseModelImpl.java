package com.ext.portlet.model.impl;

import com.ext.portlet.model.ContestPhase;
import com.ext.portlet.model.ContestPhaseModel;
import com.ext.portlet.model.ContestPhaseSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the ContestPhase service. Represents a row in the &quot;xcolab_ContestPhase&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.ContestPhaseModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ContestPhaseImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ContestPhaseImpl
 * @see com.ext.portlet.model.ContestPhase
 * @see com.ext.portlet.model.ContestPhaseModel
 * @generated
 */
@JSON(strict = true)
public class ContestPhaseModelImpl extends BaseModelImpl<ContestPhase>
    implements ContestPhaseModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a contest phase model instance should use the {@link com.ext.portlet.model.ContestPhase} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_ContestPhase";
    public static final Object[][] TABLE_COLUMNS = {
            { "ContestPhasePK", Types.BIGINT },
            { "ContestPK", Types.BIGINT },
            { "ContestPhaseType", Types.BIGINT },
            { "contestPhaseAutopromote", Types.VARCHAR },
            { "ContestPhaseDescriptionOverride", Types.VARCHAR },
            { "phaseActiveOverride", Types.BOOLEAN },
            { "phaseInactiveOverride", Types.BOOLEAN },
            { "PhaseStartDate", Types.TIMESTAMP },
            { "PhaseEndDate", Types.TIMESTAMP },
            { "nextStatus", Types.VARCHAR },
            { "created", Types.TIMESTAMP },
            { "updated", Types.TIMESTAMP },
            { "authorId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_ContestPhase (ContestPhasePK LONG not null primary key,ContestPK LONG,ContestPhaseType LONG,contestPhaseAutopromote VARCHAR(75) null,ContestPhaseDescriptionOverride TEXT null,phaseActiveOverride BOOLEAN,phaseInactiveOverride BOOLEAN,PhaseStartDate DATE null,PhaseEndDate DATE null,nextStatus VARCHAR(75) null,created DATE null,updated DATE null,authorId LONG)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_ContestPhase";
    public static final String ORDER_BY_JPQL = " ORDER BY contestPhase.PhaseStartDate ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_ContestPhase.PhaseStartDate ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.ContestPhase"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.ContestPhase"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.model.ContestPhase"),
            true);
    public static long CONTESTPK_COLUMN_BITMASK = 1L;
    public static long PHASEENDDATE_COLUMN_BITMASK = 2L;
    public static long PHASESTARTDATE_COLUMN_BITMASK = 4L;
    public static long CONTESTPHASEAUTOPROMOTE_COLUMN_BITMASK = 8L;
    public static long PHASEACTIVEOVERRIDE_COLUMN_BITMASK = 16L;
    public static long PHASEINACTIVEOVERRIDE_COLUMN_BITMASK = 32L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.ContestPhase"));
    private static ClassLoader _classLoader = ContestPhase.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            ContestPhase.class
        };
    private long _ContestPhasePK;
    private long _ContestPK;
    private long _originalContestPK;
    private boolean _setOriginalContestPK;
    private long _ContestPhaseType;
    private String _contestPhaseAutopromote;
    private String _originalContestPhaseAutopromote;
    private String _ContestPhaseDescriptionOverride;
    private boolean _phaseActiveOverride;
    private boolean _originalPhaseActiveOverride;
    private boolean _setOriginalPhaseActiveOverride;
    private boolean _phaseInactiveOverride;
    private boolean _originalPhaseInactiveOverride;
    private boolean _setOriginalPhaseInactiveOverride;
    private Date _PhaseStartDate;
    private Date _originalPhaseStartDate;
    private Date _PhaseEndDate;
    private Date _originalPhaseEndDate;
    private String _nextStatus;
    private Date _created;
    private Date _updated;
    private long _authorId;
    private transient ExpandoBridge _expandoBridge;
    private long _columnBitmask;
    private ContestPhase _escapedModelProxy;

    public ContestPhaseModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static ContestPhase toModel(ContestPhaseSoap soapModel) {
        ContestPhase model = new ContestPhaseImpl();

        model.setContestPhasePK(soapModel.getContestPhasePK());
        model.setContestPK(soapModel.getContestPK());
        model.setContestPhaseType(soapModel.getContestPhaseType());
        model.setContestPhaseAutopromote(soapModel.getContestPhaseAutopromote());
        model.setContestPhaseDescriptionOverride(soapModel.getContestPhaseDescriptionOverride());
        model.setPhaseActiveOverride(soapModel.getPhaseActiveOverride());
        model.setPhaseInactiveOverride(soapModel.getPhaseInactiveOverride());
        model.setPhaseStartDate(soapModel.getPhaseStartDate());
        model.setPhaseEndDate(soapModel.getPhaseEndDate());
        model.setNextStatus(soapModel.getNextStatus());
        model.setCreated(soapModel.getCreated());
        model.setUpdated(soapModel.getUpdated());
        model.setAuthorId(soapModel.getAuthorId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<ContestPhase> toModels(ContestPhaseSoap[] soapModels) {
        List<ContestPhase> models = new ArrayList<ContestPhase>(soapModels.length);

        for (ContestPhaseSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public long getPrimaryKey() {
        return _ContestPhasePK;
    }

    public void setPrimaryKey(long primaryKey) {
        setContestPhasePK(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_ContestPhasePK);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return ContestPhase.class;
    }

    public String getModelClassName() {
        return ContestPhase.class.getName();
    }

    @JSON
    public long getContestPhasePK() {
        return _ContestPhasePK;
    }

    public void setContestPhasePK(long ContestPhasePK) {
        _ContestPhasePK = ContestPhasePK;
    }

    @JSON
    public long getContestPK() {
        return _ContestPK;
    }

    public void setContestPK(long ContestPK) {
        _columnBitmask |= CONTESTPK_COLUMN_BITMASK;

        if (!_setOriginalContestPK) {
            _setOriginalContestPK = true;

            _originalContestPK = _ContestPK;
        }

        _ContestPK = ContestPK;
    }

    public long getOriginalContestPK() {
        return _originalContestPK;
    }

    @JSON
    public long getContestPhaseType() {
        return _ContestPhaseType;
    }

    public void setContestPhaseType(long ContestPhaseType) {
        _ContestPhaseType = ContestPhaseType;
    }

    @JSON
    public String getContestPhaseAutopromote() {
        if (_contestPhaseAutopromote == null) {
            return StringPool.BLANK;
        } else {
            return _contestPhaseAutopromote;
        }
    }

    public void setContestPhaseAutopromote(String contestPhaseAutopromote) {
        _columnBitmask |= CONTESTPHASEAUTOPROMOTE_COLUMN_BITMASK;

        if (_originalContestPhaseAutopromote == null) {
            _originalContestPhaseAutopromote = _contestPhaseAutopromote;
        }

        _contestPhaseAutopromote = contestPhaseAutopromote;
    }

    public String getOriginalContestPhaseAutopromote() {
        return GetterUtil.getString(_originalContestPhaseAutopromote);
    }

    @JSON
    public String getContestPhaseDescriptionOverride() {
        if (_ContestPhaseDescriptionOverride == null) {
            return StringPool.BLANK;
        } else {
            return _ContestPhaseDescriptionOverride;
        }
    }

    public void setContestPhaseDescriptionOverride(
        String ContestPhaseDescriptionOverride) {
        _ContestPhaseDescriptionOverride = ContestPhaseDescriptionOverride;
    }

    @JSON
    public boolean getPhaseActiveOverride() {
        return _phaseActiveOverride;
    }

    public boolean isPhaseActiveOverride() {
        return _phaseActiveOverride;
    }

    public void setPhaseActiveOverride(boolean phaseActiveOverride) {
        _columnBitmask |= PHASEACTIVEOVERRIDE_COLUMN_BITMASK;

        if (!_setOriginalPhaseActiveOverride) {
            _setOriginalPhaseActiveOverride = true;

            _originalPhaseActiveOverride = _phaseActiveOverride;
        }

        _phaseActiveOverride = phaseActiveOverride;
    }

    public boolean getOriginalPhaseActiveOverride() {
        return _originalPhaseActiveOverride;
    }

    @JSON
    public boolean getPhaseInactiveOverride() {
        return _phaseInactiveOverride;
    }

    public boolean isPhaseInactiveOverride() {
        return _phaseInactiveOverride;
    }

    public void setPhaseInactiveOverride(boolean phaseInactiveOverride) {
        _columnBitmask |= PHASEINACTIVEOVERRIDE_COLUMN_BITMASK;

        if (!_setOriginalPhaseInactiveOverride) {
            _setOriginalPhaseInactiveOverride = true;

            _originalPhaseInactiveOverride = _phaseInactiveOverride;
        }

        _phaseInactiveOverride = phaseInactiveOverride;
    }

    public boolean getOriginalPhaseInactiveOverride() {
        return _originalPhaseInactiveOverride;
    }

    @JSON
    public Date getPhaseStartDate() {
        return _PhaseStartDate;
    }

    public void setPhaseStartDate(Date PhaseStartDate) {
        _columnBitmask = -1L;

        if (_originalPhaseStartDate == null) {
            _originalPhaseStartDate = _PhaseStartDate;
        }

        _PhaseStartDate = PhaseStartDate;
    }

    public Date getOriginalPhaseStartDate() {
        return _originalPhaseStartDate;
    }

    @JSON
    public Date getPhaseEndDate() {
        return _PhaseEndDate;
    }

    public void setPhaseEndDate(Date PhaseEndDate) {
        _columnBitmask |= PHASEENDDATE_COLUMN_BITMASK;

        if (_originalPhaseEndDate == null) {
            _originalPhaseEndDate = _PhaseEndDate;
        }

        _PhaseEndDate = PhaseEndDate;
    }

    public Date getOriginalPhaseEndDate() {
        return _originalPhaseEndDate;
    }

    @JSON
    public String getNextStatus() {
        if (_nextStatus == null) {
            return StringPool.BLANK;
        } else {
            return _nextStatus;
        }
    }

    public void setNextStatus(String nextStatus) {
        _nextStatus = nextStatus;
    }

    @JSON
    public Date getCreated() {
        return _created;
    }

    public void setCreated(Date created) {
        _created = created;
    }

    @JSON
    public Date getUpdated() {
        return _updated;
    }

    public void setUpdated(Date updated) {
        _updated = updated;
    }

    @JSON
    public long getAuthorId() {
        return _authorId;
    }

    public void setAuthorId(long authorId) {
        _authorId = authorId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ContestPhase toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (ContestPhase) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        if (_expandoBridge == null) {
            _expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
                    ContestPhase.class.getName(), getPrimaryKey());
        }

        return _expandoBridge;
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        getExpandoBridge().setAttributes(serviceContext);
    }

    @Override
    public Object clone() {
        ContestPhaseImpl contestPhaseImpl = new ContestPhaseImpl();

        contestPhaseImpl.setContestPhasePK(getContestPhasePK());
        contestPhaseImpl.setContestPK(getContestPK());
        contestPhaseImpl.setContestPhaseType(getContestPhaseType());
        contestPhaseImpl.setContestPhaseAutopromote(getContestPhaseAutopromote());
        contestPhaseImpl.setContestPhaseDescriptionOverride(getContestPhaseDescriptionOverride());
        contestPhaseImpl.setPhaseActiveOverride(getPhaseActiveOverride());
        contestPhaseImpl.setPhaseInactiveOverride(getPhaseInactiveOverride());
        contestPhaseImpl.setPhaseStartDate(getPhaseStartDate());
        contestPhaseImpl.setPhaseEndDate(getPhaseEndDate());
        contestPhaseImpl.setNextStatus(getNextStatus());
        contestPhaseImpl.setCreated(getCreated());
        contestPhaseImpl.setUpdated(getUpdated());
        contestPhaseImpl.setAuthorId(getAuthorId());

        contestPhaseImpl.resetOriginalValues();

        return contestPhaseImpl;
    }

    public int compareTo(ContestPhase contestPhase) {
        int value = 0;

        value = DateUtil.compareTo(getPhaseStartDate(),
                contestPhase.getPhaseStartDate());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        ContestPhase contestPhase = null;

        try {
            contestPhase = (ContestPhase) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = contestPhase.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        ContestPhaseModelImpl contestPhaseModelImpl = this;

        contestPhaseModelImpl._originalContestPK = contestPhaseModelImpl._ContestPK;

        contestPhaseModelImpl._setOriginalContestPK = false;

        contestPhaseModelImpl._originalContestPhaseAutopromote = contestPhaseModelImpl._contestPhaseAutopromote;

        contestPhaseModelImpl._originalPhaseActiveOverride = contestPhaseModelImpl._phaseActiveOverride;

        contestPhaseModelImpl._setOriginalPhaseActiveOverride = false;

        contestPhaseModelImpl._originalPhaseInactiveOverride = contestPhaseModelImpl._phaseInactiveOverride;

        contestPhaseModelImpl._setOriginalPhaseInactiveOverride = false;

        contestPhaseModelImpl._originalPhaseStartDate = contestPhaseModelImpl._PhaseStartDate;

        contestPhaseModelImpl._originalPhaseEndDate = contestPhaseModelImpl._PhaseEndDate;

        contestPhaseModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<ContestPhase> toCacheModel() {
        ContestPhaseCacheModel contestPhaseCacheModel = new ContestPhaseCacheModel();

        contestPhaseCacheModel.ContestPhasePK = getContestPhasePK();

        contestPhaseCacheModel.ContestPK = getContestPK();

        contestPhaseCacheModel.ContestPhaseType = getContestPhaseType();

        contestPhaseCacheModel.contestPhaseAutopromote = getContestPhaseAutopromote();

        String contestPhaseAutopromote = contestPhaseCacheModel.contestPhaseAutopromote;

        if ((contestPhaseAutopromote != null) &&
                (contestPhaseAutopromote.length() == 0)) {
            contestPhaseCacheModel.contestPhaseAutopromote = null;
        }

        contestPhaseCacheModel.ContestPhaseDescriptionOverride = getContestPhaseDescriptionOverride();

        String ContestPhaseDescriptionOverride = contestPhaseCacheModel.ContestPhaseDescriptionOverride;

        if ((ContestPhaseDescriptionOverride != null) &&
                (ContestPhaseDescriptionOverride.length() == 0)) {
            contestPhaseCacheModel.ContestPhaseDescriptionOverride = null;
        }

        contestPhaseCacheModel.phaseActiveOverride = getPhaseActiveOverride();

        contestPhaseCacheModel.phaseInactiveOverride = getPhaseInactiveOverride();

        Date PhaseStartDate = getPhaseStartDate();

        if (PhaseStartDate != null) {
            contestPhaseCacheModel.PhaseStartDate = PhaseStartDate.getTime();
        } else {
            contestPhaseCacheModel.PhaseStartDate = Long.MIN_VALUE;
        }

        Date PhaseEndDate = getPhaseEndDate();

        if (PhaseEndDate != null) {
            contestPhaseCacheModel.PhaseEndDate = PhaseEndDate.getTime();
        } else {
            contestPhaseCacheModel.PhaseEndDate = Long.MIN_VALUE;
        }

        contestPhaseCacheModel.nextStatus = getNextStatus();

        String nextStatus = contestPhaseCacheModel.nextStatus;

        if ((nextStatus != null) && (nextStatus.length() == 0)) {
            contestPhaseCacheModel.nextStatus = null;
        }

        Date created = getCreated();

        if (created != null) {
            contestPhaseCacheModel.created = created.getTime();
        } else {
            contestPhaseCacheModel.created = Long.MIN_VALUE;
        }

        Date updated = getUpdated();

        if (updated != null) {
            contestPhaseCacheModel.updated = updated.getTime();
        } else {
            contestPhaseCacheModel.updated = Long.MIN_VALUE;
        }

        contestPhaseCacheModel.authorId = getAuthorId();

        return contestPhaseCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(27);

        sb.append("{ContestPhasePK=");
        sb.append(getContestPhasePK());
        sb.append(", ContestPK=");
        sb.append(getContestPK());
        sb.append(", ContestPhaseType=");
        sb.append(getContestPhaseType());
        sb.append(", contestPhaseAutopromote=");
        sb.append(getContestPhaseAutopromote());
        sb.append(", ContestPhaseDescriptionOverride=");
        sb.append(getContestPhaseDescriptionOverride());
        sb.append(", phaseActiveOverride=");
        sb.append(getPhaseActiveOverride());
        sb.append(", phaseInactiveOverride=");
        sb.append(getPhaseInactiveOverride());
        sb.append(", PhaseStartDate=");
        sb.append(getPhaseStartDate());
        sb.append(", PhaseEndDate=");
        sb.append(getPhaseEndDate());
        sb.append(", nextStatus=");
        sb.append(getNextStatus());
        sb.append(", created=");
        sb.append(getCreated());
        sb.append(", updated=");
        sb.append(getUpdated());
        sb.append(", authorId=");
        sb.append(getAuthorId());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(43);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.ContestPhase");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>ContestPhasePK</column-name><column-value><![CDATA[");
        sb.append(getContestPhasePK());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ContestPK</column-name><column-value><![CDATA[");
        sb.append(getContestPK());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ContestPhaseType</column-name><column-value><![CDATA[");
        sb.append(getContestPhaseType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contestPhaseAutopromote</column-name><column-value><![CDATA[");
        sb.append(getContestPhaseAutopromote());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ContestPhaseDescriptionOverride</column-name><column-value><![CDATA[");
        sb.append(getContestPhaseDescriptionOverride());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>phaseActiveOverride</column-name><column-value><![CDATA[");
        sb.append(getPhaseActiveOverride());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>phaseInactiveOverride</column-name><column-value><![CDATA[");
        sb.append(getPhaseInactiveOverride());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>PhaseStartDate</column-name><column-value><![CDATA[");
        sb.append(getPhaseStartDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>PhaseEndDate</column-name><column-value><![CDATA[");
        sb.append(getPhaseEndDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>nextStatus</column-name><column-value><![CDATA[");
        sb.append(getNextStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>created</column-name><column-value><![CDATA[");
        sb.append(getCreated());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>updated</column-name><column-value><![CDATA[");
        sb.append(getUpdated());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>authorId</column-name><column-value><![CDATA[");
        sb.append(getAuthorId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
