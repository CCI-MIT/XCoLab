package com.ext.portlet.model.impl;

import com.ext.portlet.model.MessagingUserPreferences;
import com.ext.portlet.model.MessagingUserPreferencesModel;
import com.ext.portlet.model.MessagingUserPreferencesSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.List;

/**
 * The base model implementation for the MessagingUserPreferences service. Represents a row in the &quot;xcolab_MessagingUserPreferences&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.MessagingUserPreferencesModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MessagingUserPreferencesImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MessagingUserPreferencesImpl
 * @see com.ext.portlet.model.MessagingUserPreferences
 * @see com.ext.portlet.model.MessagingUserPreferencesModel
 * @generated
 */
@JSON(strict = true)
public class MessagingUserPreferencesModelImpl extends BaseModelImpl<MessagingUserPreferences>
    implements MessagingUserPreferencesModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a messaging user preferences model instance should use the {@link com.ext.portlet.model.MessagingUserPreferences} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_MessagingUserPreferences";
    public static final Object[][] TABLE_COLUMNS = {
            { "messagingPreferencesId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "emailOnSend", Types.BOOLEAN },
            { "emailOnReceipt", Types.BOOLEAN },
            { "emailOnActivity", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_MessagingUserPreferences (messagingPreferencesId LONG not null primary key,userId LONG,emailOnSend BOOLEAN,emailOnReceipt BOOLEAN,emailOnActivity BOOLEAN)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_MessagingUserPreferences";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.MessagingUserPreferences"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.MessagingUserPreferences"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.model.MessagingUserPreferences"),
            true);
    public static long USERID_COLUMN_BITMASK = 1L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.MessagingUserPreferences"));
    private static ClassLoader _classLoader = MessagingUserPreferences.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            MessagingUserPreferences.class
        };
    private long _messagingPreferencesId;
    private long _userId;
    private String _userUuid;
    private long _originalUserId;
    private boolean _setOriginalUserId;
    private boolean _emailOnSend;
    private boolean _emailOnReceipt;
    private boolean _emailOnActivity;
    private transient ExpandoBridge _expandoBridge;
    private long _columnBitmask;
    private MessagingUserPreferences _escapedModelProxy;

    public MessagingUserPreferencesModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static MessagingUserPreferences toModel(
        MessagingUserPreferencesSoap soapModel) {
        MessagingUserPreferences model = new MessagingUserPreferencesImpl();

        model.setMessagingPreferencesId(soapModel.getMessagingPreferencesId());
        model.setUserId(soapModel.getUserId());
        model.setEmailOnSend(soapModel.getEmailOnSend());
        model.setEmailOnReceipt(soapModel.getEmailOnReceipt());
        model.setEmailOnActivity(soapModel.getEmailOnActivity());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<MessagingUserPreferences> toModels(
        MessagingUserPreferencesSoap[] soapModels) {
        List<MessagingUserPreferences> models = new ArrayList<MessagingUserPreferences>(soapModels.length);

        for (MessagingUserPreferencesSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public long getPrimaryKey() {
        return _messagingPreferencesId;
    }

    public void setPrimaryKey(long primaryKey) {
        setMessagingPreferencesId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_messagingPreferencesId);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return MessagingUserPreferences.class;
    }

    public String getModelClassName() {
        return MessagingUserPreferences.class.getName();
    }

    @JSON
    public long getMessagingPreferencesId() {
        return _messagingPreferencesId;
    }

    public void setMessagingPreferencesId(long messagingPreferencesId) {
        _messagingPreferencesId = messagingPreferencesId;
    }

    @JSON
    public long getUserId() {
        return _userId;
    }

    public void setUserId(long userId) {
        _columnBitmask |= USERID_COLUMN_BITMASK;

        if (!_setOriginalUserId) {
            _setOriginalUserId = true;

            _originalUserId = _userId;
        }

        _userId = userId;
    }

    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    public long getOriginalUserId() {
        return _originalUserId;
    }

    @JSON
    public boolean getEmailOnSend() {
        return _emailOnSend;
    }

    public boolean isEmailOnSend() {
        return _emailOnSend;
    }

    public void setEmailOnSend(boolean emailOnSend) {
        _emailOnSend = emailOnSend;
    }

    @JSON
    public boolean getEmailOnReceipt() {
        return _emailOnReceipt;
    }

    public boolean isEmailOnReceipt() {
        return _emailOnReceipt;
    }

    public void setEmailOnReceipt(boolean emailOnReceipt) {
        _emailOnReceipt = emailOnReceipt;
    }

    @JSON
    public boolean getEmailOnActivity() {
        return _emailOnActivity;
    }

    public boolean isEmailOnActivity() {
        return _emailOnActivity;
    }

    public void setEmailOnActivity(boolean emailOnActivity) {
        _emailOnActivity = emailOnActivity;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public MessagingUserPreferences toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (MessagingUserPreferences) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        if (_expandoBridge == null) {
            _expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
                    MessagingUserPreferences.class.getName(), getPrimaryKey());
        }

        return _expandoBridge;
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        getExpandoBridge().setAttributes(serviceContext);
    }

    @Override
    public Object clone() {
        MessagingUserPreferencesImpl messagingUserPreferencesImpl = new MessagingUserPreferencesImpl();

        messagingUserPreferencesImpl.setMessagingPreferencesId(getMessagingPreferencesId());
        messagingUserPreferencesImpl.setUserId(getUserId());
        messagingUserPreferencesImpl.setEmailOnSend(getEmailOnSend());
        messagingUserPreferencesImpl.setEmailOnReceipt(getEmailOnReceipt());
        messagingUserPreferencesImpl.setEmailOnActivity(getEmailOnActivity());

        messagingUserPreferencesImpl.resetOriginalValues();

        return messagingUserPreferencesImpl;
    }

    public int compareTo(MessagingUserPreferences messagingUserPreferences) {
        long primaryKey = messagingUserPreferences.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        MessagingUserPreferences messagingUserPreferences = null;

        try {
            messagingUserPreferences = (MessagingUserPreferences) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = messagingUserPreferences.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        MessagingUserPreferencesModelImpl messagingUserPreferencesModelImpl = this;

        messagingUserPreferencesModelImpl._originalUserId = messagingUserPreferencesModelImpl._userId;

        messagingUserPreferencesModelImpl._setOriginalUserId = false;

        messagingUserPreferencesModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<MessagingUserPreferences> toCacheModel() {
        MessagingUserPreferencesCacheModel messagingUserPreferencesCacheModel = new MessagingUserPreferencesCacheModel();

        messagingUserPreferencesCacheModel.messagingPreferencesId = getMessagingPreferencesId();

        messagingUserPreferencesCacheModel.userId = getUserId();

        messagingUserPreferencesCacheModel.emailOnSend = getEmailOnSend();

        messagingUserPreferencesCacheModel.emailOnReceipt = getEmailOnReceipt();

        messagingUserPreferencesCacheModel.emailOnActivity = getEmailOnActivity();

        return messagingUserPreferencesCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{messagingPreferencesId=");
        sb.append(getMessagingPreferencesId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", emailOnSend=");
        sb.append(getEmailOnSend());
        sb.append(", emailOnReceipt=");
        sb.append(getEmailOnReceipt());
        sb.append(", emailOnActivity=");
        sb.append(getEmailOnActivity());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.MessagingUserPreferences");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>messagingPreferencesId</column-name><column-value><![CDATA[");
        sb.append(getMessagingPreferencesId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>emailOnSend</column-name><column-value><![CDATA[");
        sb.append(getEmailOnSend());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>emailOnReceipt</column-name><column-value><![CDATA[");
        sb.append(getEmailOnReceipt());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>emailOnActivity</column-name><column-value><![CDATA[");
        sb.append(getEmailOnActivity());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
