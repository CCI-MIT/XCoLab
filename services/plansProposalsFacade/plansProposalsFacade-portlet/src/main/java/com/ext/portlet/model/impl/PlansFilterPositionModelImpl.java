package com.ext.portlet.model.impl;

import com.ext.portlet.model.PlansFilterPosition;
import com.ext.portlet.model.PlansFilterPositionModel;
import com.ext.portlet.model.PlansFilterPositionSoap;
import com.ext.portlet.service.persistence.PlansFilterPositionPK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.util.PortalUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the PlansFilterPosition service. Represents a row in the &quot;xcolab_PlansFilterPosition&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.PlansFilterPositionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PlansFilterPositionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PlansFilterPositionImpl
 * @see com.ext.portlet.model.PlansFilterPosition
 * @see com.ext.portlet.model.PlansFilterPositionModel
 * @generated
 */
@JSON(strict = true)
public class PlansFilterPositionModelImpl extends BaseModelImpl<PlansFilterPosition>
    implements PlansFilterPositionModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a plans filter position model instance should use the {@link com.ext.portlet.model.PlansFilterPosition} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_PlansFilterPosition";
    public static final Object[][] TABLE_COLUMNS = {
            { "userId", Types.BIGINT },
            { "planTypeId", Types.BIGINT },
            { "positionId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_PlansFilterPosition (userId LONG not null,planTypeId LONG not null,positionId LONG not null,primary key (userId, planTypeId, positionId))";
    public static final String TABLE_SQL_DROP = "drop table xcolab_PlansFilterPosition";
    public static final String ORDER_BY_JPQL = " ORDER BY plansFilterPosition.id.userId ASC, plansFilterPosition.id.planTypeId ASC, plansFilterPosition.id.positionId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_PlansFilterPosition.userId ASC, xcolab_PlansFilterPosition.planTypeId ASC, xcolab_PlansFilterPosition.positionId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.PlansFilterPosition"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.PlansFilterPosition"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.model.PlansFilterPosition"),
            true);
    public static long PLANTYPEID_COLUMN_BITMASK = 1L;
    public static long USERID_COLUMN_BITMASK = 2L;
    public static long POSITIONID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.PlansFilterPosition"));
    private static ClassLoader _classLoader = PlansFilterPosition.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            PlansFilterPosition.class
        };
    private long _userId;
    private String _userUuid;
    private long _originalUserId;
    private boolean _setOriginalUserId;
    private long _planTypeId;
    private long _originalPlanTypeId;
    private boolean _setOriginalPlanTypeId;
    private long _positionId;
    private long _columnBitmask;
    private PlansFilterPosition _escapedModel;

    public PlansFilterPositionModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static PlansFilterPosition toModel(PlansFilterPositionSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        PlansFilterPosition model = new PlansFilterPositionImpl();

        model.setUserId(soapModel.getUserId());
        model.setPlanTypeId(soapModel.getPlanTypeId());
        model.setPositionId(soapModel.getPositionId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<PlansFilterPosition> toModels(
        PlansFilterPositionSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<PlansFilterPosition> models = new ArrayList<PlansFilterPosition>(soapModels.length);

        for (PlansFilterPositionSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public PlansFilterPositionPK getPrimaryKey() {
        return new PlansFilterPositionPK(_userId, _planTypeId, _positionId);
    }

    @Override
    public void setPrimaryKey(PlansFilterPositionPK primaryKey) {
        setUserId(primaryKey.userId);
        setPlanTypeId(primaryKey.planTypeId);
        setPositionId(primaryKey.positionId);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new PlansFilterPositionPK(_userId, _planTypeId, _positionId);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((PlansFilterPositionPK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return PlansFilterPosition.class;
    }

    @Override
    public String getModelClassName() {
        return PlansFilterPosition.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("userId", getUserId());
        attributes.put("planTypeId", getPlanTypeId());
        attributes.put("positionId", getPositionId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Long planTypeId = (Long) attributes.get("planTypeId");

        if (planTypeId != null) {
            setPlanTypeId(planTypeId);
        }

        Long positionId = (Long) attributes.get("positionId");

        if (positionId != null) {
            setPositionId(positionId);
        }
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _columnBitmask |= USERID_COLUMN_BITMASK;

        if (!_setOriginalUserId) {
            _setOriginalUserId = true;

            _originalUserId = _userId;
        }

        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    public long getOriginalUserId() {
        return _originalUserId;
    }

    @JSON
    @Override
    public long getPlanTypeId() {
        return _planTypeId;
    }

    @Override
    public void setPlanTypeId(long planTypeId) {
        _columnBitmask |= PLANTYPEID_COLUMN_BITMASK;

        if (!_setOriginalPlanTypeId) {
            _setOriginalPlanTypeId = true;

            _originalPlanTypeId = _planTypeId;
        }

        _planTypeId = planTypeId;
    }

    public long getOriginalPlanTypeId() {
        return _originalPlanTypeId;
    }

    @JSON
    @Override
    public long getPositionId() {
        return _positionId;
    }

    @Override
    public void setPositionId(long positionId) {
        _positionId = positionId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public PlansFilterPosition toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (PlansFilterPosition) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        PlansFilterPositionImpl plansFilterPositionImpl = new PlansFilterPositionImpl();

        plansFilterPositionImpl.setUserId(getUserId());
        plansFilterPositionImpl.setPlanTypeId(getPlanTypeId());
        plansFilterPositionImpl.setPositionId(getPositionId());

        plansFilterPositionImpl.resetOriginalValues();

        return plansFilterPositionImpl;
    }

    @Override
    public int compareTo(PlansFilterPosition plansFilterPosition) {
        PlansFilterPositionPK primaryKey = plansFilterPosition.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof PlansFilterPosition)) {
            return false;
        }

        PlansFilterPosition plansFilterPosition = (PlansFilterPosition) obj;

        PlansFilterPositionPK primaryKey = plansFilterPosition.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        PlansFilterPositionModelImpl plansFilterPositionModelImpl = this;

        plansFilterPositionModelImpl._originalUserId = plansFilterPositionModelImpl._userId;

        plansFilterPositionModelImpl._setOriginalUserId = false;

        plansFilterPositionModelImpl._originalPlanTypeId = plansFilterPositionModelImpl._planTypeId;

        plansFilterPositionModelImpl._setOriginalPlanTypeId = false;

        plansFilterPositionModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<PlansFilterPosition> toCacheModel() {
        PlansFilterPositionCacheModel plansFilterPositionCacheModel = new PlansFilterPositionCacheModel();

        plansFilterPositionCacheModel.userId = getUserId();

        plansFilterPositionCacheModel.planTypeId = getPlanTypeId();

        plansFilterPositionCacheModel.positionId = getPositionId();

        return plansFilterPositionCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{userId=");
        sb.append(getUserId());
        sb.append(", planTypeId=");
        sb.append(getPlanTypeId());
        sb.append(", positionId=");
        sb.append(getPositionId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.PlansFilterPosition");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>planTypeId</column-name><column-value><![CDATA[");
        sb.append(getPlanTypeId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>positionId</column-name><column-value><![CDATA[");
        sb.append(getPositionId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
