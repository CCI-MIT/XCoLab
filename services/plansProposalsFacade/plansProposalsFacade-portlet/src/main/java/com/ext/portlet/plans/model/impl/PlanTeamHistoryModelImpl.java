package com.ext.portlet.plans.model.impl;

import com.ext.portlet.plans.model.PlanTeamHistory;
import com.ext.portlet.plans.model.PlanTeamHistoryModel;
import com.ext.portlet.plans.model.PlanTeamHistorySoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the PlanTeamHistory service. Represents a row in the &quot;Plans_PlanTeamHistory&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.plans.model.PlanTeamHistoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PlanTeamHistoryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PlanTeamHistoryImpl
 * @see com.ext.portlet.plans.model.PlanTeamHistory
 * @see com.ext.portlet.plans.model.PlanTeamHistoryModel
 * @generated
 */
@JSON(strict = true)
public class PlanTeamHistoryModelImpl extends BaseModelImpl<PlanTeamHistory>
    implements PlanTeamHistoryModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a plan team history model instance should use the {@link com.ext.portlet.plans.model.PlanTeamHistory} interface instead.
     */
    public static final String TABLE_NAME = "Plans_PlanTeamHistory";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "planId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "action", Types.VARCHAR },
            { "payload", Types.VARCHAR },
            { "created", Types.TIMESTAMP },
            { "updateAuthorId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table Plans_PlanTeamHistory (id_ LONG not null primary key,planId LONG,userId LONG,action VARCHAR(75) null,payload VARCHAR(75) null,created DATE null,updateAuthorId LONG)";
    public static final String TABLE_SQL_DROP = "drop table Plans_PlanTeamHistory";
    public static final String ORDER_BY_JPQL = " ORDER BY planTeamHistory.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Plans_PlanTeamHistory.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.plans.model.PlanTeamHistory"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.plans.model.PlanTeamHistory"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.plans.model.PlanTeamHistory"),
            true);
    public static long PLANID_COLUMN_BITMASK = 1L;
    public static long USERID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.plans.model.PlanTeamHistory"));
    private static ClassLoader _classLoader = PlanTeamHistory.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            PlanTeamHistory.class
        };
    private Long _id;
    private Long _planId;
    private Long _originalPlanId;
    private boolean _setOriginalPlanId;
    private Long _userId;
    private Long _originalUserId;
    private boolean _setOriginalUserId;
    private String _action;
    private String _payload;
    private Date _created;
    private Long _updateAuthorId;
    private long _columnBitmask;
    private PlanTeamHistory _escapedModelProxy;

    public PlanTeamHistoryModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static PlanTeamHistory toModel(PlanTeamHistorySoap soapModel) {
        PlanTeamHistory model = new PlanTeamHistoryImpl();

        model.setId(soapModel.getId());
        model.setPlanId(soapModel.getPlanId());
        model.setUserId(soapModel.getUserId());
        model.setAction(soapModel.getAction());
        model.setPayload(soapModel.getPayload());
        model.setCreated(soapModel.getCreated());
        model.setUpdateAuthorId(soapModel.getUpdateAuthorId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<PlanTeamHistory> toModels(
        PlanTeamHistorySoap[] soapModels) {
        List<PlanTeamHistory> models = new ArrayList<PlanTeamHistory>(soapModels.length);

        for (PlanTeamHistorySoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public Long getPrimaryKey() {
        return _id;
    }

    public void setPrimaryKey(Long primaryKey) {
        setId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_id);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return PlanTeamHistory.class;
    }

    public String getModelClassName() {
        return PlanTeamHistory.class.getName();
    }

    @JSON
    public Long getId() {
        return _id;
    }

    public void setId(Long id) {
        _columnBitmask = -1L;

        _id = id;
    }

    @JSON
    public Long getPlanId() {
        return _planId;
    }

    public void setPlanId(Long planId) {
        _columnBitmask |= PLANID_COLUMN_BITMASK;

        if (!_setOriginalPlanId) {
            _setOriginalPlanId = true;

            _originalPlanId = _planId;
        }

        _planId = planId;
    }

    public Long getOriginalPlanId() {
        return _originalPlanId;
    }

    @JSON
    public Long getUserId() {
        return _userId;
    }

    public void setUserId(Long userId) {
        _columnBitmask |= USERID_COLUMN_BITMASK;

        if (!_setOriginalUserId) {
            _setOriginalUserId = true;

            _originalUserId = _userId;
        }

        _userId = userId;
    }

    public Long getOriginalUserId() {
        return _originalUserId;
    }

    @JSON
    public String getAction() {
        if (_action == null) {
            return StringPool.BLANK;
        } else {
            return _action;
        }
    }

    public void setAction(String action) {
        _action = action;
    }

    @JSON
    public String getPayload() {
        if (_payload == null) {
            return StringPool.BLANK;
        } else {
            return _payload;
        }
    }

    public void setPayload(String payload) {
        _payload = payload;
    }

    @JSON
    public Date getCreated() {
        return _created;
    }

    public void setCreated(Date created) {
        _created = created;
    }

    @JSON
    public Long getUpdateAuthorId() {
        return _updateAuthorId;
    }

    public void setUpdateAuthorId(Long updateAuthorId) {
        _updateAuthorId = updateAuthorId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public PlanTeamHistory toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (PlanTeamHistory) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public Object clone() {
        PlanTeamHistoryImpl planTeamHistoryImpl = new PlanTeamHistoryImpl();

        planTeamHistoryImpl.setId(getId());
        planTeamHistoryImpl.setPlanId(getPlanId());
        planTeamHistoryImpl.setUserId(getUserId());
        planTeamHistoryImpl.setAction(getAction());
        planTeamHistoryImpl.setPayload(getPayload());
        planTeamHistoryImpl.setCreated(getCreated());
        planTeamHistoryImpl.setUpdateAuthorId(getUpdateAuthorId());

        planTeamHistoryImpl.resetOriginalValues();

        return planTeamHistoryImpl;
    }

    public int compareTo(PlanTeamHistory planTeamHistory) {
        int value = 0;

        if (getId() < planTeamHistory.getId()) {
            value = -1;
        } else if (getId() > planTeamHistory.getId()) {
            value = 1;
        } else {
            value = 0;
        }

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        PlanTeamHistory planTeamHistory = null;

        try {
            planTeamHistory = (PlanTeamHistory) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        Long primaryKey = planTeamHistory.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        PlanTeamHistoryModelImpl planTeamHistoryModelImpl = this;

        planTeamHistoryModelImpl._originalPlanId = planTeamHistoryModelImpl._planId;

        planTeamHistoryModelImpl._setOriginalPlanId = false;

        planTeamHistoryModelImpl._originalUserId = planTeamHistoryModelImpl._userId;

        planTeamHistoryModelImpl._setOriginalUserId = false;

        planTeamHistoryModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<PlanTeamHistory> toCacheModel() {
        PlanTeamHistoryCacheModel planTeamHistoryCacheModel = new PlanTeamHistoryCacheModel();

        planTeamHistoryCacheModel.id = getId();

        planTeamHistoryCacheModel.planId = getPlanId();

        planTeamHistoryCacheModel.userId = getUserId();

        planTeamHistoryCacheModel.action = getAction();

        String action = planTeamHistoryCacheModel.action;

        if ((action != null) && (action.length() == 0)) {
            planTeamHistoryCacheModel.action = null;
        }

        planTeamHistoryCacheModel.payload = getPayload();

        String payload = planTeamHistoryCacheModel.payload;

        if ((payload != null) && (payload.length() == 0)) {
            planTeamHistoryCacheModel.payload = null;
        }

        Date created = getCreated();

        if (created != null) {
            planTeamHistoryCacheModel.created = created.getTime();
        } else {
            planTeamHistoryCacheModel.created = Long.MIN_VALUE;
        }

        planTeamHistoryCacheModel.updateAuthorId = getUpdateAuthorId();

        return planTeamHistoryCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(15);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", planId=");
        sb.append(getPlanId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", action=");
        sb.append(getAction());
        sb.append(", payload=");
        sb.append(getPayload());
        sb.append(", created=");
        sb.append(getCreated());
        sb.append(", updateAuthorId=");
        sb.append(getUpdateAuthorId());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(25);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.plans.model.PlanTeamHistory");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>planId</column-name><column-value><![CDATA[");
        sb.append(getPlanId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>action</column-name><column-value><![CDATA[");
        sb.append(getAction());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>payload</column-name><column-value><![CDATA[");
        sb.append(getPayload());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>created</column-name><column-value><![CDATA[");
        sb.append(getCreated());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>updateAuthorId</column-name><column-value><![CDATA[");
        sb.append(getUpdateAuthorId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
