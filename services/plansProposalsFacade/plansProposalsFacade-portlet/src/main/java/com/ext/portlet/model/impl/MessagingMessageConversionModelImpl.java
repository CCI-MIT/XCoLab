package com.ext.portlet.model.impl;

import com.ext.portlet.model.MessagingMessageConversion;
import com.ext.portlet.model.MessagingMessageConversionModel;
import com.ext.portlet.model.MessagingMessageConversionSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the MessagingMessageConversion service. Represents a row in the &quot;xcolab_MessagingMessageConversion&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.MessagingMessageConversionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MessagingMessageConversionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MessagingMessageConversionImpl
 * @see com.ext.portlet.model.MessagingMessageConversion
 * @see com.ext.portlet.model.MessagingMessageConversionModel
 * @generated
 */
@JSON(strict = true)
public class MessagingMessageConversionModelImpl extends BaseModelImpl<MessagingMessageConversion>
    implements MessagingMessageConversionModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a messaging message conversion model instance should use the {@link com.ext.portlet.model.MessagingMessageConversion} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_MessagingMessageConversion";
    public static final Object[][] TABLE_COLUMNS = {
            { "conversionId", Types.BIGINT },
            { "conversionTypeId", Types.BIGINT },
            { "messageId", Types.BIGINT },
            { "ipAddress", Types.VARCHAR },
            { "extraData", Types.VARCHAR },
            { "extraData2", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_MessagingMessageConversion (conversionId LONG not null primary key,conversionTypeId LONG,messageId LONG,ipAddress VARCHAR(75) null,extraData VARCHAR(75) null,extraData2 VARCHAR(75) null,createDate DATE null)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_MessagingMessageConversion";
    public static final String ORDER_BY_JPQL = " ORDER BY messagingMessageConversion.conversionId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_MessagingMessageConversion.conversionId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.MessagingMessageConversion"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.MessagingMessageConversion"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.model.MessagingMessageConversion"),
            true);
    public static long CONVERSIONTYPEID_COLUMN_BITMASK = 1L;
    public static long MESSAGEID_COLUMN_BITMASK = 2L;
    public static long CONVERSIONID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.MessagingMessageConversion"));
    private static ClassLoader _classLoader = MessagingMessageConversion.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            MessagingMessageConversion.class
        };
    private long _conversionId;
    private long _conversionTypeId;
    private long _originalConversionTypeId;
    private boolean _setOriginalConversionTypeId;
    private long _messageId;
    private long _originalMessageId;
    private boolean _setOriginalMessageId;
    private String _ipAddress;
    private String _extraData;
    private String _extraData2;
    private Date _createDate;
    private long _columnBitmask;
    private MessagingMessageConversion _escapedModel;

    public MessagingMessageConversionModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static MessagingMessageConversion toModel(
        MessagingMessageConversionSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        MessagingMessageConversion model = new MessagingMessageConversionImpl();

        model.setConversionId(soapModel.getConversionId());
        model.setConversionTypeId(soapModel.getConversionTypeId());
        model.setMessageId(soapModel.getMessageId());
        model.setIpAddress(soapModel.getIpAddress());
        model.setExtraData(soapModel.getExtraData());
        model.setExtraData2(soapModel.getExtraData2());
        model.setCreateDate(soapModel.getCreateDate());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<MessagingMessageConversion> toModels(
        MessagingMessageConversionSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<MessagingMessageConversion> models = new ArrayList<MessagingMessageConversion>(soapModels.length);

        for (MessagingMessageConversionSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _conversionId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setConversionId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _conversionId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return MessagingMessageConversion.class;
    }

    @Override
    public String getModelClassName() {
        return MessagingMessageConversion.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("conversionId", getConversionId());
        attributes.put("conversionTypeId", getConversionTypeId());
        attributes.put("messageId", getMessageId());
        attributes.put("ipAddress", getIpAddress());
        attributes.put("extraData", getExtraData());
        attributes.put("extraData2", getExtraData2());
        attributes.put("createDate", getCreateDate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long conversionId = (Long) attributes.get("conversionId");

        if (conversionId != null) {
            setConversionId(conversionId);
        }

        Long conversionTypeId = (Long) attributes.get("conversionTypeId");

        if (conversionTypeId != null) {
            setConversionTypeId(conversionTypeId);
        }

        Long messageId = (Long) attributes.get("messageId");

        if (messageId != null) {
            setMessageId(messageId);
        }

        String ipAddress = (String) attributes.get("ipAddress");

        if (ipAddress != null) {
            setIpAddress(ipAddress);
        }

        String extraData = (String) attributes.get("extraData");

        if (extraData != null) {
            setExtraData(extraData);
        }

        String extraData2 = (String) attributes.get("extraData2");

        if (extraData2 != null) {
            setExtraData2(extraData2);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }
    }

    @JSON
    @Override
    public long getConversionId() {
        return _conversionId;
    }

    @Override
    public void setConversionId(long conversionId) {
        _conversionId = conversionId;
    }

    @JSON
    @Override
    public long getConversionTypeId() {
        return _conversionTypeId;
    }

    @Override
    public void setConversionTypeId(long conversionTypeId) {
        _columnBitmask |= CONVERSIONTYPEID_COLUMN_BITMASK;

        if (!_setOriginalConversionTypeId) {
            _setOriginalConversionTypeId = true;

            _originalConversionTypeId = _conversionTypeId;
        }

        _conversionTypeId = conversionTypeId;
    }

    public long getOriginalConversionTypeId() {
        return _originalConversionTypeId;
    }

    @JSON
    @Override
    public long getMessageId() {
        return _messageId;
    }

    @Override
    public void setMessageId(long messageId) {
        _columnBitmask |= MESSAGEID_COLUMN_BITMASK;

        if (!_setOriginalMessageId) {
            _setOriginalMessageId = true;

            _originalMessageId = _messageId;
        }

        _messageId = messageId;
    }

    public long getOriginalMessageId() {
        return _originalMessageId;
    }

    @JSON
    @Override
    public String getIpAddress() {
        if (_ipAddress == null) {
            return StringPool.BLANK;
        } else {
            return _ipAddress;
        }
    }

    @Override
    public void setIpAddress(String ipAddress) {
        _ipAddress = ipAddress;
    }

    @JSON
    @Override
    public String getExtraData() {
        if (_extraData == null) {
            return StringPool.BLANK;
        } else {
            return _extraData;
        }
    }

    @Override
    public void setExtraData(String extraData) {
        _extraData = extraData;
    }

    @JSON
    @Override
    public String getExtraData2() {
        if (_extraData2 == null) {
            return StringPool.BLANK;
        } else {
            return _extraData2;
        }
    }

    @Override
    public void setExtraData2(String extraData2) {
        _extraData2 = extraData2;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            MessagingMessageConversion.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public MessagingMessageConversion toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (MessagingMessageConversion) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        MessagingMessageConversionImpl messagingMessageConversionImpl = new MessagingMessageConversionImpl();

        messagingMessageConversionImpl.setConversionId(getConversionId());
        messagingMessageConversionImpl.setConversionTypeId(getConversionTypeId());
        messagingMessageConversionImpl.setMessageId(getMessageId());
        messagingMessageConversionImpl.setIpAddress(getIpAddress());
        messagingMessageConversionImpl.setExtraData(getExtraData());
        messagingMessageConversionImpl.setExtraData2(getExtraData2());
        messagingMessageConversionImpl.setCreateDate(getCreateDate());

        messagingMessageConversionImpl.resetOriginalValues();

        return messagingMessageConversionImpl;
    }

    @Override
    public int compareTo(MessagingMessageConversion messagingMessageConversion) {
        long primaryKey = messagingMessageConversion.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof MessagingMessageConversion)) {
            return false;
        }

        MessagingMessageConversion messagingMessageConversion = (MessagingMessageConversion) obj;

        long primaryKey = messagingMessageConversion.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        MessagingMessageConversionModelImpl messagingMessageConversionModelImpl = this;

        messagingMessageConversionModelImpl._originalConversionTypeId = messagingMessageConversionModelImpl._conversionTypeId;

        messagingMessageConversionModelImpl._setOriginalConversionTypeId = false;

        messagingMessageConversionModelImpl._originalMessageId = messagingMessageConversionModelImpl._messageId;

        messagingMessageConversionModelImpl._setOriginalMessageId = false;

        messagingMessageConversionModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<MessagingMessageConversion> toCacheModel() {
        MessagingMessageConversionCacheModel messagingMessageConversionCacheModel =
            new MessagingMessageConversionCacheModel();

        messagingMessageConversionCacheModel.conversionId = getConversionId();

        messagingMessageConversionCacheModel.conversionTypeId = getConversionTypeId();

        messagingMessageConversionCacheModel.messageId = getMessageId();

        messagingMessageConversionCacheModel.ipAddress = getIpAddress();

        String ipAddress = messagingMessageConversionCacheModel.ipAddress;

        if ((ipAddress != null) && (ipAddress.length() == 0)) {
            messagingMessageConversionCacheModel.ipAddress = null;
        }

        messagingMessageConversionCacheModel.extraData = getExtraData();

        String extraData = messagingMessageConversionCacheModel.extraData;

        if ((extraData != null) && (extraData.length() == 0)) {
            messagingMessageConversionCacheModel.extraData = null;
        }

        messagingMessageConversionCacheModel.extraData2 = getExtraData2();

        String extraData2 = messagingMessageConversionCacheModel.extraData2;

        if ((extraData2 != null) && (extraData2.length() == 0)) {
            messagingMessageConversionCacheModel.extraData2 = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            messagingMessageConversionCacheModel.createDate = createDate.getTime();
        } else {
            messagingMessageConversionCacheModel.createDate = Long.MIN_VALUE;
        }

        return messagingMessageConversionCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(15);

        sb.append("{conversionId=");
        sb.append(getConversionId());
        sb.append(", conversionTypeId=");
        sb.append(getConversionTypeId());
        sb.append(", messageId=");
        sb.append(getMessageId());
        sb.append(", ipAddress=");
        sb.append(getIpAddress());
        sb.append(", extraData=");
        sb.append(getExtraData());
        sb.append(", extraData2=");
        sb.append(getExtraData2());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(25);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.MessagingMessageConversion");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>conversionId</column-name><column-value><![CDATA[");
        sb.append(getConversionId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>conversionTypeId</column-name><column-value><![CDATA[");
        sb.append(getConversionTypeId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>messageId</column-name><column-value><![CDATA[");
        sb.append(getMessageId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ipAddress</column-name><column-value><![CDATA[");
        sb.append(getIpAddress());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>extraData</column-name><column-value><![CDATA[");
        sb.append(getExtraData());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>extraData2</column-name><column-value><![CDATA[");
        sb.append(getExtraData2());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
