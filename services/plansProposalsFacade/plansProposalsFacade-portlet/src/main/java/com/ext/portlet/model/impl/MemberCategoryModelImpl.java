package com.ext.portlet.model.impl;

import com.ext.portlet.model.MemberCategory;
import com.ext.portlet.model.MemberCategoryModel;
import com.ext.portlet.model.MemberCategorySoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the MemberCategory service. Represents a row in the &quot;xcolab_MemberCategory&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.MemberCategoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MemberCategoryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MemberCategoryImpl
 * @see com.ext.portlet.model.MemberCategory
 * @see com.ext.portlet.model.MemberCategoryModel
 * @generated
 */
@JSON(strict = true)
public class MemberCategoryModelImpl extends BaseModelImpl<MemberCategory>
    implements MemberCategoryModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a member category model instance should use the {@link com.ext.portlet.model.MemberCategory} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_MemberCategory";
    public static final Object[][] TABLE_COLUMNS = {
            { "roleId", Types.BIGINT },
            { "displayName", Types.VARCHAR },
            { "categoryName", Types.VARCHAR },
            { "sortOrder", Types.BIGINT },
            { "showInList", Types.BOOLEAN },
            { "imageName", Types.VARCHAR },
            { "description", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_MemberCategory (roleId LONG not null primary key,displayName VARCHAR(75) null,categoryName VARCHAR(75) null,sortOrder LONG,showInList BOOLEAN,imageName VARCHAR(75) null,description VARCHAR(2048) null)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_MemberCategory";
    public static final String ORDER_BY_JPQL = " ORDER BY memberCategory.roleId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_MemberCategory.roleId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.MemberCategory"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.MemberCategory"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.model.MemberCategory"),
            true);
    public static long DISPLAYNAME_COLUMN_BITMASK = 1L;
    public static long SHOWINLIST_COLUMN_BITMASK = 2L;
    public static long ROLEID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.MemberCategory"));
    private static ClassLoader _classLoader = MemberCategory.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            MemberCategory.class
        };
    private long _roleId;
    private String _displayName;
    private String _originalDisplayName;
    private String _categoryName;
    private long _sortOrder;
    private boolean _showInList;
    private boolean _originalShowInList;
    private boolean _setOriginalShowInList;
    private String _imageName;
    private String _description;
    private long _columnBitmask;
    private MemberCategory _escapedModel;

    public MemberCategoryModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static MemberCategory toModel(MemberCategorySoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        MemberCategory model = new MemberCategoryImpl();

        model.setRoleId(soapModel.getRoleId());
        model.setDisplayName(soapModel.getDisplayName());
        model.setCategoryName(soapModel.getCategoryName());
        model.setSortOrder(soapModel.getSortOrder());
        model.setShowInList(soapModel.getShowInList());
        model.setImageName(soapModel.getImageName());
        model.setDescription(soapModel.getDescription());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<MemberCategory> toModels(MemberCategorySoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<MemberCategory> models = new ArrayList<MemberCategory>(soapModels.length);

        for (MemberCategorySoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _roleId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setRoleId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _roleId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return MemberCategory.class;
    }

    @Override
    public String getModelClassName() {
        return MemberCategory.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("roleId", getRoleId());
        attributes.put("displayName", getDisplayName());
        attributes.put("categoryName", getCategoryName());
        attributes.put("sortOrder", getSortOrder());
        attributes.put("showInList", getShowInList());
        attributes.put("imageName", getImageName());
        attributes.put("description", getDescription());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long roleId = (Long) attributes.get("roleId");

        if (roleId != null) {
            setRoleId(roleId);
        }

        String displayName = (String) attributes.get("displayName");

        if (displayName != null) {
            setDisplayName(displayName);
        }

        String categoryName = (String) attributes.get("categoryName");

        if (categoryName != null) {
            setCategoryName(categoryName);
        }

        Long sortOrder = (Long) attributes.get("sortOrder");

        if (sortOrder != null) {
            setSortOrder(sortOrder);
        }

        Boolean showInList = (Boolean) attributes.get("showInList");

        if (showInList != null) {
            setShowInList(showInList);
        }

        String imageName = (String) attributes.get("imageName");

        if (imageName != null) {
            setImageName(imageName);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }
    }

    @JSON
    @Override
    public long getRoleId() {
        return _roleId;
    }

    @Override
    public void setRoleId(long roleId) {
        _roleId = roleId;
    }

    @JSON
    @Override
    public String getDisplayName() {
        if (_displayName == null) {
            return StringPool.BLANK;
        } else {
            return _displayName;
        }
    }

    @Override
    public void setDisplayName(String displayName) {
        _columnBitmask |= DISPLAYNAME_COLUMN_BITMASK;

        if (_originalDisplayName == null) {
            _originalDisplayName = _displayName;
        }

        _displayName = displayName;
    }

    public String getOriginalDisplayName() {
        return GetterUtil.getString(_originalDisplayName);
    }

    @JSON
    @Override
    public String getCategoryName() {
        if (_categoryName == null) {
            return StringPool.BLANK;
        } else {
            return _categoryName;
        }
    }

    @Override
    public void setCategoryName(String categoryName) {
        _categoryName = categoryName;
    }

    @JSON
    @Override
    public long getSortOrder() {
        return _sortOrder;
    }

    @Override
    public void setSortOrder(long sortOrder) {
        _sortOrder = sortOrder;
    }

    @JSON
    @Override
    public boolean getShowInList() {
        return _showInList;
    }

    @Override
    public boolean isShowInList() {
        return _showInList;
    }

    @Override
    public void setShowInList(boolean showInList) {
        _columnBitmask |= SHOWINLIST_COLUMN_BITMASK;

        if (!_setOriginalShowInList) {
            _setOriginalShowInList = true;

            _originalShowInList = _showInList;
        }

        _showInList = showInList;
    }

    public boolean getOriginalShowInList() {
        return _originalShowInList;
    }

    @JSON
    @Override
    public String getImageName() {
        if (_imageName == null) {
            return StringPool.BLANK;
        } else {
            return _imageName;
        }
    }

    @Override
    public void setImageName(String imageName) {
        _imageName = imageName;
    }

    @JSON
    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            MemberCategory.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public MemberCategory toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (MemberCategory) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        MemberCategoryImpl memberCategoryImpl = new MemberCategoryImpl();

        memberCategoryImpl.setRoleId(getRoleId());
        memberCategoryImpl.setDisplayName(getDisplayName());
        memberCategoryImpl.setCategoryName(getCategoryName());
        memberCategoryImpl.setSortOrder(getSortOrder());
        memberCategoryImpl.setShowInList(getShowInList());
        memberCategoryImpl.setImageName(getImageName());
        memberCategoryImpl.setDescription(getDescription());

        memberCategoryImpl.resetOriginalValues();

        return memberCategoryImpl;
    }

    @Override
    public int compareTo(MemberCategory memberCategory) {
        long primaryKey = memberCategory.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof MemberCategory)) {
            return false;
        }

        MemberCategory memberCategory = (MemberCategory) obj;

        long primaryKey = memberCategory.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        MemberCategoryModelImpl memberCategoryModelImpl = this;

        memberCategoryModelImpl._originalDisplayName = memberCategoryModelImpl._displayName;

        memberCategoryModelImpl._originalShowInList = memberCategoryModelImpl._showInList;

        memberCategoryModelImpl._setOriginalShowInList = false;

        memberCategoryModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<MemberCategory> toCacheModel() {
        MemberCategoryCacheModel memberCategoryCacheModel = new MemberCategoryCacheModel();

        memberCategoryCacheModel.roleId = getRoleId();

        memberCategoryCacheModel.displayName = getDisplayName();

        String displayName = memberCategoryCacheModel.displayName;

        if ((displayName != null) && (displayName.length() == 0)) {
            memberCategoryCacheModel.displayName = null;
        }

        memberCategoryCacheModel.categoryName = getCategoryName();

        String categoryName = memberCategoryCacheModel.categoryName;

        if ((categoryName != null) && (categoryName.length() == 0)) {
            memberCategoryCacheModel.categoryName = null;
        }

        memberCategoryCacheModel.sortOrder = getSortOrder();

        memberCategoryCacheModel.showInList = getShowInList();

        memberCategoryCacheModel.imageName = getImageName();

        String imageName = memberCategoryCacheModel.imageName;

        if ((imageName != null) && (imageName.length() == 0)) {
            memberCategoryCacheModel.imageName = null;
        }

        memberCategoryCacheModel.description = getDescription();

        String description = memberCategoryCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            memberCategoryCacheModel.description = null;
        }

        return memberCategoryCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(15);

        sb.append("{roleId=");
        sb.append(getRoleId());
        sb.append(", displayName=");
        sb.append(getDisplayName());
        sb.append(", categoryName=");
        sb.append(getCategoryName());
        sb.append(", sortOrder=");
        sb.append(getSortOrder());
        sb.append(", showInList=");
        sb.append(getShowInList());
        sb.append(", imageName=");
        sb.append(getImageName());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(25);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.MemberCategory");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>roleId</column-name><column-value><![CDATA[");
        sb.append(getRoleId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>displayName</column-name><column-value><![CDATA[");
        sb.append(getDisplayName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>categoryName</column-name><column-value><![CDATA[");
        sb.append(getCategoryName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sortOrder</column-name><column-value><![CDATA[");
        sb.append(getSortOrder());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>showInList</column-name><column-value><![CDATA[");
        sb.append(getShowInList());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>imageName</column-name><column-value><![CDATA[");
        sb.append(getImageName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
