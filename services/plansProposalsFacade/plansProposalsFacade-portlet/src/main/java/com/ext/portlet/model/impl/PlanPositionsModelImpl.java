package com.ext.portlet.model.impl;

import com.ext.portlet.model.PlanPositions;
import com.ext.portlet.model.PlanPositionsModel;
import com.ext.portlet.model.PlanPositionsSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the PlanPositions service. Represents a row in the &quot;xcolab_PlanPositions&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.PlanPositionsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PlanPositionsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PlanPositionsImpl
 * @see com.ext.portlet.model.PlanPositions
 * @see com.ext.portlet.model.PlanPositionsModel
 * @generated
 */
@JSON(strict = true)
public class PlanPositionsModelImpl extends BaseModelImpl<PlanPositions>
    implements PlanPositionsModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a plan positions model instance should use the {@link com.ext.portlet.model.PlanPositions} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_PlanPositions";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "planId", Types.BIGINT },
            { "planVersion", Types.BIGINT },
            { "version", Types.BIGINT },
            { "created", Types.TIMESTAMP },
            { "updateAuthorId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_PlanPositions (id_ LONG not null primary key,planId LONG,planVersion LONG,version LONG,created DATE null,updateAuthorId LONG)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_PlanPositions";
    public static final String ORDER_BY_JPQL = " ORDER BY planPositions.id DESC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_PlanPositions.id_ DESC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.PlanPositions"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.PlanPositions"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.model.PlanPositions"),
            true);
    public static long PLANID_COLUMN_BITMASK = 1L;
    public static long ID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.PlanPositions"));
    private static ClassLoader _classLoader = PlanPositions.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            PlanPositions.class
        };
    private long _id;
    private long _planId;
    private long _originalPlanId;
    private boolean _setOriginalPlanId;
    private long _planVersion;
    private long _version;
    private Date _created;
    private long _updateAuthorId;
    private long _columnBitmask;
    private PlanPositions _escapedModel;

    public PlanPositionsModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static PlanPositions toModel(PlanPositionsSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        PlanPositions model = new PlanPositionsImpl();

        model.setId(soapModel.getId());
        model.setPlanId(soapModel.getPlanId());
        model.setPlanVersion(soapModel.getPlanVersion());
        model.setVersion(soapModel.getVersion());
        model.setCreated(soapModel.getCreated());
        model.setUpdateAuthorId(soapModel.getUpdateAuthorId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<PlanPositions> toModels(PlanPositionsSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<PlanPositions> models = new ArrayList<PlanPositions>(soapModels.length);

        for (PlanPositionsSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return PlanPositions.class;
    }

    @Override
    public String getModelClassName() {
        return PlanPositions.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("planId", getPlanId());
        attributes.put("planVersion", getPlanVersion());
        attributes.put("version", getVersion());
        attributes.put("created", getCreated());
        attributes.put("updateAuthorId", getUpdateAuthorId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        Long planId = (Long) attributes.get("planId");

        if (planId != null) {
            setPlanId(planId);
        }

        Long planVersion = (Long) attributes.get("planVersion");

        if (planVersion != null) {
            setPlanVersion(planVersion);
        }

        Long version = (Long) attributes.get("version");

        if (version != null) {
            setVersion(version);
        }

        Date created = (Date) attributes.get("created");

        if (created != null) {
            setCreated(created);
        }

        Long updateAuthorId = (Long) attributes.get("updateAuthorId");

        if (updateAuthorId != null) {
            setUpdateAuthorId(updateAuthorId);
        }
    }

    @JSON
    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _columnBitmask = -1L;

        _id = id;
    }

    @JSON
    @Override
    public long getPlanId() {
        return _planId;
    }

    @Override
    public void setPlanId(long planId) {
        _columnBitmask |= PLANID_COLUMN_BITMASK;

        if (!_setOriginalPlanId) {
            _setOriginalPlanId = true;

            _originalPlanId = _planId;
        }

        _planId = planId;
    }

    public long getOriginalPlanId() {
        return _originalPlanId;
    }

    @JSON
    @Override
    public long getPlanVersion() {
        return _planVersion;
    }

    @Override
    public void setPlanVersion(long planVersion) {
        _planVersion = planVersion;
    }

    @JSON
    @Override
    public long getVersion() {
        return _version;
    }

    @Override
    public void setVersion(long version) {
        _version = version;
    }

    @JSON
    @Override
    public Date getCreated() {
        return _created;
    }

    @Override
    public void setCreated(Date created) {
        _created = created;
    }

    @JSON
    @Override
    public long getUpdateAuthorId() {
        return _updateAuthorId;
    }

    @Override
    public void setUpdateAuthorId(long updateAuthorId) {
        _updateAuthorId = updateAuthorId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            PlanPositions.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public PlanPositions toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (PlanPositions) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        PlanPositionsImpl planPositionsImpl = new PlanPositionsImpl();

        planPositionsImpl.setId(getId());
        planPositionsImpl.setPlanId(getPlanId());
        planPositionsImpl.setPlanVersion(getPlanVersion());
        planPositionsImpl.setVersion(getVersion());
        planPositionsImpl.setCreated(getCreated());
        planPositionsImpl.setUpdateAuthorId(getUpdateAuthorId());

        planPositionsImpl.resetOriginalValues();

        return planPositionsImpl;
    }

    @Override
    public int compareTo(PlanPositions planPositions) {
        int value = 0;

        if (getId() < planPositions.getId()) {
            value = -1;
        } else if (getId() > planPositions.getId()) {
            value = 1;
        } else {
            value = 0;
        }

        value = value * -1;

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof PlanPositions)) {
            return false;
        }

        PlanPositions planPositions = (PlanPositions) obj;

        long primaryKey = planPositions.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        PlanPositionsModelImpl planPositionsModelImpl = this;

        planPositionsModelImpl._originalPlanId = planPositionsModelImpl._planId;

        planPositionsModelImpl._setOriginalPlanId = false;

        planPositionsModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<PlanPositions> toCacheModel() {
        PlanPositionsCacheModel planPositionsCacheModel = new PlanPositionsCacheModel();

        planPositionsCacheModel.id = getId();

        planPositionsCacheModel.planId = getPlanId();

        planPositionsCacheModel.planVersion = getPlanVersion();

        planPositionsCacheModel.version = getVersion();

        Date created = getCreated();

        if (created != null) {
            planPositionsCacheModel.created = created.getTime();
        } else {
            planPositionsCacheModel.created = Long.MIN_VALUE;
        }

        planPositionsCacheModel.updateAuthorId = getUpdateAuthorId();

        return planPositionsCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(13);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", planId=");
        sb.append(getPlanId());
        sb.append(", planVersion=");
        sb.append(getPlanVersion());
        sb.append(", version=");
        sb.append(getVersion());
        sb.append(", created=");
        sb.append(getCreated());
        sb.append(", updateAuthorId=");
        sb.append(getUpdateAuthorId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(22);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.PlanPositions");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>planId</column-name><column-value><![CDATA[");
        sb.append(getPlanId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>planVersion</column-name><column-value><![CDATA[");
        sb.append(getPlanVersion());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>version</column-name><column-value><![CDATA[");
        sb.append(getVersion());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>created</column-name><column-value><![CDATA[");
        sb.append(getCreated());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>updateAuthorId</column-name><column-value><![CDATA[");
        sb.append(getUpdateAuthorId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
