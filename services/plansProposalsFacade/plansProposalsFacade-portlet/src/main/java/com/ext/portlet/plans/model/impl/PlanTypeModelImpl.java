package com.ext.portlet.plans.model.impl;

import com.ext.portlet.plans.model.PlanType;
import com.ext.portlet.plans.model.PlanTypeModel;
import com.ext.portlet.plans.model.PlanTypeSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.List;

/**
 * The base model implementation for the PlanType service. Represents a row in the &quot;Plans_PlanType&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.plans.model.PlanTypeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PlanTypeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PlanTypeImpl
 * @see com.ext.portlet.plans.model.PlanType
 * @see com.ext.portlet.plans.model.PlanTypeModel
 * @generated
 */
@JSON(strict = true)
public class PlanTypeModelImpl extends BaseModelImpl<PlanType>
    implements PlanTypeModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a plan type model instance should use the {@link com.ext.portlet.plans.model.PlanType} interface instead.
     */
    public static final String TABLE_NAME = "Plans_PlanType";
    public static final Object[][] TABLE_COLUMNS = {
            { "planTypeId", Types.BIGINT },
            { "name", Types.VARCHAR },
            { "description", Types.VARCHAR },
            { "modelId", Types.BIGINT },
            { "modelTypeName", Types.VARCHAR },
            { "published", Types.BOOLEAN },
            { "publishedCounterpartId", Types.BIGINT },
            { "isDefault", Types.BOOLEAN },
            { "defaultModelId", Types.BIGINT },
            { "defaultScenarioId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table Plans_PlanType (planTypeId LONG not null primary key,name VARCHAR(75) null,description VARCHAR(75) null,modelId LONG,modelTypeName VARCHAR(75) null,published BOOLEAN,publishedCounterpartId LONG,isDefault BOOLEAN,defaultModelId LONG,defaultScenarioId LONG)";
    public static final String TABLE_SQL_DROP = "drop table Plans_PlanType";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.plans.model.PlanType"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.plans.model.PlanType"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.plans.model.PlanType"),
            true);
    public static long ISDEFAULT_COLUMN_BITMASK = 1L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.plans.model.PlanType"));
    private static ClassLoader _classLoader = PlanType.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            PlanType.class
        };
    private Long _planTypeId;
    private String _name;
    private String _description;
    private Long _modelId;
    private String _modelTypeName;
    private Boolean _published;
    private Long _publishedCounterpartId;
    private Boolean _isDefault;
    private Boolean _originalIsDefault;
    private boolean _setOriginalIsDefault;
    private Long _defaultModelId;
    private Long _defaultScenarioId;
    private long _columnBitmask;
    private PlanType _escapedModelProxy;

    public PlanTypeModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static PlanType toModel(PlanTypeSoap soapModel) {
        PlanType model = new PlanTypeImpl();

        model.setPlanTypeId(soapModel.getPlanTypeId());
        model.setName(soapModel.getName());
        model.setDescription(soapModel.getDescription());
        model.setModelId(soapModel.getModelId());
        model.setModelTypeName(soapModel.getModelTypeName());
        model.setPublished(soapModel.getPublished());
        model.setPublishedCounterpartId(soapModel.getPublishedCounterpartId());
        model.setIsDefault(soapModel.getIsDefault());
        model.setDefaultModelId(soapModel.getDefaultModelId());
        model.setDefaultScenarioId(soapModel.getDefaultScenarioId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<PlanType> toModels(PlanTypeSoap[] soapModels) {
        List<PlanType> models = new ArrayList<PlanType>(soapModels.length);

        for (PlanTypeSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public Long getPrimaryKey() {
        return _planTypeId;
    }

    public void setPrimaryKey(Long primaryKey) {
        setPlanTypeId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_planTypeId);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return PlanType.class;
    }

    public String getModelClassName() {
        return PlanType.class.getName();
    }

    @JSON
    public Long getPlanTypeId() {
        return _planTypeId;
    }

    public void setPlanTypeId(Long planTypeId) {
        _planTypeId = planTypeId;
    }

    @JSON
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    public void setName(String name) {
        _name = name;
    }

    @JSON
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    public void setDescription(String description) {
        _description = description;
    }

    @JSON
    public Long getModelId() {
        return _modelId;
    }

    public void setModelId(Long modelId) {
        _modelId = modelId;
    }

    @JSON
    public String getModelTypeName() {
        if (_modelTypeName == null) {
            return StringPool.BLANK;
        } else {
            return _modelTypeName;
        }
    }

    public void setModelTypeName(String modelTypeName) {
        _modelTypeName = modelTypeName;
    }

    @JSON
    public Boolean getPublished() {
        return _published;
    }

    public void setPublished(Boolean published) {
        _published = published;
    }

    @JSON
    public Long getPublishedCounterpartId() {
        return _publishedCounterpartId;
    }

    public void setPublishedCounterpartId(Long publishedCounterpartId) {
        _publishedCounterpartId = publishedCounterpartId;
    }

    @JSON
    public Boolean getIsDefault() {
        return _isDefault;
    }

    public void setIsDefault(Boolean isDefault) {
        _columnBitmask |= ISDEFAULT_COLUMN_BITMASK;

        if (!_setOriginalIsDefault) {
            _setOriginalIsDefault = true;

            _originalIsDefault = _isDefault;
        }

        _isDefault = isDefault;
    }

    public Boolean getOriginalIsDefault() {
        return _originalIsDefault;
    }

    @JSON
    public Long getDefaultModelId() {
        return _defaultModelId;
    }

    public void setDefaultModelId(Long defaultModelId) {
        _defaultModelId = defaultModelId;
    }

    @JSON
    public Long getDefaultScenarioId() {
        return _defaultScenarioId;
    }

    public void setDefaultScenarioId(Long defaultScenarioId) {
        _defaultScenarioId = defaultScenarioId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public PlanType toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (PlanType) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public Object clone() {
        PlanTypeImpl planTypeImpl = new PlanTypeImpl();

        planTypeImpl.setPlanTypeId(getPlanTypeId());
        planTypeImpl.setName(getName());
        planTypeImpl.setDescription(getDescription());
        planTypeImpl.setModelId(getModelId());
        planTypeImpl.setModelTypeName(getModelTypeName());
        planTypeImpl.setPublished(getPublished());
        planTypeImpl.setPublishedCounterpartId(getPublishedCounterpartId());
        planTypeImpl.setIsDefault(getIsDefault());
        planTypeImpl.setDefaultModelId(getDefaultModelId());
        planTypeImpl.setDefaultScenarioId(getDefaultScenarioId());

        planTypeImpl.resetOriginalValues();

        return planTypeImpl;
    }

    public int compareTo(PlanType planType) {
        Long primaryKey = planType.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        PlanType planType = null;

        try {
            planType = (PlanType) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        Long primaryKey = planType.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        PlanTypeModelImpl planTypeModelImpl = this;

        planTypeModelImpl._originalIsDefault = planTypeModelImpl._isDefault;

        planTypeModelImpl._setOriginalIsDefault = false;

        planTypeModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<PlanType> toCacheModel() {
        PlanTypeCacheModel planTypeCacheModel = new PlanTypeCacheModel();

        planTypeCacheModel.planTypeId = getPlanTypeId();

        planTypeCacheModel.name = getName();

        String name = planTypeCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            planTypeCacheModel.name = null;
        }

        planTypeCacheModel.description = getDescription();

        String description = planTypeCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            planTypeCacheModel.description = null;
        }

        planTypeCacheModel.modelId = getModelId();

        planTypeCacheModel.modelTypeName = getModelTypeName();

        String modelTypeName = planTypeCacheModel.modelTypeName;

        if ((modelTypeName != null) && (modelTypeName.length() == 0)) {
            planTypeCacheModel.modelTypeName = null;
        }

        planTypeCacheModel.published = getPublished();

        planTypeCacheModel.publishedCounterpartId = getPublishedCounterpartId();

        planTypeCacheModel.isDefault = getIsDefault();

        planTypeCacheModel.defaultModelId = getDefaultModelId();

        planTypeCacheModel.defaultScenarioId = getDefaultScenarioId();

        return planTypeCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(21);

        sb.append("{planTypeId=");
        sb.append(getPlanTypeId());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append(", modelId=");
        sb.append(getModelId());
        sb.append(", modelTypeName=");
        sb.append(getModelTypeName());
        sb.append(", published=");
        sb.append(getPublished());
        sb.append(", publishedCounterpartId=");
        sb.append(getPublishedCounterpartId());
        sb.append(", isDefault=");
        sb.append(getIsDefault());
        sb.append(", defaultModelId=");
        sb.append(getDefaultModelId());
        sb.append(", defaultScenarioId=");
        sb.append(getDefaultScenarioId());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(34);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.plans.model.PlanType");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>planTypeId</column-name><column-value><![CDATA[");
        sb.append(getPlanTypeId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modelId</column-name><column-value><![CDATA[");
        sb.append(getModelId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modelTypeName</column-name><column-value><![CDATA[");
        sb.append(getModelTypeName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>published</column-name><column-value><![CDATA[");
        sb.append(getPublished());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>publishedCounterpartId</column-name><column-value><![CDATA[");
        sb.append(getPublishedCounterpartId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>isDefault</column-name><column-value><![CDATA[");
        sb.append(getIsDefault());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>defaultModelId</column-name><column-value><![CDATA[");
        sb.append(getDefaultModelId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>defaultScenarioId</column-name><column-value><![CDATA[");
        sb.append(getDefaultScenarioId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
