package com.ext.portlet.plans.model.impl;

import com.ext.portlet.plans.model.PlanTemplateSection;
import com.ext.portlet.plans.model.PlanTemplateSectionModel;
import com.ext.portlet.plans.model.PlanTemplateSectionSoap;
import com.ext.portlet.plans.service.persistence.PlanTemplateSectionPK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.List;

/**
 * The base model implementation for the PlanTemplateSection service. Represents a row in the &quot;xcolab_PlanTemplateSection&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.plans.model.PlanTemplateSectionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PlanTemplateSectionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PlanTemplateSectionImpl
 * @see com.ext.portlet.plans.model.PlanTemplateSection
 * @see com.ext.portlet.plans.model.PlanTemplateSectionModel
 * @generated
 */
@JSON(strict = true)
public class PlanTemplateSectionModelImpl extends BaseModelImpl<PlanTemplateSection>
    implements PlanTemplateSectionModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a plan template section model instance should use the {@link com.ext.portlet.plans.model.PlanTemplateSection} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_PlanTemplateSection";
    public static final Object[][] TABLE_COLUMNS = {
            { "planTemplateId", Types.BIGINT },
            { "planSectionId", Types.BIGINT },
            { "weight", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_PlanTemplateSection (planTemplateId LONG not null,planSectionId LONG not null,weight INTEGER,primary key (planTemplateId, planSectionId))";
    public static final String TABLE_SQL_DROP = "drop table xcolab_PlanTemplateSection";
    public static final String ORDER_BY_JPQL = " ORDER BY planTemplateSection.weight ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_PlanTemplateSection.weight ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.plans.model.PlanTemplateSection"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.plans.model.PlanTemplateSection"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.plans.model.PlanTemplateSection"),
            true);
    public static long PLANTEMPLATEID_COLUMN_BITMASK = 1L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.plans.model.PlanTemplateSection"));
    private static ClassLoader _classLoader = PlanTemplateSection.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            PlanTemplateSection.class
        };
    private long _planTemplateId;
    private long _originalPlanTemplateId;
    private boolean _setOriginalPlanTemplateId;
    private long _planSectionId;
    private int _weight;
    private long _columnBitmask;
    private PlanTemplateSection _escapedModelProxy;

    public PlanTemplateSectionModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static PlanTemplateSection toModel(PlanTemplateSectionSoap soapModel) {
        PlanTemplateSection model = new PlanTemplateSectionImpl();

        model.setPlanTemplateId(soapModel.getPlanTemplateId());
        model.setPlanSectionId(soapModel.getPlanSectionId());
        model.setWeight(soapModel.getWeight());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<PlanTemplateSection> toModels(
        PlanTemplateSectionSoap[] soapModels) {
        List<PlanTemplateSection> models = new ArrayList<PlanTemplateSection>(soapModels.length);

        for (PlanTemplateSectionSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public PlanTemplateSectionPK getPrimaryKey() {
        return new PlanTemplateSectionPK(_planTemplateId, _planSectionId);
    }

    public void setPrimaryKey(PlanTemplateSectionPK primaryKey) {
        setPlanTemplateId(primaryKey.planTemplateId);
        setPlanSectionId(primaryKey.planSectionId);
    }

    public Serializable getPrimaryKeyObj() {
        return new PlanTemplateSectionPK(_planTemplateId, _planSectionId);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((PlanTemplateSectionPK) primaryKeyObj);
    }

    public Class<?> getModelClass() {
        return PlanTemplateSection.class;
    }

    public String getModelClassName() {
        return PlanTemplateSection.class.getName();
    }

    @JSON
    public long getPlanTemplateId() {
        return _planTemplateId;
    }

    public void setPlanTemplateId(long planTemplateId) {
        _columnBitmask |= PLANTEMPLATEID_COLUMN_BITMASK;

        if (!_setOriginalPlanTemplateId) {
            _setOriginalPlanTemplateId = true;

            _originalPlanTemplateId = _planTemplateId;
        }

        _planTemplateId = planTemplateId;
    }

    public long getOriginalPlanTemplateId() {
        return _originalPlanTemplateId;
    }

    @JSON
    public long getPlanSectionId() {
        return _planSectionId;
    }

    public void setPlanSectionId(long planSectionId) {
        _planSectionId = planSectionId;
    }

    @JSON
    public int getWeight() {
        return _weight;
    }

    public void setWeight(int weight) {
        _columnBitmask = -1L;

        _weight = weight;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public PlanTemplateSection toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (PlanTemplateSection) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public Object clone() {
        PlanTemplateSectionImpl planTemplateSectionImpl = new PlanTemplateSectionImpl();

        planTemplateSectionImpl.setPlanTemplateId(getPlanTemplateId());
        planTemplateSectionImpl.setPlanSectionId(getPlanSectionId());
        planTemplateSectionImpl.setWeight(getWeight());

        planTemplateSectionImpl.resetOriginalValues();

        return planTemplateSectionImpl;
    }

    public int compareTo(PlanTemplateSection planTemplateSection) {
        int value = 0;

        if (getWeight() < planTemplateSection.getWeight()) {
            value = -1;
        } else if (getWeight() > planTemplateSection.getWeight()) {
            value = 1;
        } else {
            value = 0;
        }

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        PlanTemplateSection planTemplateSection = null;

        try {
            planTemplateSection = (PlanTemplateSection) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        PlanTemplateSectionPK primaryKey = planTemplateSection.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        PlanTemplateSectionModelImpl planTemplateSectionModelImpl = this;

        planTemplateSectionModelImpl._originalPlanTemplateId = planTemplateSectionModelImpl._planTemplateId;

        planTemplateSectionModelImpl._setOriginalPlanTemplateId = false;

        planTemplateSectionModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<PlanTemplateSection> toCacheModel() {
        PlanTemplateSectionCacheModel planTemplateSectionCacheModel = new PlanTemplateSectionCacheModel();

        planTemplateSectionCacheModel.planTemplateId = getPlanTemplateId();

        planTemplateSectionCacheModel.planSectionId = getPlanSectionId();

        planTemplateSectionCacheModel.weight = getWeight();

        return planTemplateSectionCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{planTemplateId=");
        sb.append(getPlanTemplateId());
        sb.append(", planSectionId=");
        sb.append(getPlanSectionId());
        sb.append(", weight=");
        sb.append(getWeight());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.plans.model.PlanTemplateSection");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>planTemplateId</column-name><column-value><![CDATA[");
        sb.append(getPlanTemplateId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>planSectionId</column-name><column-value><![CDATA[");
        sb.append(getPlanSectionId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>weight</column-name><column-value><![CDATA[");
        sb.append(getWeight());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
