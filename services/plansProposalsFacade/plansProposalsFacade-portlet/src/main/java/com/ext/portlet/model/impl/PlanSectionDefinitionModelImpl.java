package com.ext.portlet.model.impl;

import com.ext.portlet.model.PlanSectionDefinition;
import com.ext.portlet.model.PlanSectionDefinitionModel;
import com.ext.portlet.model.PlanSectionDefinitionSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.List;

/**
 * The base model implementation for the PlanSectionDefinition service. Represents a row in the &quot;xcolab_PlanSectionDefinition&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.PlanSectionDefinitionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PlanSectionDefinitionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PlanSectionDefinitionImpl
 * @see com.ext.portlet.model.PlanSectionDefinition
 * @see com.ext.portlet.model.PlanSectionDefinitionModel
 * @generated
 */
@JSON(strict = true)
public class PlanSectionDefinitionModelImpl extends BaseModelImpl<PlanSectionDefinition>
    implements PlanSectionDefinitionModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a plan section definition model instance should use the {@link com.ext.portlet.model.PlanSectionDefinition} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_PlanSectionDefinition";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "type_", Types.VARCHAR },
            { "adminTitle", Types.VARCHAR },
            { "title", Types.VARCHAR },
            { "defaultText", Types.CLOB },
            { "helpText", Types.CLOB },
            { "characterLimit", Types.INTEGER },
            { "focusAreaId", Types.BIGINT },
            { "locked", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_PlanSectionDefinition (id_ LONG not null primary key,type_ VARCHAR(75) null,adminTitle VARCHAR(1024) null,title VARCHAR(1024) null,defaultText TEXT null,helpText TEXT null,characterLimit INTEGER,focusAreaId LONG,locked BOOLEAN)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_PlanSectionDefinition";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.PlanSectionDefinition"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.PlanSectionDefinition"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.PlanSectionDefinition"));
    private static ClassLoader _classLoader = PlanSectionDefinition.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            PlanSectionDefinition.class
        };
    private long _id;
    private String _type;
    private String _adminTitle;
    private String _title;
    private String _defaultText;
    private String _helpText;
    private int _characterLimit;
    private long _focusAreaId;
    private boolean _locked;
    private transient ExpandoBridge _expandoBridge;
    private PlanSectionDefinition _escapedModelProxy;

    public PlanSectionDefinitionModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static PlanSectionDefinition toModel(
        PlanSectionDefinitionSoap soapModel) {
        PlanSectionDefinition model = new PlanSectionDefinitionImpl();

        model.setId(soapModel.getId());
        model.setType(soapModel.getType());
        model.setAdminTitle(soapModel.getAdminTitle());
        model.setTitle(soapModel.getTitle());
        model.setDefaultText(soapModel.getDefaultText());
        model.setHelpText(soapModel.getHelpText());
        model.setCharacterLimit(soapModel.getCharacterLimit());
        model.setFocusAreaId(soapModel.getFocusAreaId());
        model.setLocked(soapModel.getLocked());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<PlanSectionDefinition> toModels(
        PlanSectionDefinitionSoap[] soapModels) {
        List<PlanSectionDefinition> models = new ArrayList<PlanSectionDefinition>(soapModels.length);

        for (PlanSectionDefinitionSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public long getPrimaryKey() {
        return _id;
    }

    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_id);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return PlanSectionDefinition.class;
    }

    public String getModelClassName() {
        return PlanSectionDefinition.class.getName();
    }

    @JSON
    public long getId() {
        return _id;
    }

    public void setId(long id) {
        _id = id;
    }

    @JSON
    public String getType() {
        if (_type == null) {
            return StringPool.BLANK;
        } else {
            return _type;
        }
    }

    public void setType(String type) {
        _type = type;
    }

    @JSON
    public String getAdminTitle() {
        if (_adminTitle == null) {
            return StringPool.BLANK;
        } else {
            return _adminTitle;
        }
    }

    public void setAdminTitle(String adminTitle) {
        _adminTitle = adminTitle;
    }

    @JSON
    public String getTitle() {
        if (_title == null) {
            return StringPool.BLANK;
        } else {
            return _title;
        }
    }

    public void setTitle(String title) {
        _title = title;
    }

    @JSON
    public String getDefaultText() {
        if (_defaultText == null) {
            return StringPool.BLANK;
        } else {
            return _defaultText;
        }
    }

    public void setDefaultText(String defaultText) {
        _defaultText = defaultText;
    }

    @JSON
    public String getHelpText() {
        if (_helpText == null) {
            return StringPool.BLANK;
        } else {
            return _helpText;
        }
    }

    public void setHelpText(String helpText) {
        _helpText = helpText;
    }

    @JSON
    public int getCharacterLimit() {
        return _characterLimit;
    }

    public void setCharacterLimit(int characterLimit) {
        _characterLimit = characterLimit;
    }

    @JSON
    public long getFocusAreaId() {
        return _focusAreaId;
    }

    public void setFocusAreaId(long focusAreaId) {
        _focusAreaId = focusAreaId;
    }

    @JSON
    public boolean getLocked() {
        return _locked;
    }

    public boolean isLocked() {
        return _locked;
    }

    public void setLocked(boolean locked) {
        _locked = locked;
    }

    @Override
    public PlanSectionDefinition toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (PlanSectionDefinition) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        if (_expandoBridge == null) {
            _expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
                    PlanSectionDefinition.class.getName(), getPrimaryKey());
        }

        return _expandoBridge;
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        getExpandoBridge().setAttributes(serviceContext);
    }

    @Override
    public Object clone() {
        PlanSectionDefinitionImpl planSectionDefinitionImpl = new PlanSectionDefinitionImpl();

        planSectionDefinitionImpl.setId(getId());
        planSectionDefinitionImpl.setType(getType());
        planSectionDefinitionImpl.setAdminTitle(getAdminTitle());
        planSectionDefinitionImpl.setTitle(getTitle());
        planSectionDefinitionImpl.setDefaultText(getDefaultText());
        planSectionDefinitionImpl.setHelpText(getHelpText());
        planSectionDefinitionImpl.setCharacterLimit(getCharacterLimit());
        planSectionDefinitionImpl.setFocusAreaId(getFocusAreaId());
        planSectionDefinitionImpl.setLocked(getLocked());

        planSectionDefinitionImpl.resetOriginalValues();

        return planSectionDefinitionImpl;
    }

    public int compareTo(PlanSectionDefinition planSectionDefinition) {
        long primaryKey = planSectionDefinition.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        PlanSectionDefinition planSectionDefinition = null;

        try {
            planSectionDefinition = (PlanSectionDefinition) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = planSectionDefinition.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<PlanSectionDefinition> toCacheModel() {
        PlanSectionDefinitionCacheModel planSectionDefinitionCacheModel = new PlanSectionDefinitionCacheModel();

        planSectionDefinitionCacheModel.id = getId();

        planSectionDefinitionCacheModel.type = getType();

        String type = planSectionDefinitionCacheModel.type;

        if ((type != null) && (type.length() == 0)) {
            planSectionDefinitionCacheModel.type = null;
        }

        planSectionDefinitionCacheModel.adminTitle = getAdminTitle();

        String adminTitle = planSectionDefinitionCacheModel.adminTitle;

        if ((adminTitle != null) && (adminTitle.length() == 0)) {
            planSectionDefinitionCacheModel.adminTitle = null;
        }

        planSectionDefinitionCacheModel.title = getTitle();

        String title = planSectionDefinitionCacheModel.title;

        if ((title != null) && (title.length() == 0)) {
            planSectionDefinitionCacheModel.title = null;
        }

        planSectionDefinitionCacheModel.defaultText = getDefaultText();

        String defaultText = planSectionDefinitionCacheModel.defaultText;

        if ((defaultText != null) && (defaultText.length() == 0)) {
            planSectionDefinitionCacheModel.defaultText = null;
        }

        planSectionDefinitionCacheModel.helpText = getHelpText();

        String helpText = planSectionDefinitionCacheModel.helpText;

        if ((helpText != null) && (helpText.length() == 0)) {
            planSectionDefinitionCacheModel.helpText = null;
        }

        planSectionDefinitionCacheModel.characterLimit = getCharacterLimit();

        planSectionDefinitionCacheModel.focusAreaId = getFocusAreaId();

        planSectionDefinitionCacheModel.locked = getLocked();

        return planSectionDefinitionCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(19);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", type=");
        sb.append(getType());
        sb.append(", adminTitle=");
        sb.append(getAdminTitle());
        sb.append(", title=");
        sb.append(getTitle());
        sb.append(", defaultText=");
        sb.append(getDefaultText());
        sb.append(", helpText=");
        sb.append(getHelpText());
        sb.append(", characterLimit=");
        sb.append(getCharacterLimit());
        sb.append(", focusAreaId=");
        sb.append(getFocusAreaId());
        sb.append(", locked=");
        sb.append(getLocked());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(31);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.PlanSectionDefinition");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>type</column-name><column-value><![CDATA[");
        sb.append(getType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>adminTitle</column-name><column-value><![CDATA[");
        sb.append(getAdminTitle());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>title</column-name><column-value><![CDATA[");
        sb.append(getTitle());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>defaultText</column-name><column-value><![CDATA[");
        sb.append(getDefaultText());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>helpText</column-name><column-value><![CDATA[");
        sb.append(getHelpText());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>characterLimit</column-name><column-value><![CDATA[");
        sb.append(getCharacterLimit());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>focusAreaId</column-name><column-value><![CDATA[");
        sb.append(getFocusAreaId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>locked</column-name><column-value><![CDATA[");
        sb.append(getLocked());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
