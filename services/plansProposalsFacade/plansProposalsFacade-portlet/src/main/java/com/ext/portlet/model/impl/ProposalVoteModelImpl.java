package com.ext.portlet.model.impl;

import com.ext.portlet.model.ProposalVote;
import com.ext.portlet.model.ProposalVoteModel;
import com.ext.portlet.model.ProposalVoteSoap;
import com.ext.portlet.service.persistence.ProposalVotePK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.util.PortalUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ProposalVote service. Represents a row in the &quot;xcolab_ProposalVote&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.ProposalVoteModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProposalVoteImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProposalVoteImpl
 * @see com.ext.portlet.model.ProposalVote
 * @see com.ext.portlet.model.ProposalVoteModel
 * @generated
 */
@JSON(strict = true)
public class ProposalVoteModelImpl extends BaseModelImpl<ProposalVote>
    implements ProposalVoteModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a proposal vote model instance should use the {@link com.ext.portlet.model.ProposalVote} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_ProposalVote";
    public static final Object[][] TABLE_COLUMNS = {
            { "proposalId", Types.BIGINT },
            { "contestPhaseId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "createDate", Types.TIMESTAMP },
            { "isValid", Types.BOOLEAN },
            { "confirmationEmailSendDate", Types.TIMESTAMP },
            { "confirmationToken", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_ProposalVote (proposalId LONG,contestPhaseId LONG not null,userId LONG not null,createDate DATE null,isValid BOOLEAN,confirmationEmailSendDate DATE null,confirmationToken VARCHAR(75) null,primary key (contestPhaseId, userId))";
    public static final String TABLE_SQL_DROP = "drop table xcolab_ProposalVote";
    public static final String ORDER_BY_JPQL = " ORDER BY proposalVote.id.contestPhaseId ASC, proposalVote.id.userId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_ProposalVote.contestPhaseId ASC, xcolab_ProposalVote.userId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.ProposalVote"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.ProposalVote"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.model.ProposalVote"),
            true);
    public static long CONTESTPHASEID_COLUMN_BITMASK = 1L;
    public static long PROPOSALID_COLUMN_BITMASK = 2L;
    public static long USERID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.ProposalVote"));
    private static ClassLoader _classLoader = ProposalVote.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            ProposalVote.class
        };
    private long _proposalId;
    private long _originalProposalId;
    private boolean _setOriginalProposalId;
    private long _contestPhaseId;
    private long _originalContestPhaseId;
    private boolean _setOriginalContestPhaseId;
    private long _userId;
    private String _userUuid;
    private long _originalUserId;
    private boolean _setOriginalUserId;
    private Date _createDate;
    private boolean _isValid;
    private Date _confirmationEmailSendDate;
    private String _confirmationToken;
    private long _columnBitmask;
    private ProposalVote _escapedModel;

    public ProposalVoteModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static ProposalVote toModel(ProposalVoteSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        ProposalVote model = new ProposalVoteImpl();

        model.setProposalId(soapModel.getProposalId());
        model.setContestPhaseId(soapModel.getContestPhaseId());
        model.setUserId(soapModel.getUserId());
        model.setCreateDate(soapModel.getCreateDate());
        model.setIsValid(soapModel.getIsValid());
        model.setConfirmationEmailSendDate(soapModel.getConfirmationEmailSendDate());
        model.setConfirmationToken(soapModel.getConfirmationToken());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<ProposalVote> toModels(ProposalVoteSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<ProposalVote> models = new ArrayList<ProposalVote>(soapModels.length);

        for (ProposalVoteSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public ProposalVotePK getPrimaryKey() {
        return new ProposalVotePK(_contestPhaseId, _userId);
    }

    @Override
    public void setPrimaryKey(ProposalVotePK primaryKey) {
        setContestPhaseId(primaryKey.contestPhaseId);
        setUserId(primaryKey.userId);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new ProposalVotePK(_contestPhaseId, _userId);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((ProposalVotePK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return ProposalVote.class;
    }

    @Override
    public String getModelClassName() {
        return ProposalVote.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("proposalId", getProposalId());
        attributes.put("contestPhaseId", getContestPhaseId());
        attributes.put("userId", getUserId());
        attributes.put("createDate", getCreateDate());
        attributes.put("isValid", getIsValid());
        attributes.put("confirmationEmailSendDate",
            getConfirmationEmailSendDate());
        attributes.put("confirmationToken", getConfirmationToken());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long proposalId = (Long) attributes.get("proposalId");

        if (proposalId != null) {
            setProposalId(proposalId);
        }

        Long contestPhaseId = (Long) attributes.get("contestPhaseId");

        if (contestPhaseId != null) {
            setContestPhaseId(contestPhaseId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Boolean isValid = (Boolean) attributes.get("isValid");

        if (isValid != null) {
            setIsValid(isValid);
        }

        Date confirmationEmailSendDate = (Date) attributes.get(
                "confirmationEmailSendDate");

        if (confirmationEmailSendDate != null) {
            setConfirmationEmailSendDate(confirmationEmailSendDate);
        }

        String confirmationToken = (String) attributes.get("confirmationToken");

        if (confirmationToken != null) {
            setConfirmationToken(confirmationToken);
        }
    }

    @JSON
    @Override
    public long getProposalId() {
        return _proposalId;
    }

    @Override
    public void setProposalId(long proposalId) {
        _columnBitmask |= PROPOSALID_COLUMN_BITMASK;

        if (!_setOriginalProposalId) {
            _setOriginalProposalId = true;

            _originalProposalId = _proposalId;
        }

        _proposalId = proposalId;
    }

    public long getOriginalProposalId() {
        return _originalProposalId;
    }

    @JSON
    @Override
    public long getContestPhaseId() {
        return _contestPhaseId;
    }

    @Override
    public void setContestPhaseId(long contestPhaseId) {
        _columnBitmask |= CONTESTPHASEID_COLUMN_BITMASK;

        if (!_setOriginalContestPhaseId) {
            _setOriginalContestPhaseId = true;

            _originalContestPhaseId = _contestPhaseId;
        }

        _contestPhaseId = contestPhaseId;
    }

    public long getOriginalContestPhaseId() {
        return _originalContestPhaseId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _columnBitmask |= USERID_COLUMN_BITMASK;

        if (!_setOriginalUserId) {
            _setOriginalUserId = true;

            _originalUserId = _userId;
        }

        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    public long getOriginalUserId() {
        return _originalUserId;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public boolean getIsValid() {
        return _isValid;
    }

    @Override
    public boolean isIsValid() {
        return _isValid;
    }

    @Override
    public void setIsValid(boolean isValid) {
        _isValid = isValid;
    }

    @JSON
    @Override
    public Date getConfirmationEmailSendDate() {
        return _confirmationEmailSendDate;
    }

    @Override
    public void setConfirmationEmailSendDate(Date confirmationEmailSendDate) {
        _confirmationEmailSendDate = confirmationEmailSendDate;
    }

    @JSON
    @Override
    public String getConfirmationToken() {
        if (_confirmationToken == null) {
            return StringPool.BLANK;
        } else {
            return _confirmationToken;
        }
    }

    @Override
    public void setConfirmationToken(String confirmationToken) {
        _confirmationToken = confirmationToken;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ProposalVote toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (ProposalVote) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ProposalVoteImpl proposalVoteImpl = new ProposalVoteImpl();

        proposalVoteImpl.setProposalId(getProposalId());
        proposalVoteImpl.setContestPhaseId(getContestPhaseId());
        proposalVoteImpl.setUserId(getUserId());
        proposalVoteImpl.setCreateDate(getCreateDate());
        proposalVoteImpl.setIsValid(getIsValid());
        proposalVoteImpl.setConfirmationEmailSendDate(getConfirmationEmailSendDate());
        proposalVoteImpl.setConfirmationToken(getConfirmationToken());

        proposalVoteImpl.resetOriginalValues();

        return proposalVoteImpl;
    }

    @Override
    public int compareTo(ProposalVote proposalVote) {
        ProposalVotePK primaryKey = proposalVote.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ProposalVote)) {
            return false;
        }

        ProposalVote proposalVote = (ProposalVote) obj;

        ProposalVotePK primaryKey = proposalVote.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        ProposalVoteModelImpl proposalVoteModelImpl = this;

        proposalVoteModelImpl._originalProposalId = proposalVoteModelImpl._proposalId;

        proposalVoteModelImpl._setOriginalProposalId = false;

        proposalVoteModelImpl._originalContestPhaseId = proposalVoteModelImpl._contestPhaseId;

        proposalVoteModelImpl._setOriginalContestPhaseId = false;

        proposalVoteModelImpl._originalUserId = proposalVoteModelImpl._userId;

        proposalVoteModelImpl._setOriginalUserId = false;

        proposalVoteModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<ProposalVote> toCacheModel() {
        ProposalVoteCacheModel proposalVoteCacheModel = new ProposalVoteCacheModel();

        proposalVoteCacheModel.proposalId = getProposalId();

        proposalVoteCacheModel.contestPhaseId = getContestPhaseId();

        proposalVoteCacheModel.userId = getUserId();

        Date createDate = getCreateDate();

        if (createDate != null) {
            proposalVoteCacheModel.createDate = createDate.getTime();
        } else {
            proposalVoteCacheModel.createDate = Long.MIN_VALUE;
        }

        proposalVoteCacheModel.isValid = getIsValid();

        Date confirmationEmailSendDate = getConfirmationEmailSendDate();

        if (confirmationEmailSendDate != null) {
            proposalVoteCacheModel.confirmationEmailSendDate = confirmationEmailSendDate.getTime();
        } else {
            proposalVoteCacheModel.confirmationEmailSendDate = Long.MIN_VALUE;
        }

        proposalVoteCacheModel.confirmationToken = getConfirmationToken();

        String confirmationToken = proposalVoteCacheModel.confirmationToken;

        if ((confirmationToken != null) && (confirmationToken.length() == 0)) {
            proposalVoteCacheModel.confirmationToken = null;
        }

        return proposalVoteCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(15);

        sb.append("{proposalId=");
        sb.append(getProposalId());
        sb.append(", contestPhaseId=");
        sb.append(getContestPhaseId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", isValid=");
        sb.append(getIsValid());
        sb.append(", confirmationEmailSendDate=");
        sb.append(getConfirmationEmailSendDate());
        sb.append(", confirmationToken=");
        sb.append(getConfirmationToken());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(25);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.ProposalVote");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>proposalId</column-name><column-value><![CDATA[");
        sb.append(getProposalId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contestPhaseId</column-name><column-value><![CDATA[");
        sb.append(getContestPhaseId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>isValid</column-name><column-value><![CDATA[");
        sb.append(getIsValid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>confirmationEmailSendDate</column-name><column-value><![CDATA[");
        sb.append(getConfirmationEmailSendDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>confirmationToken</column-name><column-value><![CDATA[");
        sb.append(getConfirmationToken());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
