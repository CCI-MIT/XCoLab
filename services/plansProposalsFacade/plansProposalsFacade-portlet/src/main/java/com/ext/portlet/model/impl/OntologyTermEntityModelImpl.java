package com.ext.portlet.model.impl;

import com.ext.portlet.model.OntologyTermEntity;
import com.ext.portlet.model.OntologyTermEntityModel;
import com.ext.portlet.model.OntologyTermEntitySoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the OntologyTermEntity service. Represents a row in the &quot;xcolab_OntologyTermEntity&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.OntologyTermEntityModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OntologyTermEntityImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see OntologyTermEntityImpl
 * @see com.ext.portlet.model.OntologyTermEntity
 * @see com.ext.portlet.model.OntologyTermEntityModel
 * @generated
 */
@JSON(strict = true)
public class OntologyTermEntityModelImpl extends BaseModelImpl<OntologyTermEntity>
    implements OntologyTermEntityModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a ontology term entity model instance should use the {@link com.ext.portlet.model.OntologyTermEntity} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_OntologyTermEntity";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "termId", Types.BIGINT },
            { "classNameId", Types.BIGINT },
            { "classPK", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_OntologyTermEntity (id_ LONG not null primary key,termId LONG,classNameId LONG,classPK LONG)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_OntologyTermEntity";
    public static final String ORDER_BY_JPQL = " ORDER BY ontologyTermEntity.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_OntologyTermEntity.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.OntologyTermEntity"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.OntologyTermEntity"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.model.OntologyTermEntity"),
            true);
    public static long CLASSNAMEID_COLUMN_BITMASK = 1L;
    public static long CLASSPK_COLUMN_BITMASK = 2L;
    public static long TERMID_COLUMN_BITMASK = 4L;
    public static long ID_COLUMN_BITMASK = 8L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.OntologyTermEntity"));
    private static ClassLoader _classLoader = OntologyTermEntity.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            OntologyTermEntity.class
        };
    private long _id;
    private long _termId;
    private long _originalTermId;
    private boolean _setOriginalTermId;
    private long _classNameId;
    private long _originalClassNameId;
    private boolean _setOriginalClassNameId;
    private long _classPK;
    private long _originalClassPK;
    private boolean _setOriginalClassPK;
    private long _columnBitmask;
    private OntologyTermEntity _escapedModel;

    public OntologyTermEntityModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static OntologyTermEntity toModel(OntologyTermEntitySoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        OntologyTermEntity model = new OntologyTermEntityImpl();

        model.setId(soapModel.getId());
        model.setTermId(soapModel.getTermId());
        model.setClassNameId(soapModel.getClassNameId());
        model.setClassPK(soapModel.getClassPK());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<OntologyTermEntity> toModels(
        OntologyTermEntitySoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<OntologyTermEntity> models = new ArrayList<OntologyTermEntity>(soapModels.length);

        for (OntologyTermEntitySoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return OntologyTermEntity.class;
    }

    @Override
    public String getModelClassName() {
        return OntologyTermEntity.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("termId", getTermId());
        attributes.put("classNameId", getClassNameId());
        attributes.put("classPK", getClassPK());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        Long termId = (Long) attributes.get("termId");

        if (termId != null) {
            setTermId(termId);
        }

        Long classNameId = (Long) attributes.get("classNameId");

        if (classNameId != null) {
            setClassNameId(classNameId);
        }

        Long classPK = (Long) attributes.get("classPK");

        if (classPK != null) {
            setClassPK(classPK);
        }
    }

    @JSON
    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @JSON
    @Override
    public long getTermId() {
        return _termId;
    }

    @Override
    public void setTermId(long termId) {
        _columnBitmask |= TERMID_COLUMN_BITMASK;

        if (!_setOriginalTermId) {
            _setOriginalTermId = true;

            _originalTermId = _termId;
        }

        _termId = termId;
    }

    public long getOriginalTermId() {
        return _originalTermId;
    }

    @Override
    public String getClassName() {
        if (getClassNameId() <= 0) {
            return StringPool.BLANK;
        }

        return PortalUtil.getClassName(getClassNameId());
    }

    @Override
    public void setClassName(String className) {
        long classNameId = 0;

        if (Validator.isNotNull(className)) {
            classNameId = PortalUtil.getClassNameId(className);
        }

        setClassNameId(classNameId);
    }

    @JSON
    @Override
    public long getClassNameId() {
        return _classNameId;
    }

    @Override
    public void setClassNameId(long classNameId) {
        _columnBitmask |= CLASSNAMEID_COLUMN_BITMASK;

        if (!_setOriginalClassNameId) {
            _setOriginalClassNameId = true;

            _originalClassNameId = _classNameId;
        }

        _classNameId = classNameId;
    }

    public long getOriginalClassNameId() {
        return _originalClassNameId;
    }

    @JSON
    @Override
    public long getClassPK() {
        return _classPK;
    }

    @Override
    public void setClassPK(long classPK) {
        _columnBitmask |= CLASSPK_COLUMN_BITMASK;

        if (!_setOriginalClassPK) {
            _setOriginalClassPK = true;

            _originalClassPK = _classPK;
        }

        _classPK = classPK;
    }

    public long getOriginalClassPK() {
        return _originalClassPK;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            OntologyTermEntity.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public OntologyTermEntity toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (OntologyTermEntity) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        OntologyTermEntityImpl ontologyTermEntityImpl = new OntologyTermEntityImpl();

        ontologyTermEntityImpl.setId(getId());
        ontologyTermEntityImpl.setTermId(getTermId());
        ontologyTermEntityImpl.setClassNameId(getClassNameId());
        ontologyTermEntityImpl.setClassPK(getClassPK());

        ontologyTermEntityImpl.resetOriginalValues();

        return ontologyTermEntityImpl;
    }

    @Override
    public int compareTo(OntologyTermEntity ontologyTermEntity) {
        long primaryKey = ontologyTermEntity.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof OntologyTermEntity)) {
            return false;
        }

        OntologyTermEntity ontologyTermEntity = (OntologyTermEntity) obj;

        long primaryKey = ontologyTermEntity.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        OntologyTermEntityModelImpl ontologyTermEntityModelImpl = this;

        ontologyTermEntityModelImpl._originalTermId = ontologyTermEntityModelImpl._termId;

        ontologyTermEntityModelImpl._setOriginalTermId = false;

        ontologyTermEntityModelImpl._originalClassNameId = ontologyTermEntityModelImpl._classNameId;

        ontologyTermEntityModelImpl._setOriginalClassNameId = false;

        ontologyTermEntityModelImpl._originalClassPK = ontologyTermEntityModelImpl._classPK;

        ontologyTermEntityModelImpl._setOriginalClassPK = false;

        ontologyTermEntityModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<OntologyTermEntity> toCacheModel() {
        OntologyTermEntityCacheModel ontologyTermEntityCacheModel = new OntologyTermEntityCacheModel();

        ontologyTermEntityCacheModel.id = getId();

        ontologyTermEntityCacheModel.termId = getTermId();

        ontologyTermEntityCacheModel.classNameId = getClassNameId();

        ontologyTermEntityCacheModel.classPK = getClassPK();

        return ontologyTermEntityCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(9);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", termId=");
        sb.append(getTermId());
        sb.append(", classNameId=");
        sb.append(getClassNameId());
        sb.append(", classPK=");
        sb.append(getClassPK());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(16);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.OntologyTermEntity");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>termId</column-name><column-value><![CDATA[");
        sb.append(getTermId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>classNameId</column-name><column-value><![CDATA[");
        sb.append(getClassNameId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>classPK</column-name><column-value><![CDATA[");
        sb.append(getClassPK());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
