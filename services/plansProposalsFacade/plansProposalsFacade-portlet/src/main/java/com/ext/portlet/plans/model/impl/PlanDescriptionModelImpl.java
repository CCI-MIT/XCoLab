package com.ext.portlet.plans.model.impl;

import com.ext.portlet.plans.model.PlanDescription;
import com.ext.portlet.plans.model.PlanDescriptionModel;
import com.ext.portlet.plans.model.PlanDescriptionSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the PlanDescription service. Represents a row in the &quot;xcolab_PlanDescription&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.plans.model.PlanDescriptionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PlanDescriptionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PlanDescriptionImpl
 * @see com.ext.portlet.plans.model.PlanDescription
 * @see com.ext.portlet.plans.model.PlanDescriptionModel
 * @generated
 */
@JSON(strict = true)
public class PlanDescriptionModelImpl extends BaseModelImpl<PlanDescription>
    implements PlanDescriptionModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a plan description model instance should use the {@link com.ext.portlet.plans.model.PlanDescription} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_PlanDescription";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "planId", Types.BIGINT },
            { "name", Types.VARCHAR },
            { "description", Types.VARCHAR },
            { "version", Types.BIGINT },
            { "planVersion", Types.BIGINT },
            { "created", Types.TIMESTAMP },
            { "updateAuthorId", Types.BIGINT },
            { "image", Types.BIGINT },
            { "pitch", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_PlanDescription (id_ LONG not null primary key,planId LONG,name VARCHAR(75) null,description VARCHAR(75) null,version LONG,planVersion LONG,created DATE null,updateAuthorId LONG,image LONG,pitch VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_PlanDescription";
    public static final String ORDER_BY_JPQL = " ORDER BY planDescription.id DESC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_PlanDescription.id_ DESC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.plans.model.PlanDescription"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.plans.model.PlanDescription"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.plans.model.PlanDescription"),
            true);
    public static long PLANID_COLUMN_BITMASK = 1L;
    public static long PLANVERSION_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.plans.model.PlanDescription"));
    private static ClassLoader _classLoader = PlanDescription.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            PlanDescription.class
        };
    private long _id;
    private long _planId;
    private long _originalPlanId;
    private boolean _setOriginalPlanId;
    private String _name;
    private String _description;
    private long _version;
    private long _planVersion;
    private long _originalPlanVersion;
    private boolean _setOriginalPlanVersion;
    private Date _created;
    private long _updateAuthorId;
    private long _image;
    private String _pitch;
    private transient ExpandoBridge _expandoBridge;
    private long _columnBitmask;
    private PlanDescription _escapedModelProxy;

    public PlanDescriptionModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static PlanDescription toModel(PlanDescriptionSoap soapModel) {
        PlanDescription model = new PlanDescriptionImpl();

        model.setId(soapModel.getId());
        model.setPlanId(soapModel.getPlanId());
        model.setName(soapModel.getName());
        model.setDescription(soapModel.getDescription());
        model.setVersion(soapModel.getVersion());
        model.setPlanVersion(soapModel.getPlanVersion());
        model.setCreated(soapModel.getCreated());
        model.setUpdateAuthorId(soapModel.getUpdateAuthorId());
        model.setImage(soapModel.getImage());
        model.setPitch(soapModel.getPitch());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<PlanDescription> toModels(
        PlanDescriptionSoap[] soapModels) {
        List<PlanDescription> models = new ArrayList<PlanDescription>(soapModels.length);

        for (PlanDescriptionSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public long getPrimaryKey() {
        return _id;
    }

    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_id);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return PlanDescription.class;
    }

    public String getModelClassName() {
        return PlanDescription.class.getName();
    }

    @JSON
    public long getId() {
        return _id;
    }

    public void setId(long id) {
        _columnBitmask = -1L;

        _id = id;
    }

    @JSON
    public long getPlanId() {
        return _planId;
    }

    public void setPlanId(long planId) {
        _columnBitmask |= PLANID_COLUMN_BITMASK;

        if (!_setOriginalPlanId) {
            _setOriginalPlanId = true;

            _originalPlanId = _planId;
        }

        _planId = planId;
    }

    public long getOriginalPlanId() {
        return _originalPlanId;
    }

    @JSON
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    public void setName(String name) {
        _name = name;
    }

    @JSON
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    public void setDescription(String description) {
        _description = description;
    }

    @JSON
    public long getVersion() {
        return _version;
    }

    public void setVersion(long version) {
        _version = version;
    }

    @JSON
    public long getPlanVersion() {
        return _planVersion;
    }

    public void setPlanVersion(long planVersion) {
        _columnBitmask |= PLANVERSION_COLUMN_BITMASK;

        if (!_setOriginalPlanVersion) {
            _setOriginalPlanVersion = true;

            _originalPlanVersion = _planVersion;
        }

        _planVersion = planVersion;
    }

    public long getOriginalPlanVersion() {
        return _originalPlanVersion;
    }

    @JSON
    public Date getCreated() {
        return _created;
    }

    public void setCreated(Date created) {
        _created = created;
    }

    @JSON
    public long getUpdateAuthorId() {
        return _updateAuthorId;
    }

    public void setUpdateAuthorId(long updateAuthorId) {
        _updateAuthorId = updateAuthorId;
    }

    @JSON
    public long getImage() {
        return _image;
    }

    public void setImage(long image) {
        _image = image;
    }

    @JSON
    public String getPitch() {
        if (_pitch == null) {
            return StringPool.BLANK;
        } else {
            return _pitch;
        }
    }

    public void setPitch(String pitch) {
        _pitch = pitch;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public PlanDescription toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (PlanDescription) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        if (_expandoBridge == null) {
            _expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
                    PlanDescription.class.getName(), getPrimaryKey());
        }

        return _expandoBridge;
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        getExpandoBridge().setAttributes(serviceContext);
    }

    @Override
    public Object clone() {
        PlanDescriptionImpl planDescriptionImpl = new PlanDescriptionImpl();

        planDescriptionImpl.setId(getId());
        planDescriptionImpl.setPlanId(getPlanId());
        planDescriptionImpl.setName(getName());
        planDescriptionImpl.setDescription(getDescription());
        planDescriptionImpl.setVersion(getVersion());
        planDescriptionImpl.setPlanVersion(getPlanVersion());
        planDescriptionImpl.setCreated(getCreated());
        planDescriptionImpl.setUpdateAuthorId(getUpdateAuthorId());
        planDescriptionImpl.setImage(getImage());
        planDescriptionImpl.setPitch(getPitch());

        planDescriptionImpl.resetOriginalValues();

        return planDescriptionImpl;
    }

    public int compareTo(PlanDescription planDescription) {
        int value = 0;

        if (getId() < planDescription.getId()) {
            value = -1;
        } else if (getId() > planDescription.getId()) {
            value = 1;
        } else {
            value = 0;
        }

        value = value * -1;

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        PlanDescription planDescription = null;

        try {
            planDescription = (PlanDescription) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = planDescription.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        PlanDescriptionModelImpl planDescriptionModelImpl = this;

        planDescriptionModelImpl._originalPlanId = planDescriptionModelImpl._planId;

        planDescriptionModelImpl._setOriginalPlanId = false;

        planDescriptionModelImpl._originalPlanVersion = planDescriptionModelImpl._planVersion;

        planDescriptionModelImpl._setOriginalPlanVersion = false;

        planDescriptionModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<PlanDescription> toCacheModel() {
        PlanDescriptionCacheModel planDescriptionCacheModel = new PlanDescriptionCacheModel();

        planDescriptionCacheModel.id = getId();

        planDescriptionCacheModel.planId = getPlanId();

        planDescriptionCacheModel.name = getName();

        String name = planDescriptionCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            planDescriptionCacheModel.name = null;
        }

        planDescriptionCacheModel.description = getDescription();

        String description = planDescriptionCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            planDescriptionCacheModel.description = null;
        }

        planDescriptionCacheModel.version = getVersion();

        planDescriptionCacheModel.planVersion = getPlanVersion();

        Date created = getCreated();

        if (created != null) {
            planDescriptionCacheModel.created = created.getTime();
        } else {
            planDescriptionCacheModel.created = Long.MIN_VALUE;
        }

        planDescriptionCacheModel.updateAuthorId = getUpdateAuthorId();

        planDescriptionCacheModel.image = getImage();

        planDescriptionCacheModel.pitch = getPitch();

        String pitch = planDescriptionCacheModel.pitch;

        if ((pitch != null) && (pitch.length() == 0)) {
            planDescriptionCacheModel.pitch = null;
        }

        return planDescriptionCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(21);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", planId=");
        sb.append(getPlanId());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append(", version=");
        sb.append(getVersion());
        sb.append(", planVersion=");
        sb.append(getPlanVersion());
        sb.append(", created=");
        sb.append(getCreated());
        sb.append(", updateAuthorId=");
        sb.append(getUpdateAuthorId());
        sb.append(", image=");
        sb.append(getImage());
        sb.append(", pitch=");
        sb.append(getPitch());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(34);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.plans.model.PlanDescription");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>planId</column-name><column-value><![CDATA[");
        sb.append(getPlanId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>version</column-name><column-value><![CDATA[");
        sb.append(getVersion());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>planVersion</column-name><column-value><![CDATA[");
        sb.append(getPlanVersion());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>created</column-name><column-value><![CDATA[");
        sb.append(getCreated());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>updateAuthorId</column-name><column-value><![CDATA[");
        sb.append(getUpdateAuthorId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>image</column-name><column-value><![CDATA[");
        sb.append(getImage());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>pitch</column-name><column-value><![CDATA[");
        sb.append(getPitch());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
