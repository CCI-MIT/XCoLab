package com.ext.portlet.model.impl;

import com.ext.portlet.model.ConfigurationAttribute;
import com.ext.portlet.model.ConfigurationAttributeModel;
import com.ext.portlet.model.ConfigurationAttributeSoap;
import com.ext.portlet.service.persistence.ConfigurationAttributePK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ConfigurationAttribute service. Represents a row in the &quot;xcolab_ConfigurationAttribute&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.ConfigurationAttributeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ConfigurationAttributeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ConfigurationAttributeImpl
 * @see com.ext.portlet.model.ConfigurationAttribute
 * @see com.ext.portlet.model.ConfigurationAttributeModel
 * @generated
 */
@JSON(strict = true)
public class ConfigurationAttributeModelImpl extends BaseModelImpl<ConfigurationAttribute>
    implements ConfigurationAttributeModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a configuration attribute model instance should use the {@link com.ext.portlet.model.ConfigurationAttribute} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_ConfigurationAttribute";
    public static final Object[][] TABLE_COLUMNS = {
            { "name", Types.VARCHAR },
            { "additionalId", Types.BIGINT },
            { "numericValue", Types.BIGINT },
            { "stringValue", Types.VARCHAR },
            { "realValue", Types.DOUBLE }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_ConfigurationAttribute (name VARCHAR(75) not null,additionalId LONG not null,numericValue LONG,stringValue TEXT null,realValue DOUBLE,primary key (name, additionalId))";
    public static final String TABLE_SQL_DROP = "drop table xcolab_ConfigurationAttribute";
    public static final String ORDER_BY_JPQL = " ORDER BY configurationAttribute.id.name ASC, configurationAttribute.id.additionalId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_ConfigurationAttribute.name ASC, xcolab_ConfigurationAttribute.additionalId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.ConfigurationAttribute"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.ConfigurationAttribute"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.ConfigurationAttribute"));
    private static ClassLoader _classLoader = ConfigurationAttribute.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            ConfigurationAttribute.class
        };
    private String _name;
    private long _additionalId;
    private long _numericValue;
    private String _stringValue;
    private double _realValue;
    private ConfigurationAttribute _escapedModel;

    public ConfigurationAttributeModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static ConfigurationAttribute toModel(
        ConfigurationAttributeSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        ConfigurationAttribute model = new ConfigurationAttributeImpl();

        model.setName(soapModel.getName());
        model.setAdditionalId(soapModel.getAdditionalId());
        model.setNumericValue(soapModel.getNumericValue());
        model.setStringValue(soapModel.getStringValue());
        model.setRealValue(soapModel.getRealValue());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<ConfigurationAttribute> toModels(
        ConfigurationAttributeSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<ConfigurationAttribute> models = new ArrayList<ConfigurationAttribute>(soapModels.length);

        for (ConfigurationAttributeSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public ConfigurationAttributePK getPrimaryKey() {
        return new ConfigurationAttributePK(_name, _additionalId);
    }

    @Override
    public void setPrimaryKey(ConfigurationAttributePK primaryKey) {
        setName(primaryKey.name);
        setAdditionalId(primaryKey.additionalId);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new ConfigurationAttributePK(_name, _additionalId);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((ConfigurationAttributePK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return ConfigurationAttribute.class;
    }

    @Override
    public String getModelClassName() {
        return ConfigurationAttribute.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("name", getName());
        attributes.put("additionalId", getAdditionalId());
        attributes.put("numericValue", getNumericValue());
        attributes.put("stringValue", getStringValue());
        attributes.put("realValue", getRealValue());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        Long additionalId = (Long) attributes.get("additionalId");

        if (additionalId != null) {
            setAdditionalId(additionalId);
        }

        Long numericValue = (Long) attributes.get("numericValue");

        if (numericValue != null) {
            setNumericValue(numericValue);
        }

        String stringValue = (String) attributes.get("stringValue");

        if (stringValue != null) {
            setStringValue(stringValue);
        }

        Double realValue = (Double) attributes.get("realValue");

        if (realValue != null) {
            setRealValue(realValue);
        }
    }

    @JSON
    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _name = name;
    }

    @JSON
    @Override
    public long getAdditionalId() {
        return _additionalId;
    }

    @Override
    public void setAdditionalId(long additionalId) {
        _additionalId = additionalId;
    }

    @JSON
    @Override
    public long getNumericValue() {
        return _numericValue;
    }

    @Override
    public void setNumericValue(long numericValue) {
        _numericValue = numericValue;
    }

    @JSON
    @Override
    public String getStringValue() {
        if (_stringValue == null) {
            return StringPool.BLANK;
        } else {
            return _stringValue;
        }
    }

    @Override
    public void setStringValue(String stringValue) {
        _stringValue = stringValue;
    }

    @JSON
    @Override
    public double getRealValue() {
        return _realValue;
    }

    @Override
    public void setRealValue(double realValue) {
        _realValue = realValue;
    }

    @Override
    public ConfigurationAttribute toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (ConfigurationAttribute) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ConfigurationAttributeImpl configurationAttributeImpl = new ConfigurationAttributeImpl();

        configurationAttributeImpl.setName(getName());
        configurationAttributeImpl.setAdditionalId(getAdditionalId());
        configurationAttributeImpl.setNumericValue(getNumericValue());
        configurationAttributeImpl.setStringValue(getStringValue());
        configurationAttributeImpl.setRealValue(getRealValue());

        configurationAttributeImpl.resetOriginalValues();

        return configurationAttributeImpl;
    }

    @Override
    public int compareTo(ConfigurationAttribute configurationAttribute) {
        ConfigurationAttributePK primaryKey = configurationAttribute.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ConfigurationAttribute)) {
            return false;
        }

        ConfigurationAttribute configurationAttribute = (ConfigurationAttribute) obj;

        ConfigurationAttributePK primaryKey = configurationAttribute.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<ConfigurationAttribute> toCacheModel() {
        ConfigurationAttributeCacheModel configurationAttributeCacheModel = new ConfigurationAttributeCacheModel();

        configurationAttributeCacheModel.name = getName();

        String name = configurationAttributeCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            configurationAttributeCacheModel.name = null;
        }

        configurationAttributeCacheModel.additionalId = getAdditionalId();

        configurationAttributeCacheModel.numericValue = getNumericValue();

        configurationAttributeCacheModel.stringValue = getStringValue();

        String stringValue = configurationAttributeCacheModel.stringValue;

        if ((stringValue != null) && (stringValue.length() == 0)) {
            configurationAttributeCacheModel.stringValue = null;
        }

        configurationAttributeCacheModel.realValue = getRealValue();

        return configurationAttributeCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{name=");
        sb.append(getName());
        sb.append(", additionalId=");
        sb.append(getAdditionalId());
        sb.append(", numericValue=");
        sb.append(getNumericValue());
        sb.append(", stringValue=");
        sb.append(getStringValue());
        sb.append(", realValue=");
        sb.append(getRealValue());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.ConfigurationAttribute");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>additionalId</column-name><column-value><![CDATA[");
        sb.append(getAdditionalId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>numericValue</column-name><column-value><![CDATA[");
        sb.append(getNumericValue());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>stringValue</column-name><column-value><![CDATA[");
        sb.append(getStringValue());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>realValue</column-name><column-value><![CDATA[");
        sb.append(getRealValue());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
