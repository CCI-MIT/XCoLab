package com.ext.portlet.model.impl;

import com.ext.portlet.model.Proposal;
import com.ext.portlet.model.ProposalModel;
import com.ext.portlet.model.ProposalSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the Proposal service. Represents a row in the &quot;xcolab_Proposal&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.ProposalModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProposalImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProposalImpl
 * @see com.ext.portlet.model.Proposal
 * @see com.ext.portlet.model.ProposalModel
 * @generated
 */
@JSON(strict = true)
public class ProposalModelImpl extends BaseModelImpl<Proposal>
    implements ProposalModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a proposal model instance should use the {@link com.ext.portlet.model.Proposal} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_Proposal";
    public static final Object[][] TABLE_COLUMNS = {
            { "proposalId", Types.BIGINT },
            { "createDate", Types.TIMESTAMP },
            { "currentVersion", Types.INTEGER },
            { "authorId", Types.BIGINT },
            { "visible", Types.BOOLEAN },
            { "discussionId", Types.BIGINT },
            { "judgeDiscussionId", Types.BIGINT },
            { "fellowDiscussionId", Types.BIGINT },
            { "advisorDiscussionId", Types.BIGINT },
            { "groupId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_Proposal (proposalId LONG not null primary key,createDate DATE null,currentVersion INTEGER,authorId LONG,visible BOOLEAN,discussionId LONG,judgeDiscussionId LONG,fellowDiscussionId LONG,advisorDiscussionId LONG,groupId LONG)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_Proposal";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.Proposal"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.Proposal"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.Proposal"));
    private static ClassLoader _classLoader = Proposal.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            Proposal.class
        };
    private long _proposalId;
    private Date _createDate;
    private int _currentVersion;
    private long _authorId;
    private boolean _visible;
    private long _discussionId;
    private long _judgeDiscussionId;
    private long _fellowDiscussionId;
    private long _advisorDiscussionId;
    private long _groupId;
    private transient ExpandoBridge _expandoBridge;
    private Proposal _escapedModelProxy;

    public ProposalModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Proposal toModel(ProposalSoap soapModel) {
        Proposal model = new ProposalImpl();

        model.setProposalId(soapModel.getProposalId());
        model.setCreateDate(soapModel.getCreateDate());
        model.setCurrentVersion(soapModel.getCurrentVersion());
        model.setAuthorId(soapModel.getAuthorId());
        model.setVisible(soapModel.getVisible());
        model.setDiscussionId(soapModel.getDiscussionId());
        model.setJudgeDiscussionId(soapModel.getJudgeDiscussionId());
        model.setFellowDiscussionId(soapModel.getFellowDiscussionId());
        model.setAdvisorDiscussionId(soapModel.getAdvisorDiscussionId());
        model.setGroupId(soapModel.getGroupId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Proposal> toModels(ProposalSoap[] soapModels) {
        List<Proposal> models = new ArrayList<Proposal>(soapModels.length);

        for (ProposalSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public long getPrimaryKey() {
        return _proposalId;
    }

    public void setPrimaryKey(long primaryKey) {
        setProposalId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_proposalId);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return Proposal.class;
    }

    public String getModelClassName() {
        return Proposal.class.getName();
    }

    @JSON
    public long getProposalId() {
        return _proposalId;
    }

    public void setProposalId(long proposalId) {
        _proposalId = proposalId;
    }

    @JSON
    public Date getCreateDate() {
        return _createDate;
    }

    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    public int getCurrentVersion() {
        return _currentVersion;
    }

    public void setCurrentVersion(int currentVersion) {
        _currentVersion = currentVersion;
    }

    @JSON
    public long getAuthorId() {
        return _authorId;
    }

    public void setAuthorId(long authorId) {
        _authorId = authorId;
    }

    @JSON
    public boolean getVisible() {
        return _visible;
    }

    public boolean isVisible() {
        return _visible;
    }

    public void setVisible(boolean visible) {
        _visible = visible;
    }

    @JSON
    public long getDiscussionId() {
        return _discussionId;
    }

    public void setDiscussionId(long discussionId) {
        _discussionId = discussionId;
    }

    @JSON
    public long getJudgeDiscussionId() {
        return _judgeDiscussionId;
    }

    public void setJudgeDiscussionId(long judgeDiscussionId) {
        _judgeDiscussionId = judgeDiscussionId;
    }

    @JSON
    public long getFellowDiscussionId() {
        return _fellowDiscussionId;
    }

    public void setFellowDiscussionId(long fellowDiscussionId) {
        _fellowDiscussionId = fellowDiscussionId;
    }

    @JSON
    public long getAdvisorDiscussionId() {
        return _advisorDiscussionId;
    }

    public void setAdvisorDiscussionId(long advisorDiscussionId) {
        _advisorDiscussionId = advisorDiscussionId;
    }

    @JSON
    public long getGroupId() {
        return _groupId;
    }

    public void setGroupId(long groupId) {
        _groupId = groupId;
    }

    @Override
    public Proposal toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (Proposal) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        if (_expandoBridge == null) {
            _expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
                    Proposal.class.getName(), getPrimaryKey());
        }

        return _expandoBridge;
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        getExpandoBridge().setAttributes(serviceContext);
    }

    @Override
    public Object clone() {
        ProposalImpl proposalImpl = new ProposalImpl();

        proposalImpl.setProposalId(getProposalId());
        proposalImpl.setCreateDate(getCreateDate());
        proposalImpl.setCurrentVersion(getCurrentVersion());
        proposalImpl.setAuthorId(getAuthorId());
        proposalImpl.setVisible(getVisible());
        proposalImpl.setDiscussionId(getDiscussionId());
        proposalImpl.setJudgeDiscussionId(getJudgeDiscussionId());
        proposalImpl.setFellowDiscussionId(getFellowDiscussionId());
        proposalImpl.setAdvisorDiscussionId(getAdvisorDiscussionId());
        proposalImpl.setGroupId(getGroupId());

        proposalImpl.resetOriginalValues();

        return proposalImpl;
    }

    public int compareTo(Proposal proposal) {
        long primaryKey = proposal.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        Proposal proposal = null;

        try {
            proposal = (Proposal) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = proposal.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<Proposal> toCacheModel() {
        ProposalCacheModel proposalCacheModel = new ProposalCacheModel();

        proposalCacheModel.proposalId = getProposalId();

        Date createDate = getCreateDate();

        if (createDate != null) {
            proposalCacheModel.createDate = createDate.getTime();
        } else {
            proposalCacheModel.createDate = Long.MIN_VALUE;
        }

        proposalCacheModel.currentVersion = getCurrentVersion();

        proposalCacheModel.authorId = getAuthorId();

        proposalCacheModel.visible = getVisible();

        proposalCacheModel.discussionId = getDiscussionId();

        proposalCacheModel.judgeDiscussionId = getJudgeDiscussionId();

        proposalCacheModel.fellowDiscussionId = getFellowDiscussionId();

        proposalCacheModel.advisorDiscussionId = getAdvisorDiscussionId();

        proposalCacheModel.groupId = getGroupId();

        return proposalCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(21);

        sb.append("{proposalId=");
        sb.append(getProposalId());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", currentVersion=");
        sb.append(getCurrentVersion());
        sb.append(", authorId=");
        sb.append(getAuthorId());
        sb.append(", visible=");
        sb.append(getVisible());
        sb.append(", discussionId=");
        sb.append(getDiscussionId());
        sb.append(", judgeDiscussionId=");
        sb.append(getJudgeDiscussionId());
        sb.append(", fellowDiscussionId=");
        sb.append(getFellowDiscussionId());
        sb.append(", advisorDiscussionId=");
        sb.append(getAdvisorDiscussionId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(34);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.Proposal");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>proposalId</column-name><column-value><![CDATA[");
        sb.append(getProposalId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>currentVersion</column-name><column-value><![CDATA[");
        sb.append(getCurrentVersion());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>authorId</column-name><column-value><![CDATA[");
        sb.append(getAuthorId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>visible</column-name><column-value><![CDATA[");
        sb.append(getVisible());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>discussionId</column-name><column-value><![CDATA[");
        sb.append(getDiscussionId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>judgeDiscussionId</column-name><column-value><![CDATA[");
        sb.append(getJudgeDiscussionId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>fellowDiscussionId</column-name><column-value><![CDATA[");
        sb.append(getFellowDiscussionId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>advisorDiscussionId</column-name><column-value><![CDATA[");
        sb.append(getAdvisorDiscussionId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
