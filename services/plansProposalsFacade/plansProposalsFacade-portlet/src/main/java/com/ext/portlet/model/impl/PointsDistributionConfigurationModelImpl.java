package com.ext.portlet.model.impl;

import com.ext.portlet.model.PointsDistributionConfiguration;
import com.ext.portlet.model.PointsDistributionConfigurationModel;
import com.ext.portlet.model.PointsDistributionConfigurationSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the PointsDistributionConfiguration service. Represents a row in the &quot;xcolab_PointsDistributionConfiguration&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.PointsDistributionConfigurationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PointsDistributionConfigurationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PointsDistributionConfigurationImpl
 * @see com.ext.portlet.model.PointsDistributionConfiguration
 * @see com.ext.portlet.model.PointsDistributionConfigurationModel
 * @generated
 */
@JSON(strict = true)
public class PointsDistributionConfigurationModelImpl extends BaseModelImpl<PointsDistributionConfiguration>
    implements PointsDistributionConfigurationModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a points distribution configuration model instance should use the {@link com.ext.portlet.model.PointsDistributionConfiguration} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_PointsDistributionConfiguration";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "proposalId", Types.BIGINT },
            { "pointTypeId", Types.BIGINT },
            { "targetUserId", Types.BIGINT },
            { "targetSubProposalId", Types.BIGINT },
            { "percentage", Types.DOUBLE },
            { "creator", Types.BIGINT },
            { "createDate", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_PointsDistributionConfiguration (id_ LONG not null primary key,proposalId LONG,pointTypeId LONG,targetUserId LONG,targetSubProposalId LONG,percentage DOUBLE,creator LONG,createDate DATE null)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_PointsDistributionConfiguration";
    public static final String ORDER_BY_JPQL = " ORDER BY pointsDistributionConfiguration.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_PointsDistributionConfiguration.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.PointsDistributionConfiguration"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.PointsDistributionConfiguration"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.model.PointsDistributionConfiguration"),
            true);
    public static long POINTTYPEID_COLUMN_BITMASK = 1L;
    public static long PROPOSALID_COLUMN_BITMASK = 2L;
    public static long TARGETSUBPROPOSALID_COLUMN_BITMASK = 4L;
    public static long TARGETUSERID_COLUMN_BITMASK = 8L;
    public static long ID_COLUMN_BITMASK = 16L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.PointsDistributionConfiguration"));
    private static ClassLoader _classLoader = PointsDistributionConfiguration.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            PointsDistributionConfiguration.class
        };
    private long _id;
    private long _proposalId;
    private long _originalProposalId;
    private boolean _setOriginalProposalId;
    private long _pointTypeId;
    private long _originalPointTypeId;
    private boolean _setOriginalPointTypeId;
    private long _targetUserId;
    private String _targetUserUuid;
    private long _originalTargetUserId;
    private boolean _setOriginalTargetUserId;
    private long _targetSubProposalId;
    private long _originalTargetSubProposalId;
    private boolean _setOriginalTargetSubProposalId;
    private double _percentage;
    private long _creator;
    private Date _createDate;
    private long _columnBitmask;
    private PointsDistributionConfiguration _escapedModel;

    public PointsDistributionConfigurationModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static PointsDistributionConfiguration toModel(
        PointsDistributionConfigurationSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        PointsDistributionConfiguration model = new PointsDistributionConfigurationImpl();

        model.setId(soapModel.getId());
        model.setProposalId(soapModel.getProposalId());
        model.setPointTypeId(soapModel.getPointTypeId());
        model.setTargetUserId(soapModel.getTargetUserId());
        model.setTargetSubProposalId(soapModel.getTargetSubProposalId());
        model.setPercentage(soapModel.getPercentage());
        model.setCreator(soapModel.getCreator());
        model.setCreateDate(soapModel.getCreateDate());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<PointsDistributionConfiguration> toModels(
        PointsDistributionConfigurationSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<PointsDistributionConfiguration> models = new ArrayList<PointsDistributionConfiguration>(soapModels.length);

        for (PointsDistributionConfigurationSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return PointsDistributionConfiguration.class;
    }

    @Override
    public String getModelClassName() {
        return PointsDistributionConfiguration.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("proposalId", getProposalId());
        attributes.put("pointTypeId", getPointTypeId());
        attributes.put("targetUserId", getTargetUserId());
        attributes.put("targetSubProposalId", getTargetSubProposalId());
        attributes.put("percentage", getPercentage());
        attributes.put("creator", getCreator());
        attributes.put("createDate", getCreateDate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        Long proposalId = (Long) attributes.get("proposalId");

        if (proposalId != null) {
            setProposalId(proposalId);
        }

        Long pointTypeId = (Long) attributes.get("pointTypeId");

        if (pointTypeId != null) {
            setPointTypeId(pointTypeId);
        }

        Long targetUserId = (Long) attributes.get("targetUserId");

        if (targetUserId != null) {
            setTargetUserId(targetUserId);
        }

        Long targetSubProposalId = (Long) attributes.get("targetSubProposalId");

        if (targetSubProposalId != null) {
            setTargetSubProposalId(targetSubProposalId);
        }

        Double percentage = (Double) attributes.get("percentage");

        if (percentage != null) {
            setPercentage(percentage);
        }

        Long creator = (Long) attributes.get("creator");

        if (creator != null) {
            setCreator(creator);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }
    }

    @JSON
    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @JSON
    @Override
    public long getProposalId() {
        return _proposalId;
    }

    @Override
    public void setProposalId(long proposalId) {
        _columnBitmask |= PROPOSALID_COLUMN_BITMASK;

        if (!_setOriginalProposalId) {
            _setOriginalProposalId = true;

            _originalProposalId = _proposalId;
        }

        _proposalId = proposalId;
    }

    public long getOriginalProposalId() {
        return _originalProposalId;
    }

    @JSON
    @Override
    public long getPointTypeId() {
        return _pointTypeId;
    }

    @Override
    public void setPointTypeId(long pointTypeId) {
        _columnBitmask |= POINTTYPEID_COLUMN_BITMASK;

        if (!_setOriginalPointTypeId) {
            _setOriginalPointTypeId = true;

            _originalPointTypeId = _pointTypeId;
        }

        _pointTypeId = pointTypeId;
    }

    public long getOriginalPointTypeId() {
        return _originalPointTypeId;
    }

    @JSON
    @Override
    public long getTargetUserId() {
        return _targetUserId;
    }

    @Override
    public void setTargetUserId(long targetUserId) {
        _columnBitmask |= TARGETUSERID_COLUMN_BITMASK;

        if (!_setOriginalTargetUserId) {
            _setOriginalTargetUserId = true;

            _originalTargetUserId = _targetUserId;
        }

        _targetUserId = targetUserId;
    }

    @Override
    public String getTargetUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getTargetUserId(), "uuid",
            _targetUserUuid);
    }

    @Override
    public void setTargetUserUuid(String targetUserUuid) {
        _targetUserUuid = targetUserUuid;
    }

    public long getOriginalTargetUserId() {
        return _originalTargetUserId;
    }

    @JSON
    @Override
    public long getTargetSubProposalId() {
        return _targetSubProposalId;
    }

    @Override
    public void setTargetSubProposalId(long targetSubProposalId) {
        _columnBitmask |= TARGETSUBPROPOSALID_COLUMN_BITMASK;

        if (!_setOriginalTargetSubProposalId) {
            _setOriginalTargetSubProposalId = true;

            _originalTargetSubProposalId = _targetSubProposalId;
        }

        _targetSubProposalId = targetSubProposalId;
    }

    public long getOriginalTargetSubProposalId() {
        return _originalTargetSubProposalId;
    }

    @JSON
    @Override
    public double getPercentage() {
        return _percentage;
    }

    @Override
    public void setPercentage(double percentage) {
        _percentage = percentage;
    }

    @JSON
    @Override
    public long getCreator() {
        return _creator;
    }

    @Override
    public void setCreator(long creator) {
        _creator = creator;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            PointsDistributionConfiguration.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public PointsDistributionConfiguration toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (PointsDistributionConfiguration) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        PointsDistributionConfigurationImpl pointsDistributionConfigurationImpl = new PointsDistributionConfigurationImpl();

        pointsDistributionConfigurationImpl.setId(getId());
        pointsDistributionConfigurationImpl.setProposalId(getProposalId());
        pointsDistributionConfigurationImpl.setPointTypeId(getPointTypeId());
        pointsDistributionConfigurationImpl.setTargetUserId(getTargetUserId());
        pointsDistributionConfigurationImpl.setTargetSubProposalId(getTargetSubProposalId());
        pointsDistributionConfigurationImpl.setPercentage(getPercentage());
        pointsDistributionConfigurationImpl.setCreator(getCreator());
        pointsDistributionConfigurationImpl.setCreateDate(getCreateDate());

        pointsDistributionConfigurationImpl.resetOriginalValues();

        return pointsDistributionConfigurationImpl;
    }

    @Override
    public int compareTo(
        PointsDistributionConfiguration pointsDistributionConfiguration) {
        long primaryKey = pointsDistributionConfiguration.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof PointsDistributionConfiguration)) {
            return false;
        }

        PointsDistributionConfiguration pointsDistributionConfiguration = (PointsDistributionConfiguration) obj;

        long primaryKey = pointsDistributionConfiguration.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        PointsDistributionConfigurationModelImpl pointsDistributionConfigurationModelImpl =
            this;

        pointsDistributionConfigurationModelImpl._originalProposalId = pointsDistributionConfigurationModelImpl._proposalId;

        pointsDistributionConfigurationModelImpl._setOriginalProposalId = false;

        pointsDistributionConfigurationModelImpl._originalPointTypeId = pointsDistributionConfigurationModelImpl._pointTypeId;

        pointsDistributionConfigurationModelImpl._setOriginalPointTypeId = false;

        pointsDistributionConfigurationModelImpl._originalTargetUserId = pointsDistributionConfigurationModelImpl._targetUserId;

        pointsDistributionConfigurationModelImpl._setOriginalTargetUserId = false;

        pointsDistributionConfigurationModelImpl._originalTargetSubProposalId = pointsDistributionConfigurationModelImpl._targetSubProposalId;

        pointsDistributionConfigurationModelImpl._setOriginalTargetSubProposalId = false;

        pointsDistributionConfigurationModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<PointsDistributionConfiguration> toCacheModel() {
        PointsDistributionConfigurationCacheModel pointsDistributionConfigurationCacheModel =
            new PointsDistributionConfigurationCacheModel();

        pointsDistributionConfigurationCacheModel.id = getId();

        pointsDistributionConfigurationCacheModel.proposalId = getProposalId();

        pointsDistributionConfigurationCacheModel.pointTypeId = getPointTypeId();

        pointsDistributionConfigurationCacheModel.targetUserId = getTargetUserId();

        pointsDistributionConfigurationCacheModel.targetSubProposalId = getTargetSubProposalId();

        pointsDistributionConfigurationCacheModel.percentage = getPercentage();

        pointsDistributionConfigurationCacheModel.creator = getCreator();

        Date createDate = getCreateDate();

        if (createDate != null) {
            pointsDistributionConfigurationCacheModel.createDate = createDate.getTime();
        } else {
            pointsDistributionConfigurationCacheModel.createDate = Long.MIN_VALUE;
        }

        return pointsDistributionConfigurationCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(17);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", proposalId=");
        sb.append(getProposalId());
        sb.append(", pointTypeId=");
        sb.append(getPointTypeId());
        sb.append(", targetUserId=");
        sb.append(getTargetUserId());
        sb.append(", targetSubProposalId=");
        sb.append(getTargetSubProposalId());
        sb.append(", percentage=");
        sb.append(getPercentage());
        sb.append(", creator=");
        sb.append(getCreator());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(28);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.PointsDistributionConfiguration");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>proposalId</column-name><column-value><![CDATA[");
        sb.append(getProposalId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>pointTypeId</column-name><column-value><![CDATA[");
        sb.append(getPointTypeId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>targetUserId</column-name><column-value><![CDATA[");
        sb.append(getTargetUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>targetSubProposalId</column-name><column-value><![CDATA[");
        sb.append(getTargetSubProposalId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>percentage</column-name><column-value><![CDATA[");
        sb.append(getPercentage());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>creator</column-name><column-value><![CDATA[");
        sb.append(getCreator());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
