package com.ext.portlet.model.impl;

import com.ext.portlet.model.ImpactTemplateMaxFocusArea;
import com.ext.portlet.model.ImpactTemplateMaxFocusAreaModel;
import com.ext.portlet.model.ImpactTemplateMaxFocusAreaSoap;
import com.ext.portlet.service.persistence.ImpactTemplateMaxFocusAreaPK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ImpactTemplateMaxFocusArea service. Represents a row in the &quot;xcolab_ImpactTemplateMaxFocusArea&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.ImpactTemplateMaxFocusAreaModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ImpactTemplateMaxFocusAreaImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ImpactTemplateMaxFocusAreaImpl
 * @see com.ext.portlet.model.ImpactTemplateMaxFocusArea
 * @see com.ext.portlet.model.ImpactTemplateMaxFocusAreaModel
 * @generated
 */
@JSON(strict = true)
public class ImpactTemplateMaxFocusAreaModelImpl extends BaseModelImpl<ImpactTemplateMaxFocusArea>
    implements ImpactTemplateMaxFocusAreaModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a impact template max focus area model instance should use the {@link com.ext.portlet.model.ImpactTemplateMaxFocusArea} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_ImpactTemplateMaxFocusArea";
    public static final Object[][] TABLE_COLUMNS = {
            { "focusAreaListId", Types.BIGINT },
            { "focusAreaId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_ImpactTemplateMaxFocusArea (focusAreaListId LONG not null,focusAreaId LONG not null,primary key (focusAreaListId, focusAreaId))";
    public static final String TABLE_SQL_DROP = "drop table xcolab_ImpactTemplateMaxFocusArea";
    public static final String ORDER_BY_JPQL = " ORDER BY impactTemplateMaxFocusArea.id.focusAreaListId ASC, impactTemplateMaxFocusArea.id.focusAreaId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_ImpactTemplateMaxFocusArea.focusAreaListId ASC, xcolab_ImpactTemplateMaxFocusArea.focusAreaId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.ImpactTemplateMaxFocusArea"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.ImpactTemplateMaxFocusArea"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.model.ImpactTemplateMaxFocusArea"),
            true);
    public static long FOCUSAREALISTID_COLUMN_BITMASK = 1L;
    public static long FOCUSAREAID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.ImpactTemplateMaxFocusArea"));
    private static ClassLoader _classLoader = ImpactTemplateMaxFocusArea.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            ImpactTemplateMaxFocusArea.class
        };
    private long _focusAreaListId;
    private long _originalFocusAreaListId;
    private boolean _setOriginalFocusAreaListId;
    private long _focusAreaId;
    private long _columnBitmask;
    private ImpactTemplateMaxFocusArea _escapedModel;

    public ImpactTemplateMaxFocusAreaModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static ImpactTemplateMaxFocusArea toModel(
        ImpactTemplateMaxFocusAreaSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        ImpactTemplateMaxFocusArea model = new ImpactTemplateMaxFocusAreaImpl();

        model.setFocusAreaListId(soapModel.getFocusAreaListId());
        model.setFocusAreaId(soapModel.getFocusAreaId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<ImpactTemplateMaxFocusArea> toModels(
        ImpactTemplateMaxFocusAreaSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<ImpactTemplateMaxFocusArea> models = new ArrayList<ImpactTemplateMaxFocusArea>(soapModels.length);

        for (ImpactTemplateMaxFocusAreaSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public ImpactTemplateMaxFocusAreaPK getPrimaryKey() {
        return new ImpactTemplateMaxFocusAreaPK(_focusAreaListId, _focusAreaId);
    }

    @Override
    public void setPrimaryKey(ImpactTemplateMaxFocusAreaPK primaryKey) {
        setFocusAreaListId(primaryKey.focusAreaListId);
        setFocusAreaId(primaryKey.focusAreaId);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new ImpactTemplateMaxFocusAreaPK(_focusAreaListId, _focusAreaId);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((ImpactTemplateMaxFocusAreaPK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return ImpactTemplateMaxFocusArea.class;
    }

    @Override
    public String getModelClassName() {
        return ImpactTemplateMaxFocusArea.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("focusAreaListId", getFocusAreaListId());
        attributes.put("focusAreaId", getFocusAreaId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long focusAreaListId = (Long) attributes.get("focusAreaListId");

        if (focusAreaListId != null) {
            setFocusAreaListId(focusAreaListId);
        }

        Long focusAreaId = (Long) attributes.get("focusAreaId");

        if (focusAreaId != null) {
            setFocusAreaId(focusAreaId);
        }
    }

    @JSON
    @Override
    public long getFocusAreaListId() {
        return _focusAreaListId;
    }

    @Override
    public void setFocusAreaListId(long focusAreaListId) {
        _columnBitmask |= FOCUSAREALISTID_COLUMN_BITMASK;

        if (!_setOriginalFocusAreaListId) {
            _setOriginalFocusAreaListId = true;

            _originalFocusAreaListId = _focusAreaListId;
        }

        _focusAreaListId = focusAreaListId;
    }

    public long getOriginalFocusAreaListId() {
        return _originalFocusAreaListId;
    }

    @JSON
    @Override
    public long getFocusAreaId() {
        return _focusAreaId;
    }

    @Override
    public void setFocusAreaId(long focusAreaId) {
        _focusAreaId = focusAreaId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ImpactTemplateMaxFocusArea toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (ImpactTemplateMaxFocusArea) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ImpactTemplateMaxFocusAreaImpl impactTemplateMaxFocusAreaImpl = new ImpactTemplateMaxFocusAreaImpl();

        impactTemplateMaxFocusAreaImpl.setFocusAreaListId(getFocusAreaListId());
        impactTemplateMaxFocusAreaImpl.setFocusAreaId(getFocusAreaId());

        impactTemplateMaxFocusAreaImpl.resetOriginalValues();

        return impactTemplateMaxFocusAreaImpl;
    }

    @Override
    public int compareTo(ImpactTemplateMaxFocusArea impactTemplateMaxFocusArea) {
        ImpactTemplateMaxFocusAreaPK primaryKey = impactTemplateMaxFocusArea.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ImpactTemplateMaxFocusArea)) {
            return false;
        }

        ImpactTemplateMaxFocusArea impactTemplateMaxFocusArea = (ImpactTemplateMaxFocusArea) obj;

        ImpactTemplateMaxFocusAreaPK primaryKey = impactTemplateMaxFocusArea.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        ImpactTemplateMaxFocusAreaModelImpl impactTemplateMaxFocusAreaModelImpl = this;

        impactTemplateMaxFocusAreaModelImpl._originalFocusAreaListId = impactTemplateMaxFocusAreaModelImpl._focusAreaListId;

        impactTemplateMaxFocusAreaModelImpl._setOriginalFocusAreaListId = false;

        impactTemplateMaxFocusAreaModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<ImpactTemplateMaxFocusArea> toCacheModel() {
        ImpactTemplateMaxFocusAreaCacheModel impactTemplateMaxFocusAreaCacheModel =
            new ImpactTemplateMaxFocusAreaCacheModel();

        impactTemplateMaxFocusAreaCacheModel.focusAreaListId = getFocusAreaListId();

        impactTemplateMaxFocusAreaCacheModel.focusAreaId = getFocusAreaId();

        return impactTemplateMaxFocusAreaCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(5);

        sb.append("{focusAreaListId=");
        sb.append(getFocusAreaListId());
        sb.append(", focusAreaId=");
        sb.append(getFocusAreaId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(10);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.ImpactTemplateMaxFocusArea");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>focusAreaListId</column-name><column-value><![CDATA[");
        sb.append(getFocusAreaListId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>focusAreaId</column-name><column-value><![CDATA[");
        sb.append(getFocusAreaId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
