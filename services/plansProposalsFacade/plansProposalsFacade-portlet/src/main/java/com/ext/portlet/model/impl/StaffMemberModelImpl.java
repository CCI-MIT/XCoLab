package com.ext.portlet.model.impl;

import com.ext.portlet.model.StaffMember;
import com.ext.portlet.model.StaffMemberModel;
import com.ext.portlet.model.StaffMemberSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the StaffMember service. Represents a row in the &quot;xcolab_StaffMember&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.StaffMemberModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StaffMemberImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see StaffMemberImpl
 * @see com.ext.portlet.model.StaffMember
 * @see com.ext.portlet.model.StaffMemberModel
 * @generated
 */
@JSON(strict = true)
public class StaffMemberModelImpl extends BaseModelImpl<StaffMember>
    implements StaffMemberModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a staff member model instance should use the {@link com.ext.portlet.model.StaffMember} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_StaffMember";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "categoryId", Types.BIGINT },
            { "firstNames", Types.VARCHAR },
            { "lastName", Types.VARCHAR },
            { "url", Types.VARCHAR },
            { "photoUrl", Types.VARCHAR },
            { "sort", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_StaffMember (id_ LONG not null primary key,userId LONG,categoryId LONG,firstNames VARCHAR(75) null,lastName VARCHAR(75) null,url VARCHAR(75) null,photoUrl VARCHAR(75) null,sort INTEGER)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_StaffMember";
    public static final String ORDER_BY_JPQL = " ORDER BY staffMember.sort ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_StaffMember.sort ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.StaffMember"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.StaffMember"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.model.StaffMember"),
            true);
    public static long USERID_COLUMN_BITMASK = 1L;
    public static long SORT_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.StaffMember"));
    private static ClassLoader _classLoader = StaffMember.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            StaffMember.class
        };
    private long _id;
    private long _userId;
    private String _userUuid;
    private long _originalUserId;
    private boolean _setOriginalUserId;
    private long _categoryId;
    private String _firstNames;
    private String _lastName;
    private String _url;
    private String _photoUrl;
    private int _sort;
    private long _columnBitmask;
    private StaffMember _escapedModel;

    public StaffMemberModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static StaffMember toModel(StaffMemberSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        StaffMember model = new StaffMemberImpl();

        model.setId(soapModel.getId());
        model.setUserId(soapModel.getUserId());
        model.setCategoryId(soapModel.getCategoryId());
        model.setFirstNames(soapModel.getFirstNames());
        model.setLastName(soapModel.getLastName());
        model.setUrl(soapModel.getUrl());
        model.setPhotoUrl(soapModel.getPhotoUrl());
        model.setSort(soapModel.getSort());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<StaffMember> toModels(StaffMemberSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<StaffMember> models = new ArrayList<StaffMember>(soapModels.length);

        for (StaffMemberSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return StaffMember.class;
    }

    @Override
    public String getModelClassName() {
        return StaffMember.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("userId", getUserId());
        attributes.put("categoryId", getCategoryId());
        attributes.put("firstNames", getFirstNames());
        attributes.put("lastName", getLastName());
        attributes.put("url", getUrl());
        attributes.put("photoUrl", getPhotoUrl());
        attributes.put("sort", getSort());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Long categoryId = (Long) attributes.get("categoryId");

        if (categoryId != null) {
            setCategoryId(categoryId);
        }

        String firstNames = (String) attributes.get("firstNames");

        if (firstNames != null) {
            setFirstNames(firstNames);
        }

        String lastName = (String) attributes.get("lastName");

        if (lastName != null) {
            setLastName(lastName);
        }

        String url = (String) attributes.get("url");

        if (url != null) {
            setUrl(url);
        }

        String photoUrl = (String) attributes.get("photoUrl");

        if (photoUrl != null) {
            setPhotoUrl(photoUrl);
        }

        Integer sort = (Integer) attributes.get("sort");

        if (sort != null) {
            setSort(sort);
        }
    }

    @JSON
    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _columnBitmask |= USERID_COLUMN_BITMASK;

        if (!_setOriginalUserId) {
            _setOriginalUserId = true;

            _originalUserId = _userId;
        }

        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    public long getOriginalUserId() {
        return _originalUserId;
    }

    @JSON
    @Override
    public long getCategoryId() {
        return _categoryId;
    }

    @Override
    public void setCategoryId(long categoryId) {
        _categoryId = categoryId;
    }

    @JSON
    @Override
    public String getFirstNames() {
        if (_firstNames == null) {
            return StringPool.BLANK;
        } else {
            return _firstNames;
        }
    }

    @Override
    public void setFirstNames(String firstNames) {
        _firstNames = firstNames;
    }

    @JSON
    @Override
    public String getLastName() {
        if (_lastName == null) {
            return StringPool.BLANK;
        } else {
            return _lastName;
        }
    }

    @Override
    public void setLastName(String lastName) {
        _lastName = lastName;
    }

    @JSON
    @Override
    public String getUrl() {
        if (_url == null) {
            return StringPool.BLANK;
        } else {
            return _url;
        }
    }

    @Override
    public void setUrl(String url) {
        _url = url;
    }

    @JSON
    @Override
    public String getPhotoUrl() {
        if (_photoUrl == null) {
            return StringPool.BLANK;
        } else {
            return _photoUrl;
        }
    }

    @Override
    public void setPhotoUrl(String photoUrl) {
        _photoUrl = photoUrl;
    }

    @JSON
    @Override
    public int getSort() {
        return _sort;
    }

    @Override
    public void setSort(int sort) {
        _columnBitmask = -1L;

        _sort = sort;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            StaffMember.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public StaffMember toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (StaffMember) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        StaffMemberImpl staffMemberImpl = new StaffMemberImpl();

        staffMemberImpl.setId(getId());
        staffMemberImpl.setUserId(getUserId());
        staffMemberImpl.setCategoryId(getCategoryId());
        staffMemberImpl.setFirstNames(getFirstNames());
        staffMemberImpl.setLastName(getLastName());
        staffMemberImpl.setUrl(getUrl());
        staffMemberImpl.setPhotoUrl(getPhotoUrl());
        staffMemberImpl.setSort(getSort());

        staffMemberImpl.resetOriginalValues();

        return staffMemberImpl;
    }

    @Override
    public int compareTo(StaffMember staffMember) {
        int value = 0;

        if (getSort() < staffMember.getSort()) {
            value = -1;
        } else if (getSort() > staffMember.getSort()) {
            value = 1;
        } else {
            value = 0;
        }

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof StaffMember)) {
            return false;
        }

        StaffMember staffMember = (StaffMember) obj;

        long primaryKey = staffMember.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        StaffMemberModelImpl staffMemberModelImpl = this;

        staffMemberModelImpl._originalUserId = staffMemberModelImpl._userId;

        staffMemberModelImpl._setOriginalUserId = false;

        staffMemberModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<StaffMember> toCacheModel() {
        StaffMemberCacheModel staffMemberCacheModel = new StaffMemberCacheModel();

        staffMemberCacheModel.id = getId();

        staffMemberCacheModel.userId = getUserId();

        staffMemberCacheModel.categoryId = getCategoryId();

        staffMemberCacheModel.firstNames = getFirstNames();

        String firstNames = staffMemberCacheModel.firstNames;

        if ((firstNames != null) && (firstNames.length() == 0)) {
            staffMemberCacheModel.firstNames = null;
        }

        staffMemberCacheModel.lastName = getLastName();

        String lastName = staffMemberCacheModel.lastName;

        if ((lastName != null) && (lastName.length() == 0)) {
            staffMemberCacheModel.lastName = null;
        }

        staffMemberCacheModel.url = getUrl();

        String url = staffMemberCacheModel.url;

        if ((url != null) && (url.length() == 0)) {
            staffMemberCacheModel.url = null;
        }

        staffMemberCacheModel.photoUrl = getPhotoUrl();

        String photoUrl = staffMemberCacheModel.photoUrl;

        if ((photoUrl != null) && (photoUrl.length() == 0)) {
            staffMemberCacheModel.photoUrl = null;
        }

        staffMemberCacheModel.sort = getSort();

        return staffMemberCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(17);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", categoryId=");
        sb.append(getCategoryId());
        sb.append(", firstNames=");
        sb.append(getFirstNames());
        sb.append(", lastName=");
        sb.append(getLastName());
        sb.append(", url=");
        sb.append(getUrl());
        sb.append(", photoUrl=");
        sb.append(getPhotoUrl());
        sb.append(", sort=");
        sb.append(getSort());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(28);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.StaffMember");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>categoryId</column-name><column-value><![CDATA[");
        sb.append(getCategoryId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>firstNames</column-name><column-value><![CDATA[");
        sb.append(getFirstNames());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lastName</column-name><column-value><![CDATA[");
        sb.append(getLastName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>url</column-name><column-value><![CDATA[");
        sb.append(getUrl());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>photoUrl</column-name><column-value><![CDATA[");
        sb.append(getPhotoUrl());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sort</column-name><column-value><![CDATA[");
        sb.append(getSort());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
