package com.ext.portlet.contests.model.impl;

import com.ext.portlet.contests.model.ContestTeamMember;
import com.ext.portlet.contests.model.ContestTeamMemberModel;
import com.ext.portlet.contests.model.ContestTeamMemberSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.List;

/**
 * The base model implementation for the ContestTeamMember service. Represents a row in the &quot;Contests_ContestTeamMember&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.contests.model.ContestTeamMemberModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ContestTeamMemberImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ContestTeamMemberImpl
 * @see com.ext.portlet.contests.model.ContestTeamMember
 * @see com.ext.portlet.contests.model.ContestTeamMemberModel
 * @generated
 */
@JSON(strict = true)
public class ContestTeamMemberModelImpl extends BaseModelImpl<ContestTeamMember>
    implements ContestTeamMemberModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a contest team member model instance should use the {@link com.ext.portlet.contests.model.ContestTeamMember} interface instead.
     */
    public static final String TABLE_NAME = "Contests_ContestTeamMember";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "contestId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "role", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table Contests_ContestTeamMember (id_ LONG not null primary key,contestId LONG,userId LONG,role VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table Contests_ContestTeamMember";
    public static final String ORDER_BY_JPQL = " ORDER BY contestTeamMember.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Contests_ContestTeamMember.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.contests.model.ContestTeamMember"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.contests.model.ContestTeamMember"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.contests.model.ContestTeamMember"),
            true);
    public static long CONTESTID_COLUMN_BITMASK = 1L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.contests.model.ContestTeamMember"));
    private static ClassLoader _classLoader = ContestTeamMember.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            ContestTeamMember.class
        };
    private Long _id;
    private Long _contestId;
    private Long _originalContestId;
    private boolean _setOriginalContestId;
    private Long _userId;
    private String _role;
    private long _columnBitmask;
    private ContestTeamMember _escapedModelProxy;

    public ContestTeamMemberModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static ContestTeamMember toModel(ContestTeamMemberSoap soapModel) {
        ContestTeamMember model = new ContestTeamMemberImpl();

        model.setId(soapModel.getId());
        model.setContestId(soapModel.getContestId());
        model.setUserId(soapModel.getUserId());
        model.setRole(soapModel.getRole());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<ContestTeamMember> toModels(
        ContestTeamMemberSoap[] soapModels) {
        List<ContestTeamMember> models = new ArrayList<ContestTeamMember>(soapModels.length);

        for (ContestTeamMemberSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public Long getPrimaryKey() {
        return _id;
    }

    public void setPrimaryKey(Long primaryKey) {
        setId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_id);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return ContestTeamMember.class;
    }

    public String getModelClassName() {
        return ContestTeamMember.class.getName();
    }

    @JSON
    public Long getId() {
        return _id;
    }

    public void setId(Long id) {
        _columnBitmask = -1L;

        _id = id;
    }

    @JSON
    public Long getContestId() {
        return _contestId;
    }

    public void setContestId(Long contestId) {
        _columnBitmask |= CONTESTID_COLUMN_BITMASK;

        if (!_setOriginalContestId) {
            _setOriginalContestId = true;

            _originalContestId = _contestId;
        }

        _contestId = contestId;
    }

    public Long getOriginalContestId() {
        return _originalContestId;
    }

    @JSON
    public Long getUserId() {
        return _userId;
    }

    public void setUserId(Long userId) {
        _userId = userId;
    }

    @JSON
    public String getRole() {
        if (_role == null) {
            return StringPool.BLANK;
        } else {
            return _role;
        }
    }

    public void setRole(String role) {
        _role = role;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ContestTeamMember toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (ContestTeamMember) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public Object clone() {
        ContestTeamMemberImpl contestTeamMemberImpl = new ContestTeamMemberImpl();

        contestTeamMemberImpl.setId(getId());
        contestTeamMemberImpl.setContestId(getContestId());
        contestTeamMemberImpl.setUserId(getUserId());
        contestTeamMemberImpl.setRole(getRole());

        contestTeamMemberImpl.resetOriginalValues();

        return contestTeamMemberImpl;
    }

    public int compareTo(ContestTeamMember contestTeamMember) {
        int value = 0;

        if (getId() < contestTeamMember.getId()) {
            value = -1;
        } else if (getId() > contestTeamMember.getId()) {
            value = 1;
        } else {
            value = 0;
        }

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        ContestTeamMember contestTeamMember = null;

        try {
            contestTeamMember = (ContestTeamMember) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        Long primaryKey = contestTeamMember.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        ContestTeamMemberModelImpl contestTeamMemberModelImpl = this;

        contestTeamMemberModelImpl._originalContestId = contestTeamMemberModelImpl._contestId;

        contestTeamMemberModelImpl._setOriginalContestId = false;

        contestTeamMemberModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<ContestTeamMember> toCacheModel() {
        ContestTeamMemberCacheModel contestTeamMemberCacheModel = new ContestTeamMemberCacheModel();

        contestTeamMemberCacheModel.id = getId();

        contestTeamMemberCacheModel.contestId = getContestId();

        contestTeamMemberCacheModel.userId = getUserId();

        contestTeamMemberCacheModel.role = getRole();

        String role = contestTeamMemberCacheModel.role;

        if ((role != null) && (role.length() == 0)) {
            contestTeamMemberCacheModel.role = null;
        }

        return contestTeamMemberCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(9);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", contestId=");
        sb.append(getContestId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", role=");
        sb.append(getRole());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(16);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.contests.model.ContestTeamMember");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contestId</column-name><column-value><![CDATA[");
        sb.append(getContestId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>role</column-name><column-value><![CDATA[");
        sb.append(getRole());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
