package com.ext.portlet.model.impl;

import com.ext.portlet.model.SpamReport;
import com.ext.portlet.model.SpamReportModel;
import com.ext.portlet.model.SpamReportSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the SpamReport service. Represents a row in the &quot;xcolab_SpamReport&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.SpamReportModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SpamReportImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SpamReportImpl
 * @see com.ext.portlet.model.SpamReport
 * @see com.ext.portlet.model.SpamReportModel
 * @generated
 */
@JSON(strict = true)
public class SpamReportModelImpl extends BaseModelImpl<SpamReport>
    implements SpamReportModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a spam report model instance should use the {@link com.ext.portlet.model.SpamReport} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_SpamReport";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "spamUserId", Types.BIGINT },
            { "reporterUserId", Types.BIGINT },
            { "discussionMessageId", Types.BIGINT },
            { "isAdminReport", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_SpamReport (id_ LONG not null primary key,spamUserId LONG,reporterUserId LONG,discussionMessageId LONG,isAdminReport BOOLEAN)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_SpamReport";
    public static final String ORDER_BY_JPQL = " ORDER BY spamReport.id_ ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_SpamReport.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.SpamReport"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.SpamReport"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.model.SpamReport"),
            true);
    public static long DISCUSSIONMESSAGEID_COLUMN_BITMASK = 1L;
    public static long REPORTERUSERID_COLUMN_BITMASK = 2L;
    public static long SPAMUSERID_COLUMN_BITMASK = 4L;
    public static long ID__COLUMN_BITMASK = 8L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.SpamReport"));
    private static ClassLoader _classLoader = SpamReport.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            SpamReport.class
        };
    private long _id_;
    private long _spamUserId;
    private String _spamUserUuid;
    private long _originalSpamUserId;
    private boolean _setOriginalSpamUserId;
    private long _reporterUserId;
    private String _reporterUserUuid;
    private long _originalReporterUserId;
    private boolean _setOriginalReporterUserId;
    private long _discussionMessageId;
    private long _originalDiscussionMessageId;
    private boolean _setOriginalDiscussionMessageId;
    private boolean _isAdminReport;
    private long _columnBitmask;
    private SpamReport _escapedModel;

    public SpamReportModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static SpamReport toModel(SpamReportSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        SpamReport model = new SpamReportImpl();

        model.setId_(soapModel.getId_());
        model.setSpamUserId(soapModel.getSpamUserId());
        model.setReporterUserId(soapModel.getReporterUserId());
        model.setDiscussionMessageId(soapModel.getDiscussionMessageId());
        model.setIsAdminReport(soapModel.getIsAdminReport());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<SpamReport> toModels(SpamReportSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<SpamReport> models = new ArrayList<SpamReport>(soapModels.length);

        for (SpamReportSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _id_;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId_(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id_;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return SpamReport.class;
    }

    @Override
    public String getModelClassName() {
        return SpamReport.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id_", getId_());
        attributes.put("spamUserId", getSpamUserId());
        attributes.put("reporterUserId", getReporterUserId());
        attributes.put("discussionMessageId", getDiscussionMessageId());
        attributes.put("isAdminReport", getIsAdminReport());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id_ = (Long) attributes.get("id_");

        if (id_ != null) {
            setId_(id_);
        }

        Long spamUserId = (Long) attributes.get("spamUserId");

        if (spamUserId != null) {
            setSpamUserId(spamUserId);
        }

        Long reporterUserId = (Long) attributes.get("reporterUserId");

        if (reporterUserId != null) {
            setReporterUserId(reporterUserId);
        }

        Long discussionMessageId = (Long) attributes.get("discussionMessageId");

        if (discussionMessageId != null) {
            setDiscussionMessageId(discussionMessageId);
        }

        Boolean isAdminReport = (Boolean) attributes.get("isAdminReport");

        if (isAdminReport != null) {
            setIsAdminReport(isAdminReport);
        }
    }

    @JSON
    @Override
    public long getId_() {
        return _id_;
    }

    @Override
    public void setId_(long id_) {
        _id_ = id_;
    }

    @JSON
    @Override
    public long getSpamUserId() {
        return _spamUserId;
    }

    @Override
    public void setSpamUserId(long spamUserId) {
        _columnBitmask |= SPAMUSERID_COLUMN_BITMASK;

        if (!_setOriginalSpamUserId) {
            _setOriginalSpamUserId = true;

            _originalSpamUserId = _spamUserId;
        }

        _spamUserId = spamUserId;
    }

    @Override
    public String getSpamUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getSpamUserId(), "uuid", _spamUserUuid);
    }

    @Override
    public void setSpamUserUuid(String spamUserUuid) {
        _spamUserUuid = spamUserUuid;
    }

    public long getOriginalSpamUserId() {
        return _originalSpamUserId;
    }

    @JSON
    @Override
    public long getReporterUserId() {
        return _reporterUserId;
    }

    @Override
    public void setReporterUserId(long reporterUserId) {
        _columnBitmask |= REPORTERUSERID_COLUMN_BITMASK;

        if (!_setOriginalReporterUserId) {
            _setOriginalReporterUserId = true;

            _originalReporterUserId = _reporterUserId;
        }

        _reporterUserId = reporterUserId;
    }

    @Override
    public String getReporterUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getReporterUserId(), "uuid",
            _reporterUserUuid);
    }

    @Override
    public void setReporterUserUuid(String reporterUserUuid) {
        _reporterUserUuid = reporterUserUuid;
    }

    public long getOriginalReporterUserId() {
        return _originalReporterUserId;
    }

    @JSON
    @Override
    public long getDiscussionMessageId() {
        return _discussionMessageId;
    }

    @Override
    public void setDiscussionMessageId(long discussionMessageId) {
        _columnBitmask |= DISCUSSIONMESSAGEID_COLUMN_BITMASK;

        if (!_setOriginalDiscussionMessageId) {
            _setOriginalDiscussionMessageId = true;

            _originalDiscussionMessageId = _discussionMessageId;
        }

        _discussionMessageId = discussionMessageId;
    }

    public long getOriginalDiscussionMessageId() {
        return _originalDiscussionMessageId;
    }

    @JSON
    @Override
    public boolean getIsAdminReport() {
        return _isAdminReport;
    }

    @Override
    public boolean isIsAdminReport() {
        return _isAdminReport;
    }

    @Override
    public void setIsAdminReport(boolean isAdminReport) {
        _isAdminReport = isAdminReport;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            SpamReport.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public SpamReport toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (SpamReport) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        SpamReportImpl spamReportImpl = new SpamReportImpl();

        spamReportImpl.setId_(getId_());
        spamReportImpl.setSpamUserId(getSpamUserId());
        spamReportImpl.setReporterUserId(getReporterUserId());
        spamReportImpl.setDiscussionMessageId(getDiscussionMessageId());
        spamReportImpl.setIsAdminReport(getIsAdminReport());

        spamReportImpl.resetOriginalValues();

        return spamReportImpl;
    }

    @Override
    public int compareTo(SpamReport spamReport) {
        long primaryKey = spamReport.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof SpamReport)) {
            return false;
        }

        SpamReport spamReport = (SpamReport) obj;

        long primaryKey = spamReport.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        SpamReportModelImpl spamReportModelImpl = this;

        spamReportModelImpl._originalSpamUserId = spamReportModelImpl._spamUserId;

        spamReportModelImpl._setOriginalSpamUserId = false;

        spamReportModelImpl._originalReporterUserId = spamReportModelImpl._reporterUserId;

        spamReportModelImpl._setOriginalReporterUserId = false;

        spamReportModelImpl._originalDiscussionMessageId = spamReportModelImpl._discussionMessageId;

        spamReportModelImpl._setOriginalDiscussionMessageId = false;

        spamReportModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<SpamReport> toCacheModel() {
        SpamReportCacheModel spamReportCacheModel = new SpamReportCacheModel();

        spamReportCacheModel.id_ = getId_();

        spamReportCacheModel.spamUserId = getSpamUserId();

        spamReportCacheModel.reporterUserId = getReporterUserId();

        spamReportCacheModel.discussionMessageId = getDiscussionMessageId();

        spamReportCacheModel.isAdminReport = getIsAdminReport();

        return spamReportCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{id_=");
        sb.append(getId_());
        sb.append(", spamUserId=");
        sb.append(getSpamUserId());
        sb.append(", reporterUserId=");
        sb.append(getReporterUserId());
        sb.append(", discussionMessageId=");
        sb.append(getDiscussionMessageId());
        sb.append(", isAdminReport=");
        sb.append(getIsAdminReport());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.SpamReport");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id_</column-name><column-value><![CDATA[");
        sb.append(getId_());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>spamUserId</column-name><column-value><![CDATA[");
        sb.append(getSpamUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>reporterUserId</column-name><column-value><![CDATA[");
        sb.append(getReporterUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>discussionMessageId</column-name><column-value><![CDATA[");
        sb.append(getDiscussionMessageId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>isAdminReport</column-name><column-value><![CDATA[");
        sb.append(getIsAdminReport());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
