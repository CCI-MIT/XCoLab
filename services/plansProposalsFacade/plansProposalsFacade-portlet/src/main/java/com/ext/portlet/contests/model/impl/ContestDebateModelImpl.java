package com.ext.portlet.contests.model.impl;

import com.ext.portlet.contests.model.ContestDebate;
import com.ext.portlet.contests.model.ContestDebateModel;
import com.ext.portlet.contests.model.ContestDebateSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.List;

/**
 * The base model implementation for the ContestDebate service. Represents a row in the &quot;Contests_ContestDebate&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.contests.model.ContestDebateModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ContestDebateImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ContestDebateImpl
 * @see com.ext.portlet.contests.model.ContestDebate
 * @see com.ext.portlet.contests.model.ContestDebateModel
 * @generated
 */
@JSON(strict = true)
public class ContestDebateModelImpl extends BaseModelImpl<ContestDebate>
    implements ContestDebateModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a contest debate model instance should use the {@link com.ext.portlet.contests.model.ContestDebate} interface instead.
     */
    public static final String TABLE_NAME = "Contests_ContestDebate";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "debateId", Types.BIGINT },
            { "ContestPK", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table Contests_ContestDebate (id_ LONG not null primary key,debateId LONG,ContestPK LONG)";
    public static final String TABLE_SQL_DROP = "drop table Contests_ContestDebate";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.contests.model.ContestDebate"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.contests.model.ContestDebate"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.contests.model.ContestDebate"),
            true);
    public static long CONTESTPK_COLUMN_BITMASK = 1L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.contests.model.ContestDebate"));
    private static ClassLoader _classLoader = ContestDebate.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            ContestDebate.class
        };
    private Long _id;
    private Long _debateId;
    private Long _ContestPK;
    private Long _originalContestPK;
    private boolean _setOriginalContestPK;
    private long _columnBitmask;
    private ContestDebate _escapedModelProxy;

    public ContestDebateModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static ContestDebate toModel(ContestDebateSoap soapModel) {
        ContestDebate model = new ContestDebateImpl();

        model.setId(soapModel.getId());
        model.setDebateId(soapModel.getDebateId());
        model.setContestPK(soapModel.getContestPK());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<ContestDebate> toModels(ContestDebateSoap[] soapModels) {
        List<ContestDebate> models = new ArrayList<ContestDebate>(soapModels.length);

        for (ContestDebateSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public Long getPrimaryKey() {
        return _id;
    }

    public void setPrimaryKey(Long primaryKey) {
        setId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_id);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return ContestDebate.class;
    }

    public String getModelClassName() {
        return ContestDebate.class.getName();
    }

    @JSON
    public Long getId() {
        return _id;
    }

    public void setId(Long id) {
        _id = id;
    }

    @JSON
    public Long getDebateId() {
        return _debateId;
    }

    public void setDebateId(Long debateId) {
        _debateId = debateId;
    }

    @JSON
    public Long getContestPK() {
        return _ContestPK;
    }

    public void setContestPK(Long ContestPK) {
        _columnBitmask |= CONTESTPK_COLUMN_BITMASK;

        if (!_setOriginalContestPK) {
            _setOriginalContestPK = true;

            _originalContestPK = _ContestPK;
        }

        _ContestPK = ContestPK;
    }

    public Long getOriginalContestPK() {
        return _originalContestPK;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ContestDebate toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (ContestDebate) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public Object clone() {
        ContestDebateImpl contestDebateImpl = new ContestDebateImpl();

        contestDebateImpl.setId(getId());
        contestDebateImpl.setDebateId(getDebateId());
        contestDebateImpl.setContestPK(getContestPK());

        contestDebateImpl.resetOriginalValues();

        return contestDebateImpl;
    }

    public int compareTo(ContestDebate contestDebate) {
        Long primaryKey = contestDebate.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        ContestDebate contestDebate = null;

        try {
            contestDebate = (ContestDebate) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        Long primaryKey = contestDebate.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        ContestDebateModelImpl contestDebateModelImpl = this;

        contestDebateModelImpl._originalContestPK = contestDebateModelImpl._ContestPK;

        contestDebateModelImpl._setOriginalContestPK = false;

        contestDebateModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<ContestDebate> toCacheModel() {
        ContestDebateCacheModel contestDebateCacheModel = new ContestDebateCacheModel();

        contestDebateCacheModel.id = getId();

        contestDebateCacheModel.debateId = getDebateId();

        contestDebateCacheModel.ContestPK = getContestPK();

        return contestDebateCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", debateId=");
        sb.append(getDebateId());
        sb.append(", ContestPK=");
        sb.append(getContestPK());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.contests.model.ContestDebate");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>debateId</column-name><column-value><![CDATA[");
        sb.append(getDebateId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ContestPK</column-name><column-value><![CDATA[");
        sb.append(getContestPK());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
