package com.ext.portlet.model.impl;

import com.ext.portlet.model.PlanItemGroup;
import com.ext.portlet.model.PlanItemGroupModel;
import com.ext.portlet.model.PlanItemGroupSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.List;

/**
 * The base model implementation for the PlanItemGroup service. Represents a row in the &quot;xcolab_PlanItemGroup&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.PlanItemGroupModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PlanItemGroupImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PlanItemGroupImpl
 * @see com.ext.portlet.model.PlanItemGroup
 * @see com.ext.portlet.model.PlanItemGroupModel
 * @generated
 */
@JSON(strict = true)
public class PlanItemGroupModelImpl extends BaseModelImpl<PlanItemGroup>
    implements PlanItemGroupModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a plan item group model instance should use the {@link com.ext.portlet.model.PlanItemGroup} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_PlanItemGroup";
    public static final Object[][] TABLE_COLUMNS = {
            { "planId", Types.BIGINT },
            { "groupId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_PlanItemGroup (planId LONG not null primary key,groupId LONG)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_PlanItemGroup";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.PlanItemGroup"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.PlanItemGroup"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.model.PlanItemGroup"),
            true);
    public static long GROUPID_COLUMN_BITMASK = 1L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.PlanItemGroup"));
    private static ClassLoader _classLoader = PlanItemGroup.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            PlanItemGroup.class
        };
    private long _planId;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private transient ExpandoBridge _expandoBridge;
    private long _columnBitmask;
    private PlanItemGroup _escapedModelProxy;

    public PlanItemGroupModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static PlanItemGroup toModel(PlanItemGroupSoap soapModel) {
        PlanItemGroup model = new PlanItemGroupImpl();

        model.setPlanId(soapModel.getPlanId());
        model.setGroupId(soapModel.getGroupId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<PlanItemGroup> toModels(PlanItemGroupSoap[] soapModels) {
        List<PlanItemGroup> models = new ArrayList<PlanItemGroup>(soapModels.length);

        for (PlanItemGroupSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public long getPrimaryKey() {
        return _planId;
    }

    public void setPrimaryKey(long primaryKey) {
        setPlanId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_planId);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return PlanItemGroup.class;
    }

    public String getModelClassName() {
        return PlanItemGroup.class.getName();
    }

    @JSON
    public long getPlanId() {
        return _planId;
    }

    public void setPlanId(long planId) {
        _planId = planId;
    }

    @JSON
    public long getGroupId() {
        return _groupId;
    }

    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public PlanItemGroup toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (PlanItemGroup) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        if (_expandoBridge == null) {
            _expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
                    PlanItemGroup.class.getName(), getPrimaryKey());
        }

        return _expandoBridge;
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        getExpandoBridge().setAttributes(serviceContext);
    }

    @Override
    public Object clone() {
        PlanItemGroupImpl planItemGroupImpl = new PlanItemGroupImpl();

        planItemGroupImpl.setPlanId(getPlanId());
        planItemGroupImpl.setGroupId(getGroupId());

        planItemGroupImpl.resetOriginalValues();

        return planItemGroupImpl;
    }

    public int compareTo(PlanItemGroup planItemGroup) {
        long primaryKey = planItemGroup.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        PlanItemGroup planItemGroup = null;

        try {
            planItemGroup = (PlanItemGroup) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = planItemGroup.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        PlanItemGroupModelImpl planItemGroupModelImpl = this;

        planItemGroupModelImpl._originalGroupId = planItemGroupModelImpl._groupId;

        planItemGroupModelImpl._setOriginalGroupId = false;

        planItemGroupModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<PlanItemGroup> toCacheModel() {
        PlanItemGroupCacheModel planItemGroupCacheModel = new PlanItemGroupCacheModel();

        planItemGroupCacheModel.planId = getPlanId();

        planItemGroupCacheModel.groupId = getGroupId();

        return planItemGroupCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(5);

        sb.append("{planId=");
        sb.append(getPlanId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(10);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.PlanItemGroup");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>planId</column-name><column-value><![CDATA[");
        sb.append(getPlanId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
