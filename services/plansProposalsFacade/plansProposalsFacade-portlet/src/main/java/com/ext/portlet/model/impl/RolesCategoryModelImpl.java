package com.ext.portlet.model.impl;

import com.ext.portlet.model.RolesCategory;
import com.ext.portlet.model.RolesCategoryModel;
import com.ext.portlet.model.RolesCategorySoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the RolesCategory service. Represents a row in the &quot;xcolab_RolesCategory&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.RolesCategoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RolesCategoryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RolesCategoryImpl
 * @see com.ext.portlet.model.RolesCategory
 * @see com.ext.portlet.model.RolesCategoryModel
 * @generated
 */
@JSON(strict = true)
public class RolesCategoryModelImpl extends BaseModelImpl<RolesCategory>
    implements RolesCategoryModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a roles category model instance should use the {@link com.ext.portlet.model.RolesCategory} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_RolesCategory";
    public static final Object[][] TABLE_COLUMNS = {
            { "roleId", Types.BIGINT },
            { "categoryName", Types.VARCHAR },
            { "roleOrdinal", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_RolesCategory (roleId LONG not null primary key,categoryName VARCHAR(75) null,roleOrdinal INTEGER)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_RolesCategory";
    public static final String ORDER_BY_JPQL = " ORDER BY rolesCategory.roleId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_RolesCategory.roleId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.RolesCategory"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.RolesCategory"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.RolesCategory"));
    private static ClassLoader _classLoader = RolesCategory.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            RolesCategory.class
        };
    private long _roleId;
    private String _categoryName;
    private int _roleOrdinal;
    private RolesCategory _escapedModel;

    public RolesCategoryModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static RolesCategory toModel(RolesCategorySoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        RolesCategory model = new RolesCategoryImpl();

        model.setRoleId(soapModel.getRoleId());
        model.setCategoryName(soapModel.getCategoryName());
        model.setRoleOrdinal(soapModel.getRoleOrdinal());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<RolesCategory> toModels(RolesCategorySoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<RolesCategory> models = new ArrayList<RolesCategory>(soapModels.length);

        for (RolesCategorySoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _roleId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setRoleId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _roleId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return RolesCategory.class;
    }

    @Override
    public String getModelClassName() {
        return RolesCategory.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("roleId", getRoleId());
        attributes.put("categoryName", getCategoryName());
        attributes.put("roleOrdinal", getRoleOrdinal());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long roleId = (Long) attributes.get("roleId");

        if (roleId != null) {
            setRoleId(roleId);
        }

        String categoryName = (String) attributes.get("categoryName");

        if (categoryName != null) {
            setCategoryName(categoryName);
        }

        Integer roleOrdinal = (Integer) attributes.get("roleOrdinal");

        if (roleOrdinal != null) {
            setRoleOrdinal(roleOrdinal);
        }
    }

    @JSON
    @Override
    public long getRoleId() {
        return _roleId;
    }

    @Override
    public void setRoleId(long roleId) {
        _roleId = roleId;
    }

    @JSON
    @Override
    public String getCategoryName() {
        if (_categoryName == null) {
            return StringPool.BLANK;
        } else {
            return _categoryName;
        }
    }

    @Override
    public void setCategoryName(String categoryName) {
        _categoryName = categoryName;
    }

    @JSON
    @Override
    public int getRoleOrdinal() {
        return _roleOrdinal;
    }

    @Override
    public void setRoleOrdinal(int roleOrdinal) {
        _roleOrdinal = roleOrdinal;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            RolesCategory.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public RolesCategory toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (RolesCategory) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        RolesCategoryImpl rolesCategoryImpl = new RolesCategoryImpl();

        rolesCategoryImpl.setRoleId(getRoleId());
        rolesCategoryImpl.setCategoryName(getCategoryName());
        rolesCategoryImpl.setRoleOrdinal(getRoleOrdinal());

        rolesCategoryImpl.resetOriginalValues();

        return rolesCategoryImpl;
    }

    @Override
    public int compareTo(RolesCategory rolesCategory) {
        long primaryKey = rolesCategory.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof RolesCategory)) {
            return false;
        }

        RolesCategory rolesCategory = (RolesCategory) obj;

        long primaryKey = rolesCategory.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<RolesCategory> toCacheModel() {
        RolesCategoryCacheModel rolesCategoryCacheModel = new RolesCategoryCacheModel();

        rolesCategoryCacheModel.roleId = getRoleId();

        rolesCategoryCacheModel.categoryName = getCategoryName();

        String categoryName = rolesCategoryCacheModel.categoryName;

        if ((categoryName != null) && (categoryName.length() == 0)) {
            rolesCategoryCacheModel.categoryName = null;
        }

        rolesCategoryCacheModel.roleOrdinal = getRoleOrdinal();

        return rolesCategoryCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{roleId=");
        sb.append(getRoleId());
        sb.append(", categoryName=");
        sb.append(getCategoryName());
        sb.append(", roleOrdinal=");
        sb.append(getRoleOrdinal());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.RolesCategory");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>roleId</column-name><column-value><![CDATA[");
        sb.append(getRoleId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>categoryName</column-name><column-value><![CDATA[");
        sb.append(getCategoryName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>roleOrdinal</column-name><column-value><![CDATA[");
        sb.append(getRoleOrdinal());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
