package com.ext.portlet.model.impl;

import com.ext.portlet.model.ModelGlobalPreference;
import com.ext.portlet.model.ModelGlobalPreferenceModel;
import com.ext.portlet.model.ModelGlobalPreferenceSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ModelGlobalPreference service. Represents a row in the &quot;xcolab_ModelGlobalPreference&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.ModelGlobalPreferenceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ModelGlobalPreferenceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ModelGlobalPreferenceImpl
 * @see com.ext.portlet.model.ModelGlobalPreference
 * @see com.ext.portlet.model.ModelGlobalPreferenceModel
 * @generated
 */
@JSON(strict = true)
public class ModelGlobalPreferenceModelImpl extends BaseModelImpl<ModelGlobalPreference>
    implements ModelGlobalPreferenceModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a model global preference model instance should use the {@link com.ext.portlet.model.ModelGlobalPreference} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_ModelGlobalPreference";
    public static final Object[][] TABLE_COLUMNS = {
            { "modelGlobalPreferencePK", Types.BIGINT },
            { "modelId", Types.BIGINT },
            { "visible", Types.BOOLEAN },
            { "weight", Types.INTEGER },
            { "expertEvaluationPageId", Types.BIGINT },
            { "modelCategoryId", Types.BIGINT },
            { "usesCustomInputs", Types.BOOLEAN },
            { "customInputsDefinition", Types.CLOB }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_ModelGlobalPreference (modelGlobalPreferencePK LONG not null primary key,modelId LONG,visible BOOLEAN,weight INTEGER,expertEvaluationPageId LONG,modelCategoryId LONG,usesCustomInputs BOOLEAN,customInputsDefinition TEXT null)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_ModelGlobalPreference";
    public static final String ORDER_BY_JPQL = " ORDER BY modelGlobalPreference.modelGlobalPreferencePK ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_ModelGlobalPreference.modelGlobalPreferencePK ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.ModelGlobalPreference"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.ModelGlobalPreference"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.model.ModelGlobalPreference"),
            true);
    public static long MODELCATEGORYID_COLUMN_BITMASK = 1L;
    public static long MODELID_COLUMN_BITMASK = 2L;
    public static long MODELGLOBALPREFERENCEPK_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.ModelGlobalPreference"));
    private static ClassLoader _classLoader = ModelGlobalPreference.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            ModelGlobalPreference.class
        };
    private long _modelGlobalPreferencePK;
    private long _modelId;
    private long _originalModelId;
    private boolean _setOriginalModelId;
    private boolean _visible;
    private int _weight;
    private long _expertEvaluationPageId;
    private long _modelCategoryId;
    private long _originalModelCategoryId;
    private boolean _setOriginalModelCategoryId;
    private boolean _usesCustomInputs;
    private String _customInputsDefinition;
    private long _columnBitmask;
    private ModelGlobalPreference _escapedModel;

    public ModelGlobalPreferenceModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static ModelGlobalPreference toModel(
        ModelGlobalPreferenceSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        ModelGlobalPreference model = new ModelGlobalPreferenceImpl();

        model.setModelGlobalPreferencePK(soapModel.getModelGlobalPreferencePK());
        model.setModelId(soapModel.getModelId());
        model.setVisible(soapModel.getVisible());
        model.setWeight(soapModel.getWeight());
        model.setExpertEvaluationPageId(soapModel.getExpertEvaluationPageId());
        model.setModelCategoryId(soapModel.getModelCategoryId());
        model.setUsesCustomInputs(soapModel.getUsesCustomInputs());
        model.setCustomInputsDefinition(soapModel.getCustomInputsDefinition());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<ModelGlobalPreference> toModels(
        ModelGlobalPreferenceSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<ModelGlobalPreference> models = new ArrayList<ModelGlobalPreference>(soapModels.length);

        for (ModelGlobalPreferenceSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _modelGlobalPreferencePK;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setModelGlobalPreferencePK(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _modelGlobalPreferencePK;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return ModelGlobalPreference.class;
    }

    @Override
    public String getModelClassName() {
        return ModelGlobalPreference.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("modelGlobalPreferencePK", getModelGlobalPreferencePK());
        attributes.put("modelId", getModelId());
        attributes.put("visible", getVisible());
        attributes.put("weight", getWeight());
        attributes.put("expertEvaluationPageId", getExpertEvaluationPageId());
        attributes.put("modelCategoryId", getModelCategoryId());
        attributes.put("usesCustomInputs", getUsesCustomInputs());
        attributes.put("customInputsDefinition", getCustomInputsDefinition());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long modelGlobalPreferencePK = (Long) attributes.get(
                "modelGlobalPreferencePK");

        if (modelGlobalPreferencePK != null) {
            setModelGlobalPreferencePK(modelGlobalPreferencePK);
        }

        Long modelId = (Long) attributes.get("modelId");

        if (modelId != null) {
            setModelId(modelId);
        }

        Boolean visible = (Boolean) attributes.get("visible");

        if (visible != null) {
            setVisible(visible);
        }

        Integer weight = (Integer) attributes.get("weight");

        if (weight != null) {
            setWeight(weight);
        }

        Long expertEvaluationPageId = (Long) attributes.get(
                "expertEvaluationPageId");

        if (expertEvaluationPageId != null) {
            setExpertEvaluationPageId(expertEvaluationPageId);
        }

        Long modelCategoryId = (Long) attributes.get("modelCategoryId");

        if (modelCategoryId != null) {
            setModelCategoryId(modelCategoryId);
        }

        Boolean usesCustomInputs = (Boolean) attributes.get("usesCustomInputs");

        if (usesCustomInputs != null) {
            setUsesCustomInputs(usesCustomInputs);
        }

        String customInputsDefinition = (String) attributes.get(
                "customInputsDefinition");

        if (customInputsDefinition != null) {
            setCustomInputsDefinition(customInputsDefinition);
        }
    }

    @JSON
    @Override
    public long getModelGlobalPreferencePK() {
        return _modelGlobalPreferencePK;
    }

    @Override
    public void setModelGlobalPreferencePK(long modelGlobalPreferencePK) {
        _modelGlobalPreferencePK = modelGlobalPreferencePK;
    }

    @JSON
    @Override
    public long getModelId() {
        return _modelId;
    }

    @Override
    public void setModelId(long modelId) {
        _columnBitmask |= MODELID_COLUMN_BITMASK;

        if (!_setOriginalModelId) {
            _setOriginalModelId = true;

            _originalModelId = _modelId;
        }

        _modelId = modelId;
    }

    public long getOriginalModelId() {
        return _originalModelId;
    }

    @JSON
    @Override
    public boolean getVisible() {
        return _visible;
    }

    @Override
    public boolean isVisible() {
        return _visible;
    }

    @Override
    public void setVisible(boolean visible) {
        _visible = visible;
    }

    @JSON
    @Override
    public int getWeight() {
        return _weight;
    }

    @Override
    public void setWeight(int weight) {
        _weight = weight;
    }

    @JSON
    @Override
    public long getExpertEvaluationPageId() {
        return _expertEvaluationPageId;
    }

    @Override
    public void setExpertEvaluationPageId(long expertEvaluationPageId) {
        _expertEvaluationPageId = expertEvaluationPageId;
    }

    @JSON
    @Override
    public long getModelCategoryId() {
        return _modelCategoryId;
    }

    @Override
    public void setModelCategoryId(long modelCategoryId) {
        _columnBitmask |= MODELCATEGORYID_COLUMN_BITMASK;

        if (!_setOriginalModelCategoryId) {
            _setOriginalModelCategoryId = true;

            _originalModelCategoryId = _modelCategoryId;
        }

        _modelCategoryId = modelCategoryId;
    }

    public long getOriginalModelCategoryId() {
        return _originalModelCategoryId;
    }

    @JSON
    @Override
    public boolean getUsesCustomInputs() {
        return _usesCustomInputs;
    }

    @Override
    public boolean isUsesCustomInputs() {
        return _usesCustomInputs;
    }

    @Override
    public void setUsesCustomInputs(boolean usesCustomInputs) {
        _usesCustomInputs = usesCustomInputs;
    }

    @JSON
    @Override
    public String getCustomInputsDefinition() {
        if (_customInputsDefinition == null) {
            return StringPool.BLANK;
        } else {
            return _customInputsDefinition;
        }
    }

    @Override
    public void setCustomInputsDefinition(String customInputsDefinition) {
        _customInputsDefinition = customInputsDefinition;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            ModelGlobalPreference.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public ModelGlobalPreference toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (ModelGlobalPreference) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ModelGlobalPreferenceImpl modelGlobalPreferenceImpl = new ModelGlobalPreferenceImpl();

        modelGlobalPreferenceImpl.setModelGlobalPreferencePK(getModelGlobalPreferencePK());
        modelGlobalPreferenceImpl.setModelId(getModelId());
        modelGlobalPreferenceImpl.setVisible(getVisible());
        modelGlobalPreferenceImpl.setWeight(getWeight());
        modelGlobalPreferenceImpl.setExpertEvaluationPageId(getExpertEvaluationPageId());
        modelGlobalPreferenceImpl.setModelCategoryId(getModelCategoryId());
        modelGlobalPreferenceImpl.setUsesCustomInputs(getUsesCustomInputs());
        modelGlobalPreferenceImpl.setCustomInputsDefinition(getCustomInputsDefinition());

        modelGlobalPreferenceImpl.resetOriginalValues();

        return modelGlobalPreferenceImpl;
    }

    @Override
    public int compareTo(ModelGlobalPreference modelGlobalPreference) {
        long primaryKey = modelGlobalPreference.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ModelGlobalPreference)) {
            return false;
        }

        ModelGlobalPreference modelGlobalPreference = (ModelGlobalPreference) obj;

        long primaryKey = modelGlobalPreference.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        ModelGlobalPreferenceModelImpl modelGlobalPreferenceModelImpl = this;

        modelGlobalPreferenceModelImpl._originalModelId = modelGlobalPreferenceModelImpl._modelId;

        modelGlobalPreferenceModelImpl._setOriginalModelId = false;

        modelGlobalPreferenceModelImpl._originalModelCategoryId = modelGlobalPreferenceModelImpl._modelCategoryId;

        modelGlobalPreferenceModelImpl._setOriginalModelCategoryId = false;

        modelGlobalPreferenceModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<ModelGlobalPreference> toCacheModel() {
        ModelGlobalPreferenceCacheModel modelGlobalPreferenceCacheModel = new ModelGlobalPreferenceCacheModel();

        modelGlobalPreferenceCacheModel.modelGlobalPreferencePK = getModelGlobalPreferencePK();

        modelGlobalPreferenceCacheModel.modelId = getModelId();

        modelGlobalPreferenceCacheModel.visible = getVisible();

        modelGlobalPreferenceCacheModel.weight = getWeight();

        modelGlobalPreferenceCacheModel.expertEvaluationPageId = getExpertEvaluationPageId();

        modelGlobalPreferenceCacheModel.modelCategoryId = getModelCategoryId();

        modelGlobalPreferenceCacheModel.usesCustomInputs = getUsesCustomInputs();

        modelGlobalPreferenceCacheModel.customInputsDefinition = getCustomInputsDefinition();

        String customInputsDefinition = modelGlobalPreferenceCacheModel.customInputsDefinition;

        if ((customInputsDefinition != null) &&
                (customInputsDefinition.length() == 0)) {
            modelGlobalPreferenceCacheModel.customInputsDefinition = null;
        }

        return modelGlobalPreferenceCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(17);

        sb.append("{modelGlobalPreferencePK=");
        sb.append(getModelGlobalPreferencePK());
        sb.append(", modelId=");
        sb.append(getModelId());
        sb.append(", visible=");
        sb.append(getVisible());
        sb.append(", weight=");
        sb.append(getWeight());
        sb.append(", expertEvaluationPageId=");
        sb.append(getExpertEvaluationPageId());
        sb.append(", modelCategoryId=");
        sb.append(getModelCategoryId());
        sb.append(", usesCustomInputs=");
        sb.append(getUsesCustomInputs());
        sb.append(", customInputsDefinition=");
        sb.append(getCustomInputsDefinition());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(28);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.ModelGlobalPreference");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>modelGlobalPreferencePK</column-name><column-value><![CDATA[");
        sb.append(getModelGlobalPreferencePK());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modelId</column-name><column-value><![CDATA[");
        sb.append(getModelId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>visible</column-name><column-value><![CDATA[");
        sb.append(getVisible());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>weight</column-name><column-value><![CDATA[");
        sb.append(getWeight());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>expertEvaluationPageId</column-name><column-value><![CDATA[");
        sb.append(getExpertEvaluationPageId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modelCategoryId</column-name><column-value><![CDATA[");
        sb.append(getModelCategoryId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>usesCustomInputs</column-name><column-value><![CDATA[");
        sb.append(getUsesCustomInputs());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>customInputsDefinition</column-name><column-value><![CDATA[");
        sb.append(getCustomInputsDefinition());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
