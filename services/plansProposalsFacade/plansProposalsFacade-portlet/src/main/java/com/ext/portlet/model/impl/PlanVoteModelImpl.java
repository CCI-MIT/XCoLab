package com.ext.portlet.model.impl;

import com.ext.portlet.model.PlanVote;
import com.ext.portlet.model.PlanVoteModel;
import com.ext.portlet.model.PlanVoteSoap;
import com.ext.portlet.service.persistence.PlanVotePK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.util.PortalUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the PlanVote service. Represents a row in the &quot;xcolab_PlanVote&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.PlanVoteModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PlanVoteImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PlanVoteImpl
 * @see com.ext.portlet.model.PlanVote
 * @see com.ext.portlet.model.PlanVoteModel
 * @generated
 */
@JSON(strict = true)
public class PlanVoteModelImpl extends BaseModelImpl<PlanVote>
    implements PlanVoteModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a plan vote model instance should use the {@link com.ext.portlet.model.PlanVote} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_PlanVote";
    public static final Object[][] TABLE_COLUMNS = {
            { "userId", Types.BIGINT },
            { "contestId", Types.BIGINT },
            { "planId", Types.BIGINT },
            { "createDate", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_PlanVote (userId LONG not null,contestId LONG not null,planId LONG,createDate DATE null,primary key (userId, contestId))";
    public static final String TABLE_SQL_DROP = "drop table xcolab_PlanVote";
    public static final String ORDER_BY_JPQL = " ORDER BY planVote.id.userId ASC, planVote.id.contestId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_PlanVote.userId ASC, xcolab_PlanVote.contestId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.PlanVote"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.PlanVote"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.model.PlanVote"),
            true);
    public static long CONTESTID_COLUMN_BITMASK = 1L;
    public static long PLANID_COLUMN_BITMASK = 2L;
    public static long USERID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.PlanVote"));
    private static ClassLoader _classLoader = PlanVote.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            PlanVote.class
        };
    private long _userId;
    private String _userUuid;
    private long _originalUserId;
    private boolean _setOriginalUserId;
    private long _contestId;
    private long _originalContestId;
    private boolean _setOriginalContestId;
    private long _planId;
    private long _originalPlanId;
    private boolean _setOriginalPlanId;
    private Date _createDate;
    private long _columnBitmask;
    private PlanVote _escapedModel;

    public PlanVoteModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static PlanVote toModel(PlanVoteSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        PlanVote model = new PlanVoteImpl();

        model.setUserId(soapModel.getUserId());
        model.setContestId(soapModel.getContestId());
        model.setPlanId(soapModel.getPlanId());
        model.setCreateDate(soapModel.getCreateDate());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<PlanVote> toModels(PlanVoteSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<PlanVote> models = new ArrayList<PlanVote>(soapModels.length);

        for (PlanVoteSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public PlanVotePK getPrimaryKey() {
        return new PlanVotePK(_userId, _contestId);
    }

    @Override
    public void setPrimaryKey(PlanVotePK primaryKey) {
        setUserId(primaryKey.userId);
        setContestId(primaryKey.contestId);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new PlanVotePK(_userId, _contestId);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((PlanVotePK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return PlanVote.class;
    }

    @Override
    public String getModelClassName() {
        return PlanVote.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("userId", getUserId());
        attributes.put("contestId", getContestId());
        attributes.put("planId", getPlanId());
        attributes.put("createDate", getCreateDate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Long contestId = (Long) attributes.get("contestId");

        if (contestId != null) {
            setContestId(contestId);
        }

        Long planId = (Long) attributes.get("planId");

        if (planId != null) {
            setPlanId(planId);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _columnBitmask |= USERID_COLUMN_BITMASK;

        if (!_setOriginalUserId) {
            _setOriginalUserId = true;

            _originalUserId = _userId;
        }

        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    public long getOriginalUserId() {
        return _originalUserId;
    }

    @JSON
    @Override
    public long getContestId() {
        return _contestId;
    }

    @Override
    public void setContestId(long contestId) {
        _columnBitmask |= CONTESTID_COLUMN_BITMASK;

        if (!_setOriginalContestId) {
            _setOriginalContestId = true;

            _originalContestId = _contestId;
        }

        _contestId = contestId;
    }

    public long getOriginalContestId() {
        return _originalContestId;
    }

    @JSON
    @Override
    public long getPlanId() {
        return _planId;
    }

    @Override
    public void setPlanId(long planId) {
        _columnBitmask |= PLANID_COLUMN_BITMASK;

        if (!_setOriginalPlanId) {
            _setOriginalPlanId = true;

            _originalPlanId = _planId;
        }

        _planId = planId;
    }

    public long getOriginalPlanId() {
        return _originalPlanId;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public PlanVote toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (PlanVote) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        PlanVoteImpl planVoteImpl = new PlanVoteImpl();

        planVoteImpl.setUserId(getUserId());
        planVoteImpl.setContestId(getContestId());
        planVoteImpl.setPlanId(getPlanId());
        planVoteImpl.setCreateDate(getCreateDate());

        planVoteImpl.resetOriginalValues();

        return planVoteImpl;
    }

    @Override
    public int compareTo(PlanVote planVote) {
        PlanVotePK primaryKey = planVote.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof PlanVote)) {
            return false;
        }

        PlanVote planVote = (PlanVote) obj;

        PlanVotePK primaryKey = planVote.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        PlanVoteModelImpl planVoteModelImpl = this;

        planVoteModelImpl._originalUserId = planVoteModelImpl._userId;

        planVoteModelImpl._setOriginalUserId = false;

        planVoteModelImpl._originalContestId = planVoteModelImpl._contestId;

        planVoteModelImpl._setOriginalContestId = false;

        planVoteModelImpl._originalPlanId = planVoteModelImpl._planId;

        planVoteModelImpl._setOriginalPlanId = false;

        planVoteModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<PlanVote> toCacheModel() {
        PlanVoteCacheModel planVoteCacheModel = new PlanVoteCacheModel();

        planVoteCacheModel.userId = getUserId();

        planVoteCacheModel.contestId = getContestId();

        planVoteCacheModel.planId = getPlanId();

        Date createDate = getCreateDate();

        if (createDate != null) {
            planVoteCacheModel.createDate = createDate.getTime();
        } else {
            planVoteCacheModel.createDate = Long.MIN_VALUE;
        }

        return planVoteCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(9);

        sb.append("{userId=");
        sb.append(getUserId());
        sb.append(", contestId=");
        sb.append(getContestId());
        sb.append(", planId=");
        sb.append(getPlanId());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(16);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.PlanVote");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contestId</column-name><column-value><![CDATA[");
        sb.append(getContestId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>planId</column-name><column-value><![CDATA[");
        sb.append(getPlanId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
