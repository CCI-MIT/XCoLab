package com.ext.portlet.model.impl;

import com.ext.portlet.model.ImpactTemplateSeries;
import com.ext.portlet.model.ImpactTemplateSeriesModel;
import com.ext.portlet.model.ImpactTemplateSeriesSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ImpactTemplateSeries service. Represents a row in the &quot;xcolab_ImpactTemplateSeries&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.ImpactTemplateSeriesModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ImpactTemplateSeriesImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ImpactTemplateSeriesImpl
 * @see com.ext.portlet.model.ImpactTemplateSeries
 * @see com.ext.portlet.model.ImpactTemplateSeriesModel
 * @generated
 */
@JSON(strict = true)
public class ImpactTemplateSeriesModelImpl extends BaseModelImpl<ImpactTemplateSeries>
    implements ImpactTemplateSeriesModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a impact template series model instance should use the {@link com.ext.portlet.model.ImpactTemplateSeries} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_ImpactTemplateSeries";
    public static final Object[][] TABLE_COLUMNS = {
            { "seriesId", Types.BIGINT },
            { "iterationId", Types.BIGINT },
            { "name", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_ImpactTemplateSeries (seriesId LONG not null primary key,iterationId LONG,name VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_ImpactTemplateSeries";
    public static final String ORDER_BY_JPQL = " ORDER BY impactTemplateSeries.seriesId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_ImpactTemplateSeries.seriesId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.ImpactTemplateSeries"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.ImpactTemplateSeries"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.ImpactTemplateSeries"));
    private static ClassLoader _classLoader = ImpactTemplateSeries.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            ImpactTemplateSeries.class
        };
    private long _seriesId;
    private long _iterationId;
    private String _name;
    private ImpactTemplateSeries _escapedModel;

    public ImpactTemplateSeriesModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static ImpactTemplateSeries toModel(
        ImpactTemplateSeriesSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        ImpactTemplateSeries model = new ImpactTemplateSeriesImpl();

        model.setSeriesId(soapModel.getSeriesId());
        model.setIterationId(soapModel.getIterationId());
        model.setName(soapModel.getName());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<ImpactTemplateSeries> toModels(
        ImpactTemplateSeriesSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<ImpactTemplateSeries> models = new ArrayList<ImpactTemplateSeries>(soapModels.length);

        for (ImpactTemplateSeriesSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _seriesId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setSeriesId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _seriesId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return ImpactTemplateSeries.class;
    }

    @Override
    public String getModelClassName() {
        return ImpactTemplateSeries.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("seriesId", getSeriesId());
        attributes.put("iterationId", getIterationId());
        attributes.put("name", getName());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long seriesId = (Long) attributes.get("seriesId");

        if (seriesId != null) {
            setSeriesId(seriesId);
        }

        Long iterationId = (Long) attributes.get("iterationId");

        if (iterationId != null) {
            setIterationId(iterationId);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }
    }

    @JSON
    @Override
    public long getSeriesId() {
        return _seriesId;
    }

    @Override
    public void setSeriesId(long seriesId) {
        _seriesId = seriesId;
    }

    @JSON
    @Override
    public long getIterationId() {
        return _iterationId;
    }

    @Override
    public void setIterationId(long iterationId) {
        _iterationId = iterationId;
    }

    @JSON
    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _name = name;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            ImpactTemplateSeries.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public ImpactTemplateSeries toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (ImpactTemplateSeries) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ImpactTemplateSeriesImpl impactTemplateSeriesImpl = new ImpactTemplateSeriesImpl();

        impactTemplateSeriesImpl.setSeriesId(getSeriesId());
        impactTemplateSeriesImpl.setIterationId(getIterationId());
        impactTemplateSeriesImpl.setName(getName());

        impactTemplateSeriesImpl.resetOriginalValues();

        return impactTemplateSeriesImpl;
    }

    @Override
    public int compareTo(ImpactTemplateSeries impactTemplateSeries) {
        long primaryKey = impactTemplateSeries.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ImpactTemplateSeries)) {
            return false;
        }

        ImpactTemplateSeries impactTemplateSeries = (ImpactTemplateSeries) obj;

        long primaryKey = impactTemplateSeries.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<ImpactTemplateSeries> toCacheModel() {
        ImpactTemplateSeriesCacheModel impactTemplateSeriesCacheModel = new ImpactTemplateSeriesCacheModel();

        impactTemplateSeriesCacheModel.seriesId = getSeriesId();

        impactTemplateSeriesCacheModel.iterationId = getIterationId();

        impactTemplateSeriesCacheModel.name = getName();

        String name = impactTemplateSeriesCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            impactTemplateSeriesCacheModel.name = null;
        }

        return impactTemplateSeriesCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{seriesId=");
        sb.append(getSeriesId());
        sb.append(", iterationId=");
        sb.append(getIterationId());
        sb.append(", name=");
        sb.append(getName());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.ImpactTemplateSeries");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>seriesId</column-name><column-value><![CDATA[");
        sb.append(getSeriesId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>iterationId</column-name><column-value><![CDATA[");
        sb.append(getIterationId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
