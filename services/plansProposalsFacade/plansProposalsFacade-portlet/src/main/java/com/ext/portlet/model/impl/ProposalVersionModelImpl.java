package com.ext.portlet.model.impl;

import com.ext.portlet.model.ProposalVersion;
import com.ext.portlet.model.ProposalVersionModel;
import com.ext.portlet.model.ProposalVersionSoap;
import com.ext.portlet.service.persistence.ProposalVersionPK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ProposalVersion service. Represents a row in the &quot;xcolab_ProposalVersion&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.ProposalVersionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProposalVersionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProposalVersionImpl
 * @see com.ext.portlet.model.ProposalVersion
 * @see com.ext.portlet.model.ProposalVersionModel
 * @generated
 */
@JSON(strict = true)
public class ProposalVersionModelImpl extends BaseModelImpl<ProposalVersion>
    implements ProposalVersionModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a proposal version model instance should use the {@link com.ext.portlet.model.ProposalVersion} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_ProposalVersion";
    public static final Object[][] TABLE_COLUMNS = {
            { "proposalId", Types.BIGINT },
            { "version", Types.INTEGER },
            { "authorId", Types.BIGINT },
            { "createDate", Types.TIMESTAMP },
            { "updateType", Types.VARCHAR },
            { "updateAdditionalId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_ProposalVersion (proposalId LONG not null,version INTEGER not null,authorId LONG,createDate DATE null,updateType VARCHAR(75) null,updateAdditionalId LONG,primary key (proposalId, version))";
    public static final String TABLE_SQL_DROP = "drop table xcolab_ProposalVersion";
    public static final String ORDER_BY_JPQL = " ORDER BY proposalVersion.id.version DESC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_ProposalVersion.version DESC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.ProposalVersion"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.ProposalVersion"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.model.ProposalVersion"),
            true);
    public static long PROPOSALID_COLUMN_BITMASK = 1L;
    public static long VERSION_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.ProposalVersion"));
    private static ClassLoader _classLoader = ProposalVersion.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            ProposalVersion.class
        };
    private long _proposalId;
    private long _originalProposalId;
    private boolean _setOriginalProposalId;
    private int _version;
    private long _authorId;
    private Date _createDate;
    private String _updateType;
    private long _updateAdditionalId;
    private long _columnBitmask;
    private ProposalVersion _escapedModel;

    public ProposalVersionModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static ProposalVersion toModel(ProposalVersionSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        ProposalVersion model = new ProposalVersionImpl();

        model.setProposalId(soapModel.getProposalId());
        model.setVersion(soapModel.getVersion());
        model.setAuthorId(soapModel.getAuthorId());
        model.setCreateDate(soapModel.getCreateDate());
        model.setUpdateType(soapModel.getUpdateType());
        model.setUpdateAdditionalId(soapModel.getUpdateAdditionalId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<ProposalVersion> toModels(
        ProposalVersionSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<ProposalVersion> models = new ArrayList<ProposalVersion>(soapModels.length);

        for (ProposalVersionSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public ProposalVersionPK getPrimaryKey() {
        return new ProposalVersionPK(_proposalId, _version);
    }

    @Override
    public void setPrimaryKey(ProposalVersionPK primaryKey) {
        setProposalId(primaryKey.proposalId);
        setVersion(primaryKey.version);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new ProposalVersionPK(_proposalId, _version);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((ProposalVersionPK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return ProposalVersion.class;
    }

    @Override
    public String getModelClassName() {
        return ProposalVersion.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("proposalId", getProposalId());
        attributes.put("version", getVersion());
        attributes.put("authorId", getAuthorId());
        attributes.put("createDate", getCreateDate());
        attributes.put("updateType", getUpdateType());
        attributes.put("updateAdditionalId", getUpdateAdditionalId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long proposalId = (Long) attributes.get("proposalId");

        if (proposalId != null) {
            setProposalId(proposalId);
        }

        Integer version = (Integer) attributes.get("version");

        if (version != null) {
            setVersion(version);
        }

        Long authorId = (Long) attributes.get("authorId");

        if (authorId != null) {
            setAuthorId(authorId);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        String updateType = (String) attributes.get("updateType");

        if (updateType != null) {
            setUpdateType(updateType);
        }

        Long updateAdditionalId = (Long) attributes.get("updateAdditionalId");

        if (updateAdditionalId != null) {
            setUpdateAdditionalId(updateAdditionalId);
        }
    }

    @JSON
    @Override
    public long getProposalId() {
        return _proposalId;
    }

    @Override
    public void setProposalId(long proposalId) {
        _columnBitmask |= PROPOSALID_COLUMN_BITMASK;

        if (!_setOriginalProposalId) {
            _setOriginalProposalId = true;

            _originalProposalId = _proposalId;
        }

        _proposalId = proposalId;
    }

    public long getOriginalProposalId() {
        return _originalProposalId;
    }

    @JSON
    @Override
    public int getVersion() {
        return _version;
    }

    @Override
    public void setVersion(int version) {
        _columnBitmask = -1L;

        _version = version;
    }

    @JSON
    @Override
    public long getAuthorId() {
        return _authorId;
    }

    @Override
    public void setAuthorId(long authorId) {
        _authorId = authorId;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public String getUpdateType() {
        if (_updateType == null) {
            return StringPool.BLANK;
        } else {
            return _updateType;
        }
    }

    @Override
    public void setUpdateType(String updateType) {
        _updateType = updateType;
    }

    @JSON
    @Override
    public long getUpdateAdditionalId() {
        return _updateAdditionalId;
    }

    @Override
    public void setUpdateAdditionalId(long updateAdditionalId) {
        _updateAdditionalId = updateAdditionalId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ProposalVersion toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (ProposalVersion) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ProposalVersionImpl proposalVersionImpl = new ProposalVersionImpl();

        proposalVersionImpl.setProposalId(getProposalId());
        proposalVersionImpl.setVersion(getVersion());
        proposalVersionImpl.setAuthorId(getAuthorId());
        proposalVersionImpl.setCreateDate(getCreateDate());
        proposalVersionImpl.setUpdateType(getUpdateType());
        proposalVersionImpl.setUpdateAdditionalId(getUpdateAdditionalId());

        proposalVersionImpl.resetOriginalValues();

        return proposalVersionImpl;
    }

    @Override
    public int compareTo(ProposalVersion proposalVersion) {
        int value = 0;

        if (getVersion() < proposalVersion.getVersion()) {
            value = -1;
        } else if (getVersion() > proposalVersion.getVersion()) {
            value = 1;
        } else {
            value = 0;
        }

        value = value * -1;

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ProposalVersion)) {
            return false;
        }

        ProposalVersion proposalVersion = (ProposalVersion) obj;

        ProposalVersionPK primaryKey = proposalVersion.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        ProposalVersionModelImpl proposalVersionModelImpl = this;

        proposalVersionModelImpl._originalProposalId = proposalVersionModelImpl._proposalId;

        proposalVersionModelImpl._setOriginalProposalId = false;

        proposalVersionModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<ProposalVersion> toCacheModel() {
        ProposalVersionCacheModel proposalVersionCacheModel = new ProposalVersionCacheModel();

        proposalVersionCacheModel.proposalId = getProposalId();

        proposalVersionCacheModel.version = getVersion();

        proposalVersionCacheModel.authorId = getAuthorId();

        Date createDate = getCreateDate();

        if (createDate != null) {
            proposalVersionCacheModel.createDate = createDate.getTime();
        } else {
            proposalVersionCacheModel.createDate = Long.MIN_VALUE;
        }

        proposalVersionCacheModel.updateType = getUpdateType();

        String updateType = proposalVersionCacheModel.updateType;

        if ((updateType != null) && (updateType.length() == 0)) {
            proposalVersionCacheModel.updateType = null;
        }

        proposalVersionCacheModel.updateAdditionalId = getUpdateAdditionalId();

        return proposalVersionCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(13);

        sb.append("{proposalId=");
        sb.append(getProposalId());
        sb.append(", version=");
        sb.append(getVersion());
        sb.append(", authorId=");
        sb.append(getAuthorId());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", updateType=");
        sb.append(getUpdateType());
        sb.append(", updateAdditionalId=");
        sb.append(getUpdateAdditionalId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(22);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.ProposalVersion");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>proposalId</column-name><column-value><![CDATA[");
        sb.append(getProposalId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>version</column-name><column-value><![CDATA[");
        sb.append(getVersion());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>authorId</column-name><column-value><![CDATA[");
        sb.append(getAuthorId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>updateType</column-name><column-value><![CDATA[");
        sb.append(getUpdateType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>updateAdditionalId</column-name><column-value><![CDATA[");
        sb.append(getUpdateAdditionalId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
