package com.ext.portlet.plans.model.impl;

import com.ext.portlet.plans.model.PlanAttribute;
import com.ext.portlet.plans.model.PlanAttributeModel;
import com.ext.portlet.plans.model.PlanAttributeSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.List;

/**
 * The base model implementation for the PlanAttribute service. Represents a row in the &quot;Plans_PlanAttribute&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.plans.model.PlanAttributeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PlanAttributeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PlanAttributeImpl
 * @see com.ext.portlet.plans.model.PlanAttribute
 * @see com.ext.portlet.plans.model.PlanAttributeModel
 * @generated
 */
@JSON(strict = true)
public class PlanAttributeModelImpl extends BaseModelImpl<PlanAttribute>
    implements PlanAttributeModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a plan attribute model instance should use the {@link com.ext.portlet.plans.model.PlanAttribute} interface instead.
     */
    public static final String TABLE_NAME = "Plans_PlanAttribute";
    public static final Object[][] TABLE_COLUMNS = {
            { "attributeId", Types.BIGINT },
            { "planId", Types.BIGINT },
            { "attributeName", Types.VARCHAR },
            { "attributeValue", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table Plans_PlanAttribute (attributeId LONG not null primary key,planId LONG,attributeName VARCHAR(75) null,attributeValue VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table Plans_PlanAttribute";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.plans.model.PlanAttribute"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.plans.model.PlanAttribute"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.plans.model.PlanAttribute"),
            true);
    public static long ATTRIBUTENAME_COLUMN_BITMASK = 1L;
    public static long ATTRIBUTEVALUE_COLUMN_BITMASK = 2L;
    public static long PLANID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.plans.model.PlanAttribute"));
    private static ClassLoader _classLoader = PlanAttribute.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            PlanAttribute.class
        };
    private Long _attributeId;
    private Long _planId;
    private Long _originalPlanId;
    private boolean _setOriginalPlanId;
    private String _attributeName;
    private String _originalAttributeName;
    private String _attributeValue;
    private String _originalAttributeValue;
    private long _columnBitmask;
    private PlanAttribute _escapedModelProxy;

    public PlanAttributeModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static PlanAttribute toModel(PlanAttributeSoap soapModel) {
        PlanAttribute model = new PlanAttributeImpl();

        model.setAttributeId(soapModel.getAttributeId());
        model.setPlanId(soapModel.getPlanId());
        model.setAttributeName(soapModel.getAttributeName());
        model.setAttributeValue(soapModel.getAttributeValue());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<PlanAttribute> toModels(PlanAttributeSoap[] soapModels) {
        List<PlanAttribute> models = new ArrayList<PlanAttribute>(soapModels.length);

        for (PlanAttributeSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public Long getPrimaryKey() {
        return _attributeId;
    }

    public void setPrimaryKey(Long primaryKey) {
        setAttributeId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_attributeId);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return PlanAttribute.class;
    }

    public String getModelClassName() {
        return PlanAttribute.class.getName();
    }

    @JSON
    public Long getAttributeId() {
        return _attributeId;
    }

    public void setAttributeId(Long attributeId) {
        _attributeId = attributeId;
    }

    @JSON
    public Long getPlanId() {
        return _planId;
    }

    public void setPlanId(Long planId) {
        _columnBitmask |= PLANID_COLUMN_BITMASK;

        if (!_setOriginalPlanId) {
            _setOriginalPlanId = true;

            _originalPlanId = _planId;
        }

        _planId = planId;
    }

    public Long getOriginalPlanId() {
        return _originalPlanId;
    }

    @JSON
    public String getAttributeName() {
        if (_attributeName == null) {
            return StringPool.BLANK;
        } else {
            return _attributeName;
        }
    }

    public void setAttributeName(String attributeName) {
        _columnBitmask |= ATTRIBUTENAME_COLUMN_BITMASK;

        if (_originalAttributeName == null) {
            _originalAttributeName = _attributeName;
        }

        _attributeName = attributeName;
    }

    public String getOriginalAttributeName() {
        return GetterUtil.getString(_originalAttributeName);
    }

    @JSON
    public String getAttributeValue() {
        if (_attributeValue == null) {
            return StringPool.BLANK;
        } else {
            return _attributeValue;
        }
    }

    public void setAttributeValue(String attributeValue) {
        _columnBitmask |= ATTRIBUTEVALUE_COLUMN_BITMASK;

        if (_originalAttributeValue == null) {
            _originalAttributeValue = _attributeValue;
        }

        _attributeValue = attributeValue;
    }

    public String getOriginalAttributeValue() {
        return GetterUtil.getString(_originalAttributeValue);
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public PlanAttribute toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (PlanAttribute) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public Object clone() {
        PlanAttributeImpl planAttributeImpl = new PlanAttributeImpl();

        planAttributeImpl.setAttributeId(getAttributeId());
        planAttributeImpl.setPlanId(getPlanId());
        planAttributeImpl.setAttributeName(getAttributeName());
        planAttributeImpl.setAttributeValue(getAttributeValue());

        planAttributeImpl.resetOriginalValues();

        return planAttributeImpl;
    }

    public int compareTo(PlanAttribute planAttribute) {
        Long primaryKey = planAttribute.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        PlanAttribute planAttribute = null;

        try {
            planAttribute = (PlanAttribute) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        Long primaryKey = planAttribute.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        PlanAttributeModelImpl planAttributeModelImpl = this;

        planAttributeModelImpl._originalPlanId = planAttributeModelImpl._planId;

        planAttributeModelImpl._setOriginalPlanId = false;

        planAttributeModelImpl._originalAttributeName = planAttributeModelImpl._attributeName;

        planAttributeModelImpl._originalAttributeValue = planAttributeModelImpl._attributeValue;

        planAttributeModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<PlanAttribute> toCacheModel() {
        PlanAttributeCacheModel planAttributeCacheModel = new PlanAttributeCacheModel();

        planAttributeCacheModel.attributeId = getAttributeId();

        planAttributeCacheModel.planId = getPlanId();

        planAttributeCacheModel.attributeName = getAttributeName();

        String attributeName = planAttributeCacheModel.attributeName;

        if ((attributeName != null) && (attributeName.length() == 0)) {
            planAttributeCacheModel.attributeName = null;
        }

        planAttributeCacheModel.attributeValue = getAttributeValue();

        String attributeValue = planAttributeCacheModel.attributeValue;

        if ((attributeValue != null) && (attributeValue.length() == 0)) {
            planAttributeCacheModel.attributeValue = null;
        }

        return planAttributeCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(9);

        sb.append("{attributeId=");
        sb.append(getAttributeId());
        sb.append(", planId=");
        sb.append(getPlanId());
        sb.append(", attributeName=");
        sb.append(getAttributeName());
        sb.append(", attributeValue=");
        sb.append(getAttributeValue());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(16);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.plans.model.PlanAttribute");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>attributeId</column-name><column-value><![CDATA[");
        sb.append(getAttributeId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>planId</column-name><column-value><![CDATA[");
        sb.append(getPlanId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>attributeName</column-name><column-value><![CDATA[");
        sb.append(getAttributeName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>attributeValue</column-name><column-value><![CDATA[");
        sb.append(getAttributeValue());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
