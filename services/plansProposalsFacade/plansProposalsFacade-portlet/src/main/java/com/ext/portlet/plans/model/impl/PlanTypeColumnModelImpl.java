package com.ext.portlet.plans.model.impl;

import com.ext.portlet.plans.model.PlanTypeColumn;
import com.ext.portlet.plans.model.PlanTypeColumnModel;
import com.ext.portlet.plans.model.PlanTypeColumnSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.List;

/**
 * The base model implementation for the PlanTypeColumn service. Represents a row in the &quot;Plans_PlanTypeColumn&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.plans.model.PlanTypeColumnModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PlanTypeColumnImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PlanTypeColumnImpl
 * @see com.ext.portlet.plans.model.PlanTypeColumn
 * @see com.ext.portlet.plans.model.PlanTypeColumnModel
 * @generated
 */
@JSON(strict = true)
public class PlanTypeColumnModelImpl extends BaseModelImpl<PlanTypeColumn>
    implements PlanTypeColumnModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a plan type column model instance should use the {@link com.ext.portlet.plans.model.PlanTypeColumn} interface instead.
     */
    public static final String TABLE_NAME = "Plans_PlanTypeColumn";
    public static final Object[][] TABLE_COLUMNS = {
            { "planTypeColumnId", Types.BIGINT },
            { "planTypeId", Types.BIGINT },
            { "weight", Types.INTEGER },
            { "columnName", Types.VARCHAR },
            { "visibleByDefault", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table Plans_PlanTypeColumn (planTypeColumnId LONG not null primary key,planTypeId LONG,weight INTEGER,columnName VARCHAR(75) null,visibleByDefault BOOLEAN)";
    public static final String TABLE_SQL_DROP = "drop table Plans_PlanTypeColumn";
    public static final String ORDER_BY_JPQL = " ORDER BY planTypeColumn.weight ASC, planTypeColumn.columnName ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Plans_PlanTypeColumn.weight ASC, Plans_PlanTypeColumn.columnName ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.plans.model.PlanTypeColumn"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.plans.model.PlanTypeColumn"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.plans.model.PlanTypeColumn"));
    private static ClassLoader _classLoader = PlanTypeColumn.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            PlanTypeColumn.class
        };
    private Long _planTypeColumnId;
    private Long _planTypeId;
    private Integer _weight;
    private String _columnName;
    private Boolean _visibleByDefault;
    private PlanTypeColumn _escapedModelProxy;

    public PlanTypeColumnModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static PlanTypeColumn toModel(PlanTypeColumnSoap soapModel) {
        PlanTypeColumn model = new PlanTypeColumnImpl();

        model.setPlanTypeColumnId(soapModel.getPlanTypeColumnId());
        model.setPlanTypeId(soapModel.getPlanTypeId());
        model.setWeight(soapModel.getWeight());
        model.setColumnName(soapModel.getColumnName());
        model.setVisibleByDefault(soapModel.getVisibleByDefault());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<PlanTypeColumn> toModels(PlanTypeColumnSoap[] soapModels) {
        List<PlanTypeColumn> models = new ArrayList<PlanTypeColumn>(soapModels.length);

        for (PlanTypeColumnSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public Long getPrimaryKey() {
        return _planTypeColumnId;
    }

    public void setPrimaryKey(Long primaryKey) {
        setPlanTypeColumnId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_planTypeColumnId);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return PlanTypeColumn.class;
    }

    public String getModelClassName() {
        return PlanTypeColumn.class.getName();
    }

    @JSON
    public Long getPlanTypeColumnId() {
        return _planTypeColumnId;
    }

    public void setPlanTypeColumnId(Long planTypeColumnId) {
        _planTypeColumnId = planTypeColumnId;
    }

    @JSON
    public Long getPlanTypeId() {
        return _planTypeId;
    }

    public void setPlanTypeId(Long planTypeId) {
        _planTypeId = planTypeId;
    }

    @JSON
    public Integer getWeight() {
        return _weight;
    }

    public void setWeight(Integer weight) {
        _weight = weight;
    }

    @JSON
    public String getColumnName() {
        if (_columnName == null) {
            return StringPool.BLANK;
        } else {
            return _columnName;
        }
    }

    public void setColumnName(String columnName) {
        _columnName = columnName;
    }

    @JSON
    public Boolean getVisibleByDefault() {
        return _visibleByDefault;
    }

    public void setVisibleByDefault(Boolean visibleByDefault) {
        _visibleByDefault = visibleByDefault;
    }

    @Override
    public PlanTypeColumn toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (PlanTypeColumn) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public Object clone() {
        PlanTypeColumnImpl planTypeColumnImpl = new PlanTypeColumnImpl();

        planTypeColumnImpl.setPlanTypeColumnId(getPlanTypeColumnId());
        planTypeColumnImpl.setPlanTypeId(getPlanTypeId());
        planTypeColumnImpl.setWeight(getWeight());
        planTypeColumnImpl.setColumnName(getColumnName());
        planTypeColumnImpl.setVisibleByDefault(getVisibleByDefault());

        planTypeColumnImpl.resetOriginalValues();

        return planTypeColumnImpl;
    }

    public int compareTo(PlanTypeColumn planTypeColumn) {
        int value = 0;

        if (getWeight() < planTypeColumn.getWeight()) {
            value = -1;
        } else if (getWeight() > planTypeColumn.getWeight()) {
            value = 1;
        } else {
            value = 0;
        }

        if (value != 0) {
            return value;
        }

        value = getColumnName().toLowerCase()
                    .compareTo(planTypeColumn.getColumnName().toLowerCase());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        PlanTypeColumn planTypeColumn = null;

        try {
            planTypeColumn = (PlanTypeColumn) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        Long primaryKey = planTypeColumn.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<PlanTypeColumn> toCacheModel() {
        PlanTypeColumnCacheModel planTypeColumnCacheModel = new PlanTypeColumnCacheModel();

        planTypeColumnCacheModel.planTypeColumnId = getPlanTypeColumnId();

        planTypeColumnCacheModel.planTypeId = getPlanTypeId();

        planTypeColumnCacheModel.weight = getWeight();

        planTypeColumnCacheModel.columnName = getColumnName();

        String columnName = planTypeColumnCacheModel.columnName;

        if ((columnName != null) && (columnName.length() == 0)) {
            planTypeColumnCacheModel.columnName = null;
        }

        planTypeColumnCacheModel.visibleByDefault = getVisibleByDefault();

        return planTypeColumnCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{planTypeColumnId=");
        sb.append(getPlanTypeColumnId());
        sb.append(", planTypeId=");
        sb.append(getPlanTypeId());
        sb.append(", weight=");
        sb.append(getWeight());
        sb.append(", columnName=");
        sb.append(getColumnName());
        sb.append(", visibleByDefault=");
        sb.append(getVisibleByDefault());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.plans.model.PlanTypeColumn");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>planTypeColumnId</column-name><column-value><![CDATA[");
        sb.append(getPlanTypeColumnId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>planTypeId</column-name><column-value><![CDATA[");
        sb.append(getPlanTypeId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>weight</column-name><column-value><![CDATA[");
        sb.append(getWeight());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>columnName</column-name><column-value><![CDATA[");
        sb.append(getColumnName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>visibleByDefault</column-name><column-value><![CDATA[");
        sb.append(getVisibleByDefault());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
