package com.ext.portlet.model.impl;

import com.ext.portlet.model.LoginLog;
import com.ext.portlet.model.LoginLogModel;
import com.ext.portlet.model.LoginLogSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the LoginLog service. Represents a row in the &quot;xcolab_LoginLog&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.LoginLogModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LoginLogImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LoginLogImpl
 * @see com.ext.portlet.model.LoginLog
 * @see com.ext.portlet.model.LoginLogModel
 * @generated
 */
@JSON(strict = true)
public class LoginLogModelImpl extends BaseModelImpl<LoginLog>
    implements LoginLogModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a login log model instance should use the {@link com.ext.portlet.model.LoginLog} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_LoginLog";
    public static final Object[][] TABLE_COLUMNS = {
            { "pk", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "createDate", Types.TIMESTAMP },
            { "ipAddress", Types.VARCHAR },
            { "city", Types.VARCHAR },
            { "country", Types.VARCHAR },
            { "entryUrl", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_LoginLog (pk LONG not null primary key,userId LONG,createDate DATE null,ipAddress VARCHAR(75) null,city VARCHAR(75) null,country VARCHAR(75) null,entryUrl VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_LoginLog";
    public static final String ORDER_BY_JPQL = " ORDER BY loginLog.pk ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_LoginLog.pk ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.LoginLog"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.LoginLog"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.LoginLog"));
    private static ClassLoader _classLoader = LoginLog.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            LoginLog.class
        };
    private long _pk;
    private long _userId;
    private String _userUuid;
    private Date _createDate;
    private String _ipAddress;
    private String _city;
    private String _country;
    private String _entryUrl;
    private LoginLog _escapedModel;

    public LoginLogModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static LoginLog toModel(LoginLogSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        LoginLog model = new LoginLogImpl();

        model.setPk(soapModel.getPk());
        model.setUserId(soapModel.getUserId());
        model.setCreateDate(soapModel.getCreateDate());
        model.setIpAddress(soapModel.getIpAddress());
        model.setCity(soapModel.getCity());
        model.setCountry(soapModel.getCountry());
        model.setEntryUrl(soapModel.getEntryUrl());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<LoginLog> toModels(LoginLogSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<LoginLog> models = new ArrayList<LoginLog>(soapModels.length);

        for (LoginLogSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _pk;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setPk(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _pk;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return LoginLog.class;
    }

    @Override
    public String getModelClassName() {
        return LoginLog.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("pk", getPk());
        attributes.put("userId", getUserId());
        attributes.put("createDate", getCreateDate());
        attributes.put("ipAddress", getIpAddress());
        attributes.put("city", getCity());
        attributes.put("country", getCountry());
        attributes.put("entryUrl", getEntryUrl());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long pk = (Long) attributes.get("pk");

        if (pk != null) {
            setPk(pk);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        String ipAddress = (String) attributes.get("ipAddress");

        if (ipAddress != null) {
            setIpAddress(ipAddress);
        }

        String city = (String) attributes.get("city");

        if (city != null) {
            setCity(city);
        }

        String country = (String) attributes.get("country");

        if (country != null) {
            setCountry(country);
        }

        String entryUrl = (String) attributes.get("entryUrl");

        if (entryUrl != null) {
            setEntryUrl(entryUrl);
        }
    }

    @JSON
    @Override
    public long getPk() {
        return _pk;
    }

    @Override
    public void setPk(long pk) {
        _pk = pk;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public String getIpAddress() {
        if (_ipAddress == null) {
            return StringPool.BLANK;
        } else {
            return _ipAddress;
        }
    }

    @Override
    public void setIpAddress(String ipAddress) {
        _ipAddress = ipAddress;
    }

    @JSON
    @Override
    public String getCity() {
        if (_city == null) {
            return StringPool.BLANK;
        } else {
            return _city;
        }
    }

    @Override
    public void setCity(String city) {
        _city = city;
    }

    @JSON
    @Override
    public String getCountry() {
        if (_country == null) {
            return StringPool.BLANK;
        } else {
            return _country;
        }
    }

    @Override
    public void setCountry(String country) {
        _country = country;
    }

    @JSON
    @Override
    public String getEntryUrl() {
        if (_entryUrl == null) {
            return StringPool.BLANK;
        } else {
            return _entryUrl;
        }
    }

    @Override
    public void setEntryUrl(String entryUrl) {
        _entryUrl = entryUrl;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            LoginLog.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public LoginLog toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (LoginLog) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        LoginLogImpl loginLogImpl = new LoginLogImpl();

        loginLogImpl.setPk(getPk());
        loginLogImpl.setUserId(getUserId());
        loginLogImpl.setCreateDate(getCreateDate());
        loginLogImpl.setIpAddress(getIpAddress());
        loginLogImpl.setCity(getCity());
        loginLogImpl.setCountry(getCountry());
        loginLogImpl.setEntryUrl(getEntryUrl());

        loginLogImpl.resetOriginalValues();

        return loginLogImpl;
    }

    @Override
    public int compareTo(LoginLog loginLog) {
        long primaryKey = loginLog.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof LoginLog)) {
            return false;
        }

        LoginLog loginLog = (LoginLog) obj;

        long primaryKey = loginLog.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<LoginLog> toCacheModel() {
        LoginLogCacheModel loginLogCacheModel = new LoginLogCacheModel();

        loginLogCacheModel.pk = getPk();

        loginLogCacheModel.userId = getUserId();

        Date createDate = getCreateDate();

        if (createDate != null) {
            loginLogCacheModel.createDate = createDate.getTime();
        } else {
            loginLogCacheModel.createDate = Long.MIN_VALUE;
        }

        loginLogCacheModel.ipAddress = getIpAddress();

        String ipAddress = loginLogCacheModel.ipAddress;

        if ((ipAddress != null) && (ipAddress.length() == 0)) {
            loginLogCacheModel.ipAddress = null;
        }

        loginLogCacheModel.city = getCity();

        String city = loginLogCacheModel.city;

        if ((city != null) && (city.length() == 0)) {
            loginLogCacheModel.city = null;
        }

        loginLogCacheModel.country = getCountry();

        String country = loginLogCacheModel.country;

        if ((country != null) && (country.length() == 0)) {
            loginLogCacheModel.country = null;
        }

        loginLogCacheModel.entryUrl = getEntryUrl();

        String entryUrl = loginLogCacheModel.entryUrl;

        if ((entryUrl != null) && (entryUrl.length() == 0)) {
            loginLogCacheModel.entryUrl = null;
        }

        return loginLogCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(15);

        sb.append("{pk=");
        sb.append(getPk());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", ipAddress=");
        sb.append(getIpAddress());
        sb.append(", city=");
        sb.append(getCity());
        sb.append(", country=");
        sb.append(getCountry());
        sb.append(", entryUrl=");
        sb.append(getEntryUrl());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(25);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.LoginLog");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>pk</column-name><column-value><![CDATA[");
        sb.append(getPk());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ipAddress</column-name><column-value><![CDATA[");
        sb.append(getIpAddress());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>city</column-name><column-value><![CDATA[");
        sb.append(getCity());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>country</column-name><column-value><![CDATA[");
        sb.append(getCountry());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>entryUrl</column-name><column-value><![CDATA[");
        sb.append(getEntryUrl());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
