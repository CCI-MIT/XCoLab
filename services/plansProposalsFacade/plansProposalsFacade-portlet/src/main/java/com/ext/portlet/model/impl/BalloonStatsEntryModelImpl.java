package com.ext.portlet.model.impl;

import com.ext.portlet.model.BalloonStatsEntry;
import com.ext.portlet.model.BalloonStatsEntryModel;
import com.ext.portlet.model.BalloonStatsEntrySoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the BalloonStatsEntry service. Represents a row in the &quot;xcolab_BalloonStatsEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.BalloonStatsEntryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BalloonStatsEntryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see BalloonStatsEntryImpl
 * @see com.ext.portlet.model.BalloonStatsEntry
 * @see com.ext.portlet.model.BalloonStatsEntryModel
 * @generated
 */
@JSON(strict = true)
public class BalloonStatsEntryModelImpl extends BaseModelImpl<BalloonStatsEntry>
    implements BalloonStatsEntryModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a balloon stats entry model instance should use the {@link com.ext.portlet.model.BalloonStatsEntry} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_BalloonStatsEntry";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "firstContestId", Types.BIGINT },
            { "secondContestId", Types.BIGINT },
            { "choosenContest", Types.INTEGER },
            { "cookie", Types.VARCHAR },
            { "ip", Types.VARCHAR },
            { "extraData", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_BalloonStatsEntry (id_ LONG not null primary key,firstContestId LONG,secondContestId LONG,choosenContest INTEGER,cookie VARCHAR(256) null,ip VARCHAR(75) null,extraData VARCHAR(256) null)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_BalloonStatsEntry";
    public static final String ORDER_BY_JPQL = " ORDER BY balloonStatsEntry.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_BalloonStatsEntry.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.BalloonStatsEntry"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.BalloonStatsEntry"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.BalloonStatsEntry"));
    private static ClassLoader _classLoader = BalloonStatsEntry.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            BalloonStatsEntry.class
        };
    private long _id;
    private long _firstContestId;
    private long _secondContestId;
    private int _choosenContest;
    private String _cookie;
    private String _ip;
    private String _extraData;
    private BalloonStatsEntry _escapedModel;

    public BalloonStatsEntryModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static BalloonStatsEntry toModel(BalloonStatsEntrySoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        BalloonStatsEntry model = new BalloonStatsEntryImpl();

        model.setId(soapModel.getId());
        model.setFirstContestId(soapModel.getFirstContestId());
        model.setSecondContestId(soapModel.getSecondContestId());
        model.setChoosenContest(soapModel.getChoosenContest());
        model.setCookie(soapModel.getCookie());
        model.setIp(soapModel.getIp());
        model.setExtraData(soapModel.getExtraData());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<BalloonStatsEntry> toModels(
        BalloonStatsEntrySoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<BalloonStatsEntry> models = new ArrayList<BalloonStatsEntry>(soapModels.length);

        for (BalloonStatsEntrySoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return BalloonStatsEntry.class;
    }

    @Override
    public String getModelClassName() {
        return BalloonStatsEntry.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("firstContestId", getFirstContestId());
        attributes.put("secondContestId", getSecondContestId());
        attributes.put("choosenContest", getChoosenContest());
        attributes.put("cookie", getCookie());
        attributes.put("ip", getIp());
        attributes.put("extraData", getExtraData());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        Long firstContestId = (Long) attributes.get("firstContestId");

        if (firstContestId != null) {
            setFirstContestId(firstContestId);
        }

        Long secondContestId = (Long) attributes.get("secondContestId");

        if (secondContestId != null) {
            setSecondContestId(secondContestId);
        }

        Integer choosenContest = (Integer) attributes.get("choosenContest");

        if (choosenContest != null) {
            setChoosenContest(choosenContest);
        }

        String cookie = (String) attributes.get("cookie");

        if (cookie != null) {
            setCookie(cookie);
        }

        String ip = (String) attributes.get("ip");

        if (ip != null) {
            setIp(ip);
        }

        String extraData = (String) attributes.get("extraData");

        if (extraData != null) {
            setExtraData(extraData);
        }
    }

    @JSON
    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @JSON
    @Override
    public long getFirstContestId() {
        return _firstContestId;
    }

    @Override
    public void setFirstContestId(long firstContestId) {
        _firstContestId = firstContestId;
    }

    @JSON
    @Override
    public long getSecondContestId() {
        return _secondContestId;
    }

    @Override
    public void setSecondContestId(long secondContestId) {
        _secondContestId = secondContestId;
    }

    @JSON
    @Override
    public int getChoosenContest() {
        return _choosenContest;
    }

    @Override
    public void setChoosenContest(int choosenContest) {
        _choosenContest = choosenContest;
    }

    @JSON
    @Override
    public String getCookie() {
        if (_cookie == null) {
            return StringPool.BLANK;
        } else {
            return _cookie;
        }
    }

    @Override
    public void setCookie(String cookie) {
        _cookie = cookie;
    }

    @JSON
    @Override
    public String getIp() {
        if (_ip == null) {
            return StringPool.BLANK;
        } else {
            return _ip;
        }
    }

    @Override
    public void setIp(String ip) {
        _ip = ip;
    }

    @JSON
    @Override
    public String getExtraData() {
        if (_extraData == null) {
            return StringPool.BLANK;
        } else {
            return _extraData;
        }
    }

    @Override
    public void setExtraData(String extraData) {
        _extraData = extraData;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            BalloonStatsEntry.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public BalloonStatsEntry toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (BalloonStatsEntry) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        BalloonStatsEntryImpl balloonStatsEntryImpl = new BalloonStatsEntryImpl();

        balloonStatsEntryImpl.setId(getId());
        balloonStatsEntryImpl.setFirstContestId(getFirstContestId());
        balloonStatsEntryImpl.setSecondContestId(getSecondContestId());
        balloonStatsEntryImpl.setChoosenContest(getChoosenContest());
        balloonStatsEntryImpl.setCookie(getCookie());
        balloonStatsEntryImpl.setIp(getIp());
        balloonStatsEntryImpl.setExtraData(getExtraData());

        balloonStatsEntryImpl.resetOriginalValues();

        return balloonStatsEntryImpl;
    }

    @Override
    public int compareTo(BalloonStatsEntry balloonStatsEntry) {
        long primaryKey = balloonStatsEntry.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof BalloonStatsEntry)) {
            return false;
        }

        BalloonStatsEntry balloonStatsEntry = (BalloonStatsEntry) obj;

        long primaryKey = balloonStatsEntry.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<BalloonStatsEntry> toCacheModel() {
        BalloonStatsEntryCacheModel balloonStatsEntryCacheModel = new BalloonStatsEntryCacheModel();

        balloonStatsEntryCacheModel.id = getId();

        balloonStatsEntryCacheModel.firstContestId = getFirstContestId();

        balloonStatsEntryCacheModel.secondContestId = getSecondContestId();

        balloonStatsEntryCacheModel.choosenContest = getChoosenContest();

        balloonStatsEntryCacheModel.cookie = getCookie();

        String cookie = balloonStatsEntryCacheModel.cookie;

        if ((cookie != null) && (cookie.length() == 0)) {
            balloonStatsEntryCacheModel.cookie = null;
        }

        balloonStatsEntryCacheModel.ip = getIp();

        String ip = balloonStatsEntryCacheModel.ip;

        if ((ip != null) && (ip.length() == 0)) {
            balloonStatsEntryCacheModel.ip = null;
        }

        balloonStatsEntryCacheModel.extraData = getExtraData();

        String extraData = balloonStatsEntryCacheModel.extraData;

        if ((extraData != null) && (extraData.length() == 0)) {
            balloonStatsEntryCacheModel.extraData = null;
        }

        return balloonStatsEntryCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(15);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", firstContestId=");
        sb.append(getFirstContestId());
        sb.append(", secondContestId=");
        sb.append(getSecondContestId());
        sb.append(", choosenContest=");
        sb.append(getChoosenContest());
        sb.append(", cookie=");
        sb.append(getCookie());
        sb.append(", ip=");
        sb.append(getIp());
        sb.append(", extraData=");
        sb.append(getExtraData());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(25);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.BalloonStatsEntry");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>firstContestId</column-name><column-value><![CDATA[");
        sb.append(getFirstContestId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>secondContestId</column-name><column-value><![CDATA[");
        sb.append(getSecondContestId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>choosenContest</column-name><column-value><![CDATA[");
        sb.append(getChoosenContest());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>cookie</column-name><column-value><![CDATA[");
        sb.append(getCookie());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ip</column-name><column-value><![CDATA[");
        sb.append(getIp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>extraData</column-name><column-value><![CDATA[");
        sb.append(getExtraData());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
