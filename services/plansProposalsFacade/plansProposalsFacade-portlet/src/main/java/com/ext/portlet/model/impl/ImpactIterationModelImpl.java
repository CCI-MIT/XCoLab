package com.ext.portlet.model.impl;

import com.ext.portlet.model.ImpactIteration;
import com.ext.portlet.model.ImpactIterationModel;
import com.ext.portlet.model.ImpactIterationSoap;
import com.ext.portlet.service.persistence.ImpactIterationPK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ImpactIteration service. Represents a row in the &quot;xcolab_ImpactIteration&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.ImpactIterationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ImpactIterationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ImpactIterationImpl
 * @see com.ext.portlet.model.ImpactIteration
 * @see com.ext.portlet.model.ImpactIterationModel
 * @generated
 */
@JSON(strict = true)
public class ImpactIterationModelImpl extends BaseModelImpl<ImpactIteration>
    implements ImpactIterationModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a impact iteration model instance should use the {@link com.ext.portlet.model.ImpactIteration} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_ImpactIteration";
    public static final Object[][] TABLE_COLUMNS = {
            { "iterationId", Types.BIGINT },
            { "year", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_ImpactIteration (iterationId LONG not null,year INTEGER not null,primary key (iterationId, year))";
    public static final String TABLE_SQL_DROP = "drop table xcolab_ImpactIteration";
    public static final String ORDER_BY_JPQL = " ORDER BY impactIteration.id.iterationId ASC, impactIteration.id.year ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_ImpactIteration.iterationId ASC, xcolab_ImpactIteration.year ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.ImpactIteration"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.ImpactIteration"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.model.ImpactIteration"),
            true);
    public static long ITERATIONID_COLUMN_BITMASK = 1L;
    public static long YEAR_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.ImpactIteration"));
    private static ClassLoader _classLoader = ImpactIteration.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            ImpactIteration.class
        };
    private long _iterationId;
    private long _originalIterationId;
    private boolean _setOriginalIterationId;
    private int _year;
    private long _columnBitmask;
    private ImpactIteration _escapedModel;

    public ImpactIterationModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static ImpactIteration toModel(ImpactIterationSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        ImpactIteration model = new ImpactIterationImpl();

        model.setIterationId(soapModel.getIterationId());
        model.setYear(soapModel.getYear());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<ImpactIteration> toModels(
        ImpactIterationSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<ImpactIteration> models = new ArrayList<ImpactIteration>(soapModels.length);

        for (ImpactIterationSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public ImpactIterationPK getPrimaryKey() {
        return new ImpactIterationPK(_iterationId, _year);
    }

    @Override
    public void setPrimaryKey(ImpactIterationPK primaryKey) {
        setIterationId(primaryKey.iterationId);
        setYear(primaryKey.year);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new ImpactIterationPK(_iterationId, _year);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((ImpactIterationPK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return ImpactIteration.class;
    }

    @Override
    public String getModelClassName() {
        return ImpactIteration.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("iterationId", getIterationId());
        attributes.put("year", getYear());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long iterationId = (Long) attributes.get("iterationId");

        if (iterationId != null) {
            setIterationId(iterationId);
        }

        Integer year = (Integer) attributes.get("year");

        if (year != null) {
            setYear(year);
        }
    }

    @JSON
    @Override
    public long getIterationId() {
        return _iterationId;
    }

    @Override
    public void setIterationId(long iterationId) {
        _columnBitmask |= ITERATIONID_COLUMN_BITMASK;

        if (!_setOriginalIterationId) {
            _setOriginalIterationId = true;

            _originalIterationId = _iterationId;
        }

        _iterationId = iterationId;
    }

    public long getOriginalIterationId() {
        return _originalIterationId;
    }

    @JSON
    @Override
    public int getYear() {
        return _year;
    }

    @Override
    public void setYear(int year) {
        _year = year;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ImpactIteration toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (ImpactIteration) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ImpactIterationImpl impactIterationImpl = new ImpactIterationImpl();

        impactIterationImpl.setIterationId(getIterationId());
        impactIterationImpl.setYear(getYear());

        impactIterationImpl.resetOriginalValues();

        return impactIterationImpl;
    }

    @Override
    public int compareTo(ImpactIteration impactIteration) {
        ImpactIterationPK primaryKey = impactIteration.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ImpactIteration)) {
            return false;
        }

        ImpactIteration impactIteration = (ImpactIteration) obj;

        ImpactIterationPK primaryKey = impactIteration.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        ImpactIterationModelImpl impactIterationModelImpl = this;

        impactIterationModelImpl._originalIterationId = impactIterationModelImpl._iterationId;

        impactIterationModelImpl._setOriginalIterationId = false;

        impactIterationModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<ImpactIteration> toCacheModel() {
        ImpactIterationCacheModel impactIterationCacheModel = new ImpactIterationCacheModel();

        impactIterationCacheModel.iterationId = getIterationId();

        impactIterationCacheModel.year = getYear();

        return impactIterationCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(5);

        sb.append("{iterationId=");
        sb.append(getIterationId());
        sb.append(", year=");
        sb.append(getYear());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(10);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.ImpactIteration");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>iterationId</column-name><column-value><![CDATA[");
        sb.append(getIterationId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>year</column-name><column-value><![CDATA[");
        sb.append(getYear());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
