package com.ext.portlet.model.impl;

import com.ext.portlet.model.OntologySpace;
import com.ext.portlet.model.OntologySpaceModel;
import com.ext.portlet.model.OntologySpaceSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.List;

/**
 * The base model implementation for the OntologySpace service. Represents a row in the &quot;xcolab_OntologySpace&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.OntologySpaceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OntologySpaceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see OntologySpaceImpl
 * @see com.ext.portlet.model.OntologySpace
 * @see com.ext.portlet.model.OntologySpaceModel
 * @generated
 */
@JSON(strict = true)
public class OntologySpaceModelImpl extends BaseModelImpl<OntologySpace>
    implements OntologySpaceModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a ontology space model instance should use the {@link com.ext.portlet.model.OntologySpace} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_OntologySpace";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "name", Types.VARCHAR },
            { "description", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_OntologySpace (id_ LONG not null primary key,name VARCHAR(256) null,description TEXT null)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_OntologySpace";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.OntologySpace"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.OntologySpace"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.model.OntologySpace"),
            true);
    public static long NAME_COLUMN_BITMASK = 1L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.OntologySpace"));
    private static ClassLoader _classLoader = OntologySpace.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            OntologySpace.class
        };
    private long _id;
    private String _name;
    private String _originalName;
    private String _description;
    private transient ExpandoBridge _expandoBridge;
    private long _columnBitmask;
    private OntologySpace _escapedModelProxy;

    public OntologySpaceModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static OntologySpace toModel(OntologySpaceSoap soapModel) {
        OntologySpace model = new OntologySpaceImpl();

        model.setId(soapModel.getId());
        model.setName(soapModel.getName());
        model.setDescription(soapModel.getDescription());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<OntologySpace> toModels(OntologySpaceSoap[] soapModels) {
        List<OntologySpace> models = new ArrayList<OntologySpace>(soapModels.length);

        for (OntologySpaceSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public long getPrimaryKey() {
        return _id;
    }

    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_id);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return OntologySpace.class;
    }

    public String getModelClassName() {
        return OntologySpace.class.getName();
    }

    @JSON
    public long getId() {
        return _id;
    }

    public void setId(long id) {
        _id = id;
    }

    @JSON
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    public void setName(String name) {
        _columnBitmask |= NAME_COLUMN_BITMASK;

        if (_originalName == null) {
            _originalName = _name;
        }

        _name = name;
    }

    public String getOriginalName() {
        return GetterUtil.getString(_originalName);
    }

    @JSON
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    public void setDescription(String description) {
        _description = description;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public OntologySpace toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (OntologySpace) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        if (_expandoBridge == null) {
            _expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
                    OntologySpace.class.getName(), getPrimaryKey());
        }

        return _expandoBridge;
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        getExpandoBridge().setAttributes(serviceContext);
    }

    @Override
    public Object clone() {
        OntologySpaceImpl ontologySpaceImpl = new OntologySpaceImpl();

        ontologySpaceImpl.setId(getId());
        ontologySpaceImpl.setName(getName());
        ontologySpaceImpl.setDescription(getDescription());

        ontologySpaceImpl.resetOriginalValues();

        return ontologySpaceImpl;
    }

    public int compareTo(OntologySpace ontologySpace) {
        long primaryKey = ontologySpace.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        OntologySpace ontologySpace = null;

        try {
            ontologySpace = (OntologySpace) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = ontologySpace.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        OntologySpaceModelImpl ontologySpaceModelImpl = this;

        ontologySpaceModelImpl._originalName = ontologySpaceModelImpl._name;

        ontologySpaceModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<OntologySpace> toCacheModel() {
        OntologySpaceCacheModel ontologySpaceCacheModel = new OntologySpaceCacheModel();

        ontologySpaceCacheModel.id = getId();

        ontologySpaceCacheModel.name = getName();

        String name = ontologySpaceCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            ontologySpaceCacheModel.name = null;
        }

        ontologySpaceCacheModel.description = getDescription();

        String description = ontologySpaceCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            ontologySpaceCacheModel.description = null;
        }

        return ontologySpaceCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.OntologySpace");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
