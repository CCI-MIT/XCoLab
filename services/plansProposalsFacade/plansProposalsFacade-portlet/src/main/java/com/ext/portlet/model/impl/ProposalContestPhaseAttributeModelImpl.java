package com.ext.portlet.model.impl;

import com.ext.portlet.model.ProposalContestPhaseAttribute;
import com.ext.portlet.model.ProposalContestPhaseAttributeModel;
import com.ext.portlet.model.ProposalContestPhaseAttributeSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ProposalContestPhaseAttribute service. Represents a row in the &quot;xcolab_ProposalContestPhaseAttribute&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.ProposalContestPhaseAttributeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProposalContestPhaseAttributeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProposalContestPhaseAttributeImpl
 * @see com.ext.portlet.model.ProposalContestPhaseAttribute
 * @see com.ext.portlet.model.ProposalContestPhaseAttributeModel
 * @generated
 */
@JSON(strict = true)
public class ProposalContestPhaseAttributeModelImpl extends BaseModelImpl<ProposalContestPhaseAttribute>
    implements ProposalContestPhaseAttributeModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a proposal contest phase attribute model instance should use the {@link com.ext.portlet.model.ProposalContestPhaseAttribute} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_ProposalContestPhaseAttribute";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "proposalId", Types.BIGINT },
            { "contestPhaseId", Types.BIGINT },
            { "name", Types.VARCHAR },
            { "additionalId", Types.BIGINT },
            { "numericValue", Types.BIGINT },
            { "stringValue", Types.VARCHAR },
            { "realValue", Types.DOUBLE }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_ProposalContestPhaseAttribute (id_ LONG not null primary key,proposalId LONG,contestPhaseId LONG,name VARCHAR(75) null,additionalId LONG,numericValue LONG,stringValue TEXT null,realValue DOUBLE)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_ProposalContestPhaseAttribute";
    public static final String ORDER_BY_JPQL = " ORDER BY proposalContestPhaseAttribute.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_ProposalContestPhaseAttribute.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.ProposalContestPhaseAttribute"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.ProposalContestPhaseAttribute"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.model.ProposalContestPhaseAttribute"),
            true);
    public static long ADDITIONALID_COLUMN_BITMASK = 1L;
    public static long CONTESTPHASEID_COLUMN_BITMASK = 2L;
    public static long NAME_COLUMN_BITMASK = 4L;
    public static long PROPOSALID_COLUMN_BITMASK = 8L;
    public static long ID_COLUMN_BITMASK = 16L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.ProposalContestPhaseAttribute"));
    private static ClassLoader _classLoader = ProposalContestPhaseAttribute.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            ProposalContestPhaseAttribute.class
        };
    private long _id;
    private long _proposalId;
    private long _originalProposalId;
    private boolean _setOriginalProposalId;
    private long _contestPhaseId;
    private long _originalContestPhaseId;
    private boolean _setOriginalContestPhaseId;
    private String _name;
    private String _originalName;
    private long _additionalId;
    private long _originalAdditionalId;
    private boolean _setOriginalAdditionalId;
    private long _numericValue;
    private String _stringValue;
    private double _realValue;
    private long _columnBitmask;
    private ProposalContestPhaseAttribute _escapedModel;

    public ProposalContestPhaseAttributeModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static ProposalContestPhaseAttribute toModel(
        ProposalContestPhaseAttributeSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        ProposalContestPhaseAttribute model = new ProposalContestPhaseAttributeImpl();

        model.setId(soapModel.getId());
        model.setProposalId(soapModel.getProposalId());
        model.setContestPhaseId(soapModel.getContestPhaseId());
        model.setName(soapModel.getName());
        model.setAdditionalId(soapModel.getAdditionalId());
        model.setNumericValue(soapModel.getNumericValue());
        model.setStringValue(soapModel.getStringValue());
        model.setRealValue(soapModel.getRealValue());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<ProposalContestPhaseAttribute> toModels(
        ProposalContestPhaseAttributeSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<ProposalContestPhaseAttribute> models = new ArrayList<ProposalContestPhaseAttribute>(soapModels.length);

        for (ProposalContestPhaseAttributeSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return ProposalContestPhaseAttribute.class;
    }

    @Override
    public String getModelClassName() {
        return ProposalContestPhaseAttribute.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("proposalId", getProposalId());
        attributes.put("contestPhaseId", getContestPhaseId());
        attributes.put("name", getName());
        attributes.put("additionalId", getAdditionalId());
        attributes.put("numericValue", getNumericValue());
        attributes.put("stringValue", getStringValue());
        attributes.put("realValue", getRealValue());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        Long proposalId = (Long) attributes.get("proposalId");

        if (proposalId != null) {
            setProposalId(proposalId);
        }

        Long contestPhaseId = (Long) attributes.get("contestPhaseId");

        if (contestPhaseId != null) {
            setContestPhaseId(contestPhaseId);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        Long additionalId = (Long) attributes.get("additionalId");

        if (additionalId != null) {
            setAdditionalId(additionalId);
        }

        Long numericValue = (Long) attributes.get("numericValue");

        if (numericValue != null) {
            setNumericValue(numericValue);
        }

        String stringValue = (String) attributes.get("stringValue");

        if (stringValue != null) {
            setStringValue(stringValue);
        }

        Double realValue = (Double) attributes.get("realValue");

        if (realValue != null) {
            setRealValue(realValue);
        }
    }

    @JSON
    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @JSON
    @Override
    public long getProposalId() {
        return _proposalId;
    }

    @Override
    public void setProposalId(long proposalId) {
        _columnBitmask |= PROPOSALID_COLUMN_BITMASK;

        if (!_setOriginalProposalId) {
            _setOriginalProposalId = true;

            _originalProposalId = _proposalId;
        }

        _proposalId = proposalId;
    }

    public long getOriginalProposalId() {
        return _originalProposalId;
    }

    @JSON
    @Override
    public long getContestPhaseId() {
        return _contestPhaseId;
    }

    @Override
    public void setContestPhaseId(long contestPhaseId) {
        _columnBitmask |= CONTESTPHASEID_COLUMN_BITMASK;

        if (!_setOriginalContestPhaseId) {
            _setOriginalContestPhaseId = true;

            _originalContestPhaseId = _contestPhaseId;
        }

        _contestPhaseId = contestPhaseId;
    }

    public long getOriginalContestPhaseId() {
        return _originalContestPhaseId;
    }

    @JSON
    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _columnBitmask |= NAME_COLUMN_BITMASK;

        if (_originalName == null) {
            _originalName = _name;
        }

        _name = name;
    }

    public String getOriginalName() {
        return GetterUtil.getString(_originalName);
    }

    @JSON
    @Override
    public long getAdditionalId() {
        return _additionalId;
    }

    @Override
    public void setAdditionalId(long additionalId) {
        _columnBitmask |= ADDITIONALID_COLUMN_BITMASK;

        if (!_setOriginalAdditionalId) {
            _setOriginalAdditionalId = true;

            _originalAdditionalId = _additionalId;
        }

        _additionalId = additionalId;
    }

    public long getOriginalAdditionalId() {
        return _originalAdditionalId;
    }

    @JSON
    @Override
    public long getNumericValue() {
        return _numericValue;
    }

    @Override
    public void setNumericValue(long numericValue) {
        _numericValue = numericValue;
    }

    @JSON
    @Override
    public String getStringValue() {
        if (_stringValue == null) {
            return StringPool.BLANK;
        } else {
            return _stringValue;
        }
    }

    @Override
    public void setStringValue(String stringValue) {
        _stringValue = stringValue;
    }

    @JSON
    @Override
    public double getRealValue() {
        return _realValue;
    }

    @Override
    public void setRealValue(double realValue) {
        _realValue = realValue;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            ProposalContestPhaseAttribute.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public ProposalContestPhaseAttribute toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (ProposalContestPhaseAttribute) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ProposalContestPhaseAttributeImpl proposalContestPhaseAttributeImpl = new ProposalContestPhaseAttributeImpl();

        proposalContestPhaseAttributeImpl.setId(getId());
        proposalContestPhaseAttributeImpl.setProposalId(getProposalId());
        proposalContestPhaseAttributeImpl.setContestPhaseId(getContestPhaseId());
        proposalContestPhaseAttributeImpl.setName(getName());
        proposalContestPhaseAttributeImpl.setAdditionalId(getAdditionalId());
        proposalContestPhaseAttributeImpl.setNumericValue(getNumericValue());
        proposalContestPhaseAttributeImpl.setStringValue(getStringValue());
        proposalContestPhaseAttributeImpl.setRealValue(getRealValue());

        proposalContestPhaseAttributeImpl.resetOriginalValues();

        return proposalContestPhaseAttributeImpl;
    }

    @Override
    public int compareTo(
        ProposalContestPhaseAttribute proposalContestPhaseAttribute) {
        long primaryKey = proposalContestPhaseAttribute.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ProposalContestPhaseAttribute)) {
            return false;
        }

        ProposalContestPhaseAttribute proposalContestPhaseAttribute = (ProposalContestPhaseAttribute) obj;

        long primaryKey = proposalContestPhaseAttribute.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        ProposalContestPhaseAttributeModelImpl proposalContestPhaseAttributeModelImpl =
            this;

        proposalContestPhaseAttributeModelImpl._originalProposalId = proposalContestPhaseAttributeModelImpl._proposalId;

        proposalContestPhaseAttributeModelImpl._setOriginalProposalId = false;

        proposalContestPhaseAttributeModelImpl._originalContestPhaseId = proposalContestPhaseAttributeModelImpl._contestPhaseId;

        proposalContestPhaseAttributeModelImpl._setOriginalContestPhaseId = false;

        proposalContestPhaseAttributeModelImpl._originalName = proposalContestPhaseAttributeModelImpl._name;

        proposalContestPhaseAttributeModelImpl._originalAdditionalId = proposalContestPhaseAttributeModelImpl._additionalId;

        proposalContestPhaseAttributeModelImpl._setOriginalAdditionalId = false;

        proposalContestPhaseAttributeModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<ProposalContestPhaseAttribute> toCacheModel() {
        ProposalContestPhaseAttributeCacheModel proposalContestPhaseAttributeCacheModel =
            new ProposalContestPhaseAttributeCacheModel();

        proposalContestPhaseAttributeCacheModel.id = getId();

        proposalContestPhaseAttributeCacheModel.proposalId = getProposalId();

        proposalContestPhaseAttributeCacheModel.contestPhaseId = getContestPhaseId();

        proposalContestPhaseAttributeCacheModel.name = getName();

        String name = proposalContestPhaseAttributeCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            proposalContestPhaseAttributeCacheModel.name = null;
        }

        proposalContestPhaseAttributeCacheModel.additionalId = getAdditionalId();

        proposalContestPhaseAttributeCacheModel.numericValue = getNumericValue();

        proposalContestPhaseAttributeCacheModel.stringValue = getStringValue();

        String stringValue = proposalContestPhaseAttributeCacheModel.stringValue;

        if ((stringValue != null) && (stringValue.length() == 0)) {
            proposalContestPhaseAttributeCacheModel.stringValue = null;
        }

        proposalContestPhaseAttributeCacheModel.realValue = getRealValue();

        return proposalContestPhaseAttributeCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(17);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", proposalId=");
        sb.append(getProposalId());
        sb.append(", contestPhaseId=");
        sb.append(getContestPhaseId());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", additionalId=");
        sb.append(getAdditionalId());
        sb.append(", numericValue=");
        sb.append(getNumericValue());
        sb.append(", stringValue=");
        sb.append(getStringValue());
        sb.append(", realValue=");
        sb.append(getRealValue());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(28);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.ProposalContestPhaseAttribute");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>proposalId</column-name><column-value><![CDATA[");
        sb.append(getProposalId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contestPhaseId</column-name><column-value><![CDATA[");
        sb.append(getContestPhaseId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>additionalId</column-name><column-value><![CDATA[");
        sb.append(getAdditionalId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>numericValue</column-name><column-value><![CDATA[");
        sb.append(getNumericValue());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>stringValue</column-name><column-value><![CDATA[");
        sb.append(getStringValue());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>realValue</column-name><column-value><![CDATA[");
        sb.append(getRealValue());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
