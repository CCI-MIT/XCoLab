package com.ext.portlet.model.impl;

import com.ext.portlet.model.ContestEmailTemplate;
import com.ext.portlet.model.ContestEmailTemplateModel;
import com.ext.portlet.model.ContestEmailTemplateSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ContestEmailTemplate service. Represents a row in the &quot;xcolab_ContestEmailTemplate&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.ContestEmailTemplateModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ContestEmailTemplateImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ContestEmailTemplateImpl
 * @see com.ext.portlet.model.ContestEmailTemplate
 * @see com.ext.portlet.model.ContestEmailTemplateModel
 * @generated
 */
@JSON(strict = true)
public class ContestEmailTemplateModelImpl extends BaseModelImpl<ContestEmailTemplate>
    implements ContestEmailTemplateModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a contest email template model instance should use the {@link com.ext.portlet.model.ContestEmailTemplate} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_ContestEmailTemplate";
    public static final Object[][] TABLE_COLUMNS = {
            { "type_", Types.CLOB },
            { "subject", Types.CLOB },
            { "header", Types.CLOB },
            { "footer", Types.CLOB }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_ContestEmailTemplate (type_ TEXT not null primary key,subject TEXT null,header TEXT null,footer TEXT null)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_ContestEmailTemplate";
    public static final String ORDER_BY_JPQL = " ORDER BY contestEmailTemplate.type ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_ContestEmailTemplate.type_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.ContestEmailTemplate"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.ContestEmailTemplate"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.ContestEmailTemplate"));
    private static ClassLoader _classLoader = ContestEmailTemplate.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            ContestEmailTemplate.class
        };
    private String _type;
    private String _subject;
    private String _header;
    private String _footer;
    private ContestEmailTemplate _escapedModel;

    public ContestEmailTemplateModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static ContestEmailTemplate toModel(
        ContestEmailTemplateSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        ContestEmailTemplate model = new ContestEmailTemplateImpl();

        model.setType(soapModel.getType());
        model.setSubject(soapModel.getSubject());
        model.setHeader(soapModel.getHeader());
        model.setFooter(soapModel.getFooter());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<ContestEmailTemplate> toModels(
        ContestEmailTemplateSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<ContestEmailTemplate> models = new ArrayList<ContestEmailTemplate>(soapModels.length);

        for (ContestEmailTemplateSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public String getPrimaryKey() {
        return _type;
    }

    @Override
    public void setPrimaryKey(String primaryKey) {
        setType(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _type;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((String) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return ContestEmailTemplate.class;
    }

    @Override
    public String getModelClassName() {
        return ContestEmailTemplate.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("type", getType());
        attributes.put("subject", getSubject());
        attributes.put("header", getHeader());
        attributes.put("footer", getFooter());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String type = (String) attributes.get("type");

        if (type != null) {
            setType(type);
        }

        String subject = (String) attributes.get("subject");

        if (subject != null) {
            setSubject(subject);
        }

        String header = (String) attributes.get("header");

        if (header != null) {
            setHeader(header);
        }

        String footer = (String) attributes.get("footer");

        if (footer != null) {
            setFooter(footer);
        }
    }

    @JSON
    @Override
    public String getType() {
        if (_type == null) {
            return StringPool.BLANK;
        } else {
            return _type;
        }
    }

    @Override
    public void setType(String type) {
        _type = type;
    }

    @JSON
    @Override
    public String getSubject() {
        if (_subject == null) {
            return StringPool.BLANK;
        } else {
            return _subject;
        }
    }

    @Override
    public void setSubject(String subject) {
        _subject = subject;
    }

    @JSON
    @Override
    public String getHeader() {
        if (_header == null) {
            return StringPool.BLANK;
        } else {
            return _header;
        }
    }

    @Override
    public void setHeader(String header) {
        _header = header;
    }

    @JSON
    @Override
    public String getFooter() {
        if (_footer == null) {
            return StringPool.BLANK;
        } else {
            return _footer;
        }
    }

    @Override
    public void setFooter(String footer) {
        _footer = footer;
    }

    @Override
    public ContestEmailTemplate toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (ContestEmailTemplate) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ContestEmailTemplateImpl contestEmailTemplateImpl = new ContestEmailTemplateImpl();

        contestEmailTemplateImpl.setType(getType());
        contestEmailTemplateImpl.setSubject(getSubject());
        contestEmailTemplateImpl.setHeader(getHeader());
        contestEmailTemplateImpl.setFooter(getFooter());

        contestEmailTemplateImpl.resetOriginalValues();

        return contestEmailTemplateImpl;
    }

    @Override
    public int compareTo(ContestEmailTemplate contestEmailTemplate) {
        String primaryKey = contestEmailTemplate.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ContestEmailTemplate)) {
            return false;
        }

        ContestEmailTemplate contestEmailTemplate = (ContestEmailTemplate) obj;

        String primaryKey = contestEmailTemplate.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<ContestEmailTemplate> toCacheModel() {
        ContestEmailTemplateCacheModel contestEmailTemplateCacheModel = new ContestEmailTemplateCacheModel();

        contestEmailTemplateCacheModel.type = getType();

        String type = contestEmailTemplateCacheModel.type;

        if ((type != null) && (type.length() == 0)) {
            contestEmailTemplateCacheModel.type = null;
        }

        contestEmailTemplateCacheModel.subject = getSubject();

        String subject = contestEmailTemplateCacheModel.subject;

        if ((subject != null) && (subject.length() == 0)) {
            contestEmailTemplateCacheModel.subject = null;
        }

        contestEmailTemplateCacheModel.header = getHeader();

        String header = contestEmailTemplateCacheModel.header;

        if ((header != null) && (header.length() == 0)) {
            contestEmailTemplateCacheModel.header = null;
        }

        contestEmailTemplateCacheModel.footer = getFooter();

        String footer = contestEmailTemplateCacheModel.footer;

        if ((footer != null) && (footer.length() == 0)) {
            contestEmailTemplateCacheModel.footer = null;
        }

        return contestEmailTemplateCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(9);

        sb.append("{type=");
        sb.append(getType());
        sb.append(", subject=");
        sb.append(getSubject());
        sb.append(", header=");
        sb.append(getHeader());
        sb.append(", footer=");
        sb.append(getFooter());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(16);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.ContestEmailTemplate");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>type</column-name><column-value><![CDATA[");
        sb.append(getType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>subject</column-name><column-value><![CDATA[");
        sb.append(getSubject());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>header</column-name><column-value><![CDATA[");
        sb.append(getHeader());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>footer</column-name><column-value><![CDATA[");
        sb.append(getFooter());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
