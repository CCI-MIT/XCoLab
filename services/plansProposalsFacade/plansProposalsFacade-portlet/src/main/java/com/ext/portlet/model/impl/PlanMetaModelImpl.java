package com.ext.portlet.model.impl;

import com.ext.portlet.model.PlanMeta;
import com.ext.portlet.model.PlanMetaModel;
import com.ext.portlet.model.PlanMetaSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the PlanMeta service. Represents a row in the &quot;xcolab_PlanMeta&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.PlanMetaModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PlanMetaImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PlanMetaImpl
 * @see com.ext.portlet.model.PlanMeta
 * @see com.ext.portlet.model.PlanMetaModel
 * @generated
 */
@JSON(strict = true)
public class PlanMetaModelImpl extends BaseModelImpl<PlanMeta>
    implements PlanMetaModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a plan meta model instance should use the {@link com.ext.portlet.model.PlanMeta} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_PlanMeta";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "planId", Types.BIGINT },
            { "planTypeId", Types.BIGINT },
            { "planCreated", Types.BIGINT },
            { "authorId", Types.BIGINT },
            { "votes", Types.INTEGER },
            { "planGroupId", Types.BIGINT },
            { "open", Types.BOOLEAN },
            { "status", Types.VARCHAR },
            { "mbCategoryId", Types.BIGINT },
            { "categoryGroupId", Types.BIGINT },
            { "version", Types.BIGINT },
            { "planVersion", Types.BIGINT },
            { "created", Types.TIMESTAMP },
            { "updateAuthorId", Types.BIGINT },
            { "modelId", Types.BIGINT },
            { "promoted", Types.BOOLEAN },
            { "previousContestPhase", Types.BIGINT },
            { "contestPhase", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_PlanMeta (id_ LONG not null primary key,planId LONG,planTypeId LONG,planCreated LONG,authorId LONG,votes INTEGER,planGroupId LONG,open BOOLEAN,status VARCHAR(75) null,mbCategoryId LONG,categoryGroupId LONG,version LONG,planVersion LONG,created DATE null,updateAuthorId LONG,modelId LONG,promoted BOOLEAN,previousContestPhase LONG,contestPhase LONG)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_PlanMeta";
    public static final String ORDER_BY_JPQL = " ORDER BY planMeta.id DESC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_PlanMeta.id_ DESC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.PlanMeta"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.PlanMeta"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.model.PlanMeta"),
            true);
    public static long PLANID_COLUMN_BITMASK = 1L;
    public static long ID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.PlanMeta"));
    private static ClassLoader _classLoader = PlanMeta.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            PlanMeta.class
        };
    private long _id;
    private long _planId;
    private long _originalPlanId;
    private boolean _setOriginalPlanId;
    private long _planTypeId;
    private long _planCreated;
    private long _authorId;
    private int _votes;
    private long _planGroupId;
    private boolean _open;
    private String _status;
    private long _mbCategoryId;
    private long _categoryGroupId;
    private long _version;
    private long _planVersion;
    private Date _created;
    private long _updateAuthorId;
    private long _modelId;
    private boolean _promoted;
    private long _previousContestPhase;
    private long _contestPhase;
    private long _columnBitmask;
    private PlanMeta _escapedModel;

    public PlanMetaModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static PlanMeta toModel(PlanMetaSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        PlanMeta model = new PlanMetaImpl();

        model.setId(soapModel.getId());
        model.setPlanId(soapModel.getPlanId());
        model.setPlanTypeId(soapModel.getPlanTypeId());
        model.setPlanCreated(soapModel.getPlanCreated());
        model.setAuthorId(soapModel.getAuthorId());
        model.setVotes(soapModel.getVotes());
        model.setPlanGroupId(soapModel.getPlanGroupId());
        model.setOpen(soapModel.getOpen());
        model.setStatus(soapModel.getStatus());
        model.setMbCategoryId(soapModel.getMbCategoryId());
        model.setCategoryGroupId(soapModel.getCategoryGroupId());
        model.setVersion(soapModel.getVersion());
        model.setPlanVersion(soapModel.getPlanVersion());
        model.setCreated(soapModel.getCreated());
        model.setUpdateAuthorId(soapModel.getUpdateAuthorId());
        model.setModelId(soapModel.getModelId());
        model.setPromoted(soapModel.getPromoted());
        model.setPreviousContestPhase(soapModel.getPreviousContestPhase());
        model.setContestPhase(soapModel.getContestPhase());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<PlanMeta> toModels(PlanMetaSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<PlanMeta> models = new ArrayList<PlanMeta>(soapModels.length);

        for (PlanMetaSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return PlanMeta.class;
    }

    @Override
    public String getModelClassName() {
        return PlanMeta.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("planId", getPlanId());
        attributes.put("planTypeId", getPlanTypeId());
        attributes.put("planCreated", getPlanCreated());
        attributes.put("authorId", getAuthorId());
        attributes.put("votes", getVotes());
        attributes.put("planGroupId", getPlanGroupId());
        attributes.put("open", getOpen());
        attributes.put("status", getStatus());
        attributes.put("mbCategoryId", getMbCategoryId());
        attributes.put("categoryGroupId", getCategoryGroupId());
        attributes.put("version", getVersion());
        attributes.put("planVersion", getPlanVersion());
        attributes.put("created", getCreated());
        attributes.put("updateAuthorId", getUpdateAuthorId());
        attributes.put("modelId", getModelId());
        attributes.put("promoted", getPromoted());
        attributes.put("previousContestPhase", getPreviousContestPhase());
        attributes.put("contestPhase", getContestPhase());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        Long planId = (Long) attributes.get("planId");

        if (planId != null) {
            setPlanId(planId);
        }

        Long planTypeId = (Long) attributes.get("planTypeId");

        if (planTypeId != null) {
            setPlanTypeId(planTypeId);
        }

        Long planCreated = (Long) attributes.get("planCreated");

        if (planCreated != null) {
            setPlanCreated(planCreated);
        }

        Long authorId = (Long) attributes.get("authorId");

        if (authorId != null) {
            setAuthorId(authorId);
        }

        Integer votes = (Integer) attributes.get("votes");

        if (votes != null) {
            setVotes(votes);
        }

        Long planGroupId = (Long) attributes.get("planGroupId");

        if (planGroupId != null) {
            setPlanGroupId(planGroupId);
        }

        Boolean open = (Boolean) attributes.get("open");

        if (open != null) {
            setOpen(open);
        }

        String status = (String) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }

        Long mbCategoryId = (Long) attributes.get("mbCategoryId");

        if (mbCategoryId != null) {
            setMbCategoryId(mbCategoryId);
        }

        Long categoryGroupId = (Long) attributes.get("categoryGroupId");

        if (categoryGroupId != null) {
            setCategoryGroupId(categoryGroupId);
        }

        Long version = (Long) attributes.get("version");

        if (version != null) {
            setVersion(version);
        }

        Long planVersion = (Long) attributes.get("planVersion");

        if (planVersion != null) {
            setPlanVersion(planVersion);
        }

        Date created = (Date) attributes.get("created");

        if (created != null) {
            setCreated(created);
        }

        Long updateAuthorId = (Long) attributes.get("updateAuthorId");

        if (updateAuthorId != null) {
            setUpdateAuthorId(updateAuthorId);
        }

        Long modelId = (Long) attributes.get("modelId");

        if (modelId != null) {
            setModelId(modelId);
        }

        Boolean promoted = (Boolean) attributes.get("promoted");

        if (promoted != null) {
            setPromoted(promoted);
        }

        Long previousContestPhase = (Long) attributes.get(
                "previousContestPhase");

        if (previousContestPhase != null) {
            setPreviousContestPhase(previousContestPhase);
        }

        Long contestPhase = (Long) attributes.get("contestPhase");

        if (contestPhase != null) {
            setContestPhase(contestPhase);
        }
    }

    @JSON
    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _columnBitmask = -1L;

        _id = id;
    }

    @JSON
    @Override
    public long getPlanId() {
        return _planId;
    }

    @Override
    public void setPlanId(long planId) {
        _columnBitmask |= PLANID_COLUMN_BITMASK;

        if (!_setOriginalPlanId) {
            _setOriginalPlanId = true;

            _originalPlanId = _planId;
        }

        _planId = planId;
    }

    public long getOriginalPlanId() {
        return _originalPlanId;
    }

    @JSON
    @Override
    public long getPlanTypeId() {
        return _planTypeId;
    }

    @Override
    public void setPlanTypeId(long planTypeId) {
        _planTypeId = planTypeId;
    }

    @JSON
    @Override
    public long getPlanCreated() {
        return _planCreated;
    }

    @Override
    public void setPlanCreated(long planCreated) {
        _planCreated = planCreated;
    }

    @JSON
    @Override
    public long getAuthorId() {
        return _authorId;
    }

    @Override
    public void setAuthorId(long authorId) {
        _authorId = authorId;
    }

    @JSON
    @Override
    public int getVotes() {
        return _votes;
    }

    @Override
    public void setVotes(int votes) {
        _votes = votes;
    }

    @JSON
    @Override
    public long getPlanGroupId() {
        return _planGroupId;
    }

    @Override
    public void setPlanGroupId(long planGroupId) {
        _planGroupId = planGroupId;
    }

    @JSON
    @Override
    public boolean getOpen() {
        return _open;
    }

    @Override
    public boolean isOpen() {
        return _open;
    }

    @Override
    public void setOpen(boolean open) {
        _open = open;
    }

    @JSON
    @Override
    public String getStatus() {
        if (_status == null) {
            return StringPool.BLANK;
        } else {
            return _status;
        }
    }

    @Override
    public void setStatus(String status) {
        _status = status;
    }

    @JSON
    @Override
    public long getMbCategoryId() {
        return _mbCategoryId;
    }

    @Override
    public void setMbCategoryId(long mbCategoryId) {
        _mbCategoryId = mbCategoryId;
    }

    @JSON
    @Override
    public long getCategoryGroupId() {
        return _categoryGroupId;
    }

    @Override
    public void setCategoryGroupId(long categoryGroupId) {
        _categoryGroupId = categoryGroupId;
    }

    @JSON
    @Override
    public long getVersion() {
        return _version;
    }

    @Override
    public void setVersion(long version) {
        _version = version;
    }

    @JSON
    @Override
    public long getPlanVersion() {
        return _planVersion;
    }

    @Override
    public void setPlanVersion(long planVersion) {
        _planVersion = planVersion;
    }

    @JSON
    @Override
    public Date getCreated() {
        return _created;
    }

    @Override
    public void setCreated(Date created) {
        _created = created;
    }

    @JSON
    @Override
    public long getUpdateAuthorId() {
        return _updateAuthorId;
    }

    @Override
    public void setUpdateAuthorId(long updateAuthorId) {
        _updateAuthorId = updateAuthorId;
    }

    @JSON
    @Override
    public long getModelId() {
        return _modelId;
    }

    @Override
    public void setModelId(long modelId) {
        _modelId = modelId;
    }

    @JSON
    @Override
    public boolean getPromoted() {
        return _promoted;
    }

    @Override
    public boolean isPromoted() {
        return _promoted;
    }

    @Override
    public void setPromoted(boolean promoted) {
        _promoted = promoted;
    }

    @JSON
    @Override
    public long getPreviousContestPhase() {
        return _previousContestPhase;
    }

    @Override
    public void setPreviousContestPhase(long previousContestPhase) {
        _previousContestPhase = previousContestPhase;
    }

    @JSON
    @Override
    public long getContestPhase() {
        return _contestPhase;
    }

    @Override
    public void setContestPhase(long contestPhase) {
        _contestPhase = contestPhase;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            PlanMeta.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public PlanMeta toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (PlanMeta) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        PlanMetaImpl planMetaImpl = new PlanMetaImpl();

        planMetaImpl.setId(getId());
        planMetaImpl.setPlanId(getPlanId());
        planMetaImpl.setPlanTypeId(getPlanTypeId());
        planMetaImpl.setPlanCreated(getPlanCreated());
        planMetaImpl.setAuthorId(getAuthorId());
        planMetaImpl.setVotes(getVotes());
        planMetaImpl.setPlanGroupId(getPlanGroupId());
        planMetaImpl.setOpen(getOpen());
        planMetaImpl.setStatus(getStatus());
        planMetaImpl.setMbCategoryId(getMbCategoryId());
        planMetaImpl.setCategoryGroupId(getCategoryGroupId());
        planMetaImpl.setVersion(getVersion());
        planMetaImpl.setPlanVersion(getPlanVersion());
        planMetaImpl.setCreated(getCreated());
        planMetaImpl.setUpdateAuthorId(getUpdateAuthorId());
        planMetaImpl.setModelId(getModelId());
        planMetaImpl.setPromoted(getPromoted());
        planMetaImpl.setPreviousContestPhase(getPreviousContestPhase());
        planMetaImpl.setContestPhase(getContestPhase());

        planMetaImpl.resetOriginalValues();

        return planMetaImpl;
    }

    @Override
    public int compareTo(PlanMeta planMeta) {
        int value = 0;

        if (getId() < planMeta.getId()) {
            value = -1;
        } else if (getId() > planMeta.getId()) {
            value = 1;
        } else {
            value = 0;
        }

        value = value * -1;

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof PlanMeta)) {
            return false;
        }

        PlanMeta planMeta = (PlanMeta) obj;

        long primaryKey = planMeta.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        PlanMetaModelImpl planMetaModelImpl = this;

        planMetaModelImpl._originalPlanId = planMetaModelImpl._planId;

        planMetaModelImpl._setOriginalPlanId = false;

        planMetaModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<PlanMeta> toCacheModel() {
        PlanMetaCacheModel planMetaCacheModel = new PlanMetaCacheModel();

        planMetaCacheModel.id = getId();

        planMetaCacheModel.planId = getPlanId();

        planMetaCacheModel.planTypeId = getPlanTypeId();

        planMetaCacheModel.planCreated = getPlanCreated();

        planMetaCacheModel.authorId = getAuthorId();

        planMetaCacheModel.votes = getVotes();

        planMetaCacheModel.planGroupId = getPlanGroupId();

        planMetaCacheModel.open = getOpen();

        planMetaCacheModel.status = getStatus();

        String status = planMetaCacheModel.status;

        if ((status != null) && (status.length() == 0)) {
            planMetaCacheModel.status = null;
        }

        planMetaCacheModel.mbCategoryId = getMbCategoryId();

        planMetaCacheModel.categoryGroupId = getCategoryGroupId();

        planMetaCacheModel.version = getVersion();

        planMetaCacheModel.planVersion = getPlanVersion();

        Date created = getCreated();

        if (created != null) {
            planMetaCacheModel.created = created.getTime();
        } else {
            planMetaCacheModel.created = Long.MIN_VALUE;
        }

        planMetaCacheModel.updateAuthorId = getUpdateAuthorId();

        planMetaCacheModel.modelId = getModelId();

        planMetaCacheModel.promoted = getPromoted();

        planMetaCacheModel.previousContestPhase = getPreviousContestPhase();

        planMetaCacheModel.contestPhase = getContestPhase();

        return planMetaCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(39);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", planId=");
        sb.append(getPlanId());
        sb.append(", planTypeId=");
        sb.append(getPlanTypeId());
        sb.append(", planCreated=");
        sb.append(getPlanCreated());
        sb.append(", authorId=");
        sb.append(getAuthorId());
        sb.append(", votes=");
        sb.append(getVotes());
        sb.append(", planGroupId=");
        sb.append(getPlanGroupId());
        sb.append(", open=");
        sb.append(getOpen());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append(", mbCategoryId=");
        sb.append(getMbCategoryId());
        sb.append(", categoryGroupId=");
        sb.append(getCategoryGroupId());
        sb.append(", version=");
        sb.append(getVersion());
        sb.append(", planVersion=");
        sb.append(getPlanVersion());
        sb.append(", created=");
        sb.append(getCreated());
        sb.append(", updateAuthorId=");
        sb.append(getUpdateAuthorId());
        sb.append(", modelId=");
        sb.append(getModelId());
        sb.append(", promoted=");
        sb.append(getPromoted());
        sb.append(", previousContestPhase=");
        sb.append(getPreviousContestPhase());
        sb.append(", contestPhase=");
        sb.append(getContestPhase());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(61);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.PlanMeta");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>planId</column-name><column-value><![CDATA[");
        sb.append(getPlanId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>planTypeId</column-name><column-value><![CDATA[");
        sb.append(getPlanTypeId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>planCreated</column-name><column-value><![CDATA[");
        sb.append(getPlanCreated());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>authorId</column-name><column-value><![CDATA[");
        sb.append(getAuthorId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>votes</column-name><column-value><![CDATA[");
        sb.append(getVotes());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>planGroupId</column-name><column-value><![CDATA[");
        sb.append(getPlanGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>open</column-name><column-value><![CDATA[");
        sb.append(getOpen());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>mbCategoryId</column-name><column-value><![CDATA[");
        sb.append(getMbCategoryId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>categoryGroupId</column-name><column-value><![CDATA[");
        sb.append(getCategoryGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>version</column-name><column-value><![CDATA[");
        sb.append(getVersion());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>planVersion</column-name><column-value><![CDATA[");
        sb.append(getPlanVersion());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>created</column-name><column-value><![CDATA[");
        sb.append(getCreated());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>updateAuthorId</column-name><column-value><![CDATA[");
        sb.append(getUpdateAuthorId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modelId</column-name><column-value><![CDATA[");
        sb.append(getModelId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>promoted</column-name><column-value><![CDATA[");
        sb.append(getPromoted());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>previousContestPhase</column-name><column-value><![CDATA[");
        sb.append(getPreviousContestPhase());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contestPhase</column-name><column-value><![CDATA[");
        sb.append(getContestPhase());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
