package com.ext.portlet.model.impl;

import com.ext.portlet.model.BalloonLink;
import com.ext.portlet.model.BalloonLinkModel;
import com.ext.portlet.model.BalloonLinkSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the BalloonLink service. Represents a row in the &quot;xcolab_BalloonLink&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.BalloonLinkModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BalloonLinkImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see BalloonLinkImpl
 * @see com.ext.portlet.model.BalloonLink
 * @see com.ext.portlet.model.BalloonLinkModel
 * @generated
 */
@JSON(strict = true)
public class BalloonLinkModelImpl extends BaseModelImpl<BalloonLink>
    implements BalloonLinkModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a balloon link model instance should use the {@link com.ext.portlet.model.BalloonLink} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_BalloonLink";
    public static final Object[][] TABLE_COLUMNS = {
            { "uuid_", Types.VARCHAR },
            { "targetUrl", Types.VARCHAR },
            { "visits", Types.INTEGER },
            { "balloonUserUuid", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_BalloonLink (uuid_ VARCHAR(75) not null primary key,targetUrl VARCHAR(75) null,visits INTEGER,balloonUserUuid VARCHAR(75) null,createDate DATE null)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_BalloonLink";
    public static final String ORDER_BY_JPQL = " ORDER BY balloonLink.uuid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_BalloonLink.uuid_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.BalloonLink"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.BalloonLink"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.model.BalloonLink"),
            true);
    public static long BALLOONUSERUUID_COLUMN_BITMASK = 1L;
    public static long UUID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.BalloonLink"));
    private static ClassLoader _classLoader = BalloonLink.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            BalloonLink.class
        };
    private String _uuid;
    private String _targetUrl;
    private int _visits;
    private String _balloonUserUuid;
    private String _originalBalloonUserUuid;
    private Date _createDate;
    private long _columnBitmask;
    private BalloonLink _escapedModel;

    public BalloonLinkModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static BalloonLink toModel(BalloonLinkSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        BalloonLink model = new BalloonLinkImpl();

        model.setUuid(soapModel.getUuid());
        model.setTargetUrl(soapModel.getTargetUrl());
        model.setVisits(soapModel.getVisits());
        model.setBalloonUserUuid(soapModel.getBalloonUserUuid());
        model.setCreateDate(soapModel.getCreateDate());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<BalloonLink> toModels(BalloonLinkSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<BalloonLink> models = new ArrayList<BalloonLink>(soapModels.length);

        for (BalloonLinkSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public String getPrimaryKey() {
        return _uuid;
    }

    @Override
    public void setPrimaryKey(String primaryKey) {
        setUuid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _uuid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((String) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return BalloonLink.class;
    }

    @Override
    public String getModelClassName() {
        return BalloonLink.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("uuid", getUuid());
        attributes.put("targetUrl", getTargetUrl());
        attributes.put("visits", getVisits());
        attributes.put("balloonUserUuid", getBalloonUserUuid());
        attributes.put("createDate", getCreateDate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String uuid = (String) attributes.get("uuid");

        if (uuid != null) {
            setUuid(uuid);
        }

        String targetUrl = (String) attributes.get("targetUrl");

        if (targetUrl != null) {
            setTargetUrl(targetUrl);
        }

        Integer visits = (Integer) attributes.get("visits");

        if (visits != null) {
            setVisits(visits);
        }

        String balloonUserUuid = (String) attributes.get("balloonUserUuid");

        if (balloonUserUuid != null) {
            setBalloonUserUuid(balloonUserUuid);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }
    }

    @JSON
    @Override
    public String getUuid() {
        if (_uuid == null) {
            return StringPool.BLANK;
        } else {
            return _uuid;
        }
    }

    @Override
    public void setUuid(String uuid) {
        _uuid = uuid;
    }

    @JSON
    @Override
    public String getTargetUrl() {
        if (_targetUrl == null) {
            return StringPool.BLANK;
        } else {
            return _targetUrl;
        }
    }

    @Override
    public void setTargetUrl(String targetUrl) {
        _targetUrl = targetUrl;
    }

    @JSON
    @Override
    public int getVisits() {
        return _visits;
    }

    @Override
    public void setVisits(int visits) {
        _visits = visits;
    }

    @JSON
    @Override
    public String getBalloonUserUuid() {
        if (_balloonUserUuid == null) {
            return StringPool.BLANK;
        } else {
            return _balloonUserUuid;
        }
    }

    @Override
    public void setBalloonUserUuid(String balloonUserUuid) {
        _columnBitmask |= BALLOONUSERUUID_COLUMN_BITMASK;

        if (_originalBalloonUserUuid == null) {
            _originalBalloonUserUuid = _balloonUserUuid;
        }

        _balloonUserUuid = balloonUserUuid;
    }

    public String getOriginalBalloonUserUuid() {
        return GetterUtil.getString(_originalBalloonUserUuid);
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public BalloonLink toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (BalloonLink) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        BalloonLinkImpl balloonLinkImpl = new BalloonLinkImpl();

        balloonLinkImpl.setUuid(getUuid());
        balloonLinkImpl.setTargetUrl(getTargetUrl());
        balloonLinkImpl.setVisits(getVisits());
        balloonLinkImpl.setBalloonUserUuid(getBalloonUserUuid());
        balloonLinkImpl.setCreateDate(getCreateDate());

        balloonLinkImpl.resetOriginalValues();

        return balloonLinkImpl;
    }

    @Override
    public int compareTo(BalloonLink balloonLink) {
        String primaryKey = balloonLink.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof BalloonLink)) {
            return false;
        }

        BalloonLink balloonLink = (BalloonLink) obj;

        String primaryKey = balloonLink.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        BalloonLinkModelImpl balloonLinkModelImpl = this;

        balloonLinkModelImpl._originalBalloonUserUuid = balloonLinkModelImpl._balloonUserUuid;

        balloonLinkModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<BalloonLink> toCacheModel() {
        BalloonLinkCacheModel balloonLinkCacheModel = new BalloonLinkCacheModel();

        balloonLinkCacheModel.uuid = getUuid();

        String uuid = balloonLinkCacheModel.uuid;

        if ((uuid != null) && (uuid.length() == 0)) {
            balloonLinkCacheModel.uuid = null;
        }

        balloonLinkCacheModel.targetUrl = getTargetUrl();

        String targetUrl = balloonLinkCacheModel.targetUrl;

        if ((targetUrl != null) && (targetUrl.length() == 0)) {
            balloonLinkCacheModel.targetUrl = null;
        }

        balloonLinkCacheModel.visits = getVisits();

        balloonLinkCacheModel.balloonUserUuid = getBalloonUserUuid();

        String balloonUserUuid = balloonLinkCacheModel.balloonUserUuid;

        if ((balloonUserUuid != null) && (balloonUserUuid.length() == 0)) {
            balloonLinkCacheModel.balloonUserUuid = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            balloonLinkCacheModel.createDate = createDate.getTime();
        } else {
            balloonLinkCacheModel.createDate = Long.MIN_VALUE;
        }

        return balloonLinkCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{uuid=");
        sb.append(getUuid());
        sb.append(", targetUrl=");
        sb.append(getTargetUrl());
        sb.append(", visits=");
        sb.append(getVisits());
        sb.append(", balloonUserUuid=");
        sb.append(getBalloonUserUuid());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.BalloonLink");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>uuid</column-name><column-value><![CDATA[");
        sb.append(getUuid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>targetUrl</column-name><column-value><![CDATA[");
        sb.append(getTargetUrl());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>visits</column-name><column-value><![CDATA[");
        sb.append(getVisits());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>balloonUserUuid</column-name><column-value><![CDATA[");
        sb.append(getBalloonUserUuid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
