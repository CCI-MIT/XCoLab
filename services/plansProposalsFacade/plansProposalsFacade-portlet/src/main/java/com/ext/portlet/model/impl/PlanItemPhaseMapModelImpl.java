package com.ext.portlet.model.impl;

import com.ext.portlet.model.PlanItemPhaseMap;
import com.ext.portlet.model.PlanItemPhaseMapModel;
import com.ext.portlet.model.PlanItemPhaseMapSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.List;

/**
 * The base model implementation for the PlanItemPhaseMap service. Represents a row in the &quot;xcolab_PlanItemPhaseMap&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.PlanItemPhaseMapModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PlanItemPhaseMapImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PlanItemPhaseMapImpl
 * @see com.ext.portlet.model.PlanItemPhaseMap
 * @see com.ext.portlet.model.PlanItemPhaseMapModel
 * @generated
 */
@JSON(strict = true)
public class PlanItemPhaseMapModelImpl extends BaseModelImpl<PlanItemPhaseMap>
    implements PlanItemPhaseMapModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a plan item phase map model instance should use the {@link com.ext.portlet.model.PlanItemPhaseMap} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_PlanItemPhaseMap";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "planId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_PlanItemPhaseMap (id_ LONG not null primary key,planId LONG)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_PlanItemPhaseMap";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.PlanItemPhaseMap"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.PlanItemPhaseMap"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.PlanItemPhaseMap"));
    private static ClassLoader _classLoader = PlanItemPhaseMap.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            PlanItemPhaseMap.class
        };
    private long _id;
    private long _planId;
    private transient ExpandoBridge _expandoBridge;
    private PlanItemPhaseMap _escapedModelProxy;

    public PlanItemPhaseMapModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static PlanItemPhaseMap toModel(PlanItemPhaseMapSoap soapModel) {
        PlanItemPhaseMap model = new PlanItemPhaseMapImpl();

        model.setId(soapModel.getId());
        model.setPlanId(soapModel.getPlanId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<PlanItemPhaseMap> toModels(
        PlanItemPhaseMapSoap[] soapModels) {
        List<PlanItemPhaseMap> models = new ArrayList<PlanItemPhaseMap>(soapModels.length);

        for (PlanItemPhaseMapSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public long getPrimaryKey() {
        return _id;
    }

    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_id);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return PlanItemPhaseMap.class;
    }

    public String getModelClassName() {
        return PlanItemPhaseMap.class.getName();
    }

    @JSON
    public long getId() {
        return _id;
    }

    public void setId(long id) {
        _id = id;
    }

    @JSON
    public long getPlanId() {
        return _planId;
    }

    public void setPlanId(long planId) {
        _planId = planId;
    }

    @Override
    public PlanItemPhaseMap toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (PlanItemPhaseMap) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        if (_expandoBridge == null) {
            _expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
                    PlanItemPhaseMap.class.getName(), getPrimaryKey());
        }

        return _expandoBridge;
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        getExpandoBridge().setAttributes(serviceContext);
    }

    @Override
    public Object clone() {
        PlanItemPhaseMapImpl planItemPhaseMapImpl = new PlanItemPhaseMapImpl();

        planItemPhaseMapImpl.setId(getId());
        planItemPhaseMapImpl.setPlanId(getPlanId());

        planItemPhaseMapImpl.resetOriginalValues();

        return planItemPhaseMapImpl;
    }

    public int compareTo(PlanItemPhaseMap planItemPhaseMap) {
        long primaryKey = planItemPhaseMap.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        PlanItemPhaseMap planItemPhaseMap = null;

        try {
            planItemPhaseMap = (PlanItemPhaseMap) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = planItemPhaseMap.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<PlanItemPhaseMap> toCacheModel() {
        PlanItemPhaseMapCacheModel planItemPhaseMapCacheModel = new PlanItemPhaseMapCacheModel();

        planItemPhaseMapCacheModel.id = getId();

        planItemPhaseMapCacheModel.planId = getPlanId();

        return planItemPhaseMapCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(5);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", planId=");
        sb.append(getPlanId());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(10);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.PlanItemPhaseMap");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>planId</column-name><column-value><![CDATA[");
        sb.append(getPlanId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
