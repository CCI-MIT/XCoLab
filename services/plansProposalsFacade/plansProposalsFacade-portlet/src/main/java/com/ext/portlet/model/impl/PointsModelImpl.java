package com.ext.portlet.model.impl;

import com.ext.portlet.model.Points;
import com.ext.portlet.model.PointsModel;
import com.ext.portlet.model.PointsSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Points service. Represents a row in the &quot;xcolab_Points&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.PointsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PointsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PointsImpl
 * @see com.ext.portlet.model.Points
 * @see com.ext.portlet.model.PointsModel
 * @generated
 */
@JSON(strict = true)
public class PointsModelImpl extends BaseModelImpl<Points>
    implements PointsModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a points model instance should use the {@link com.ext.portlet.model.Points} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_Points";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "proposalId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "materializedPoints", Types.DOUBLE },
            { "hypotheticalPoints", Types.DOUBLE },
            { "pointsSourceId", Types.BIGINT },
            { "originatingContestPK", Types.BIGINT },
            { "originatingProposalId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_Points (id_ LONG not null primary key,proposalId LONG,userId LONG,materializedPoints DOUBLE,hypotheticalPoints DOUBLE,pointsSourceId LONG,originatingContestPK LONG,originatingProposalId LONG)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_Points";
    public static final String ORDER_BY_JPQL = " ORDER BY points.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_Points.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.Points"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.Points"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.model.Points"),
            true);
    public static long ORIGINATINGCONTESTPK_COLUMN_BITMASK = 1L;
    public static long POINTSSOURCEID_COLUMN_BITMASK = 2L;
    public static long PROPOSALID_COLUMN_BITMASK = 4L;
    public static long USERID_COLUMN_BITMASK = 8L;
    public static long ID_COLUMN_BITMASK = 16L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.Points"));
    private static ClassLoader _classLoader = Points.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Points.class };
    private long _id;
    private long _proposalId;
    private long _originalProposalId;
    private boolean _setOriginalProposalId;
    private long _userId;
    private String _userUuid;
    private long _originalUserId;
    private boolean _setOriginalUserId;
    private double _materializedPoints;
    private double _hypotheticalPoints;
    private long _pointsSourceId;
    private long _originalPointsSourceId;
    private boolean _setOriginalPointsSourceId;
    private long _originatingContestPK;
    private long _originalOriginatingContestPK;
    private boolean _setOriginalOriginatingContestPK;
    private long _originatingProposalId;
    private long _columnBitmask;
    private Points _escapedModel;

    public PointsModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Points toModel(PointsSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Points model = new PointsImpl();

        model.setId(soapModel.getId());
        model.setProposalId(soapModel.getProposalId());
        model.setUserId(soapModel.getUserId());
        model.setMaterializedPoints(soapModel.getMaterializedPoints());
        model.setHypotheticalPoints(soapModel.getHypotheticalPoints());
        model.setPointsSourceId(soapModel.getPointsSourceId());
        model.setOriginatingContestPK(soapModel.getOriginatingContestPK());
        model.setOriginatingProposalId(soapModel.getOriginatingProposalId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Points> toModels(PointsSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Points> models = new ArrayList<Points>(soapModels.length);

        for (PointsSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Points.class;
    }

    @Override
    public String getModelClassName() {
        return Points.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("proposalId", getProposalId());
        attributes.put("userId", getUserId());
        attributes.put("materializedPoints", getMaterializedPoints());
        attributes.put("hypotheticalPoints", getHypotheticalPoints());
        attributes.put("pointsSourceId", getPointsSourceId());
        attributes.put("originatingContestPK", getOriginatingContestPK());
        attributes.put("originatingProposalId", getOriginatingProposalId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        Long proposalId = (Long) attributes.get("proposalId");

        if (proposalId != null) {
            setProposalId(proposalId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Double materializedPoints = (Double) attributes.get(
                "materializedPoints");

        if (materializedPoints != null) {
            setMaterializedPoints(materializedPoints);
        }

        Double hypotheticalPoints = (Double) attributes.get(
                "hypotheticalPoints");

        if (hypotheticalPoints != null) {
            setHypotheticalPoints(hypotheticalPoints);
        }

        Long pointsSourceId = (Long) attributes.get("pointsSourceId");

        if (pointsSourceId != null) {
            setPointsSourceId(pointsSourceId);
        }

        Long originatingContestPK = (Long) attributes.get(
                "originatingContestPK");

        if (originatingContestPK != null) {
            setOriginatingContestPK(originatingContestPK);
        }

        Long originatingProposalId = (Long) attributes.get(
                "originatingProposalId");

        if (originatingProposalId != null) {
            setOriginatingProposalId(originatingProposalId);
        }
    }

    @JSON
    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @JSON
    @Override
    public long getProposalId() {
        return _proposalId;
    }

    @Override
    public void setProposalId(long proposalId) {
        _columnBitmask |= PROPOSALID_COLUMN_BITMASK;

        if (!_setOriginalProposalId) {
            _setOriginalProposalId = true;

            _originalProposalId = _proposalId;
        }

        _proposalId = proposalId;
    }

    public long getOriginalProposalId() {
        return _originalProposalId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _columnBitmask |= USERID_COLUMN_BITMASK;

        if (!_setOriginalUserId) {
            _setOriginalUserId = true;

            _originalUserId = _userId;
        }

        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    public long getOriginalUserId() {
        return _originalUserId;
    }

    @JSON
    @Override
    public double getMaterializedPoints() {
        return _materializedPoints;
    }

    @Override
    public void setMaterializedPoints(double materializedPoints) {
        _materializedPoints = materializedPoints;
    }

    @JSON
    @Override
    public double getHypotheticalPoints() {
        return _hypotheticalPoints;
    }

    @Override
    public void setHypotheticalPoints(double hypotheticalPoints) {
        _hypotheticalPoints = hypotheticalPoints;
    }

    @JSON
    @Override
    public long getPointsSourceId() {
        return _pointsSourceId;
    }

    @Override
    public void setPointsSourceId(long pointsSourceId) {
        _columnBitmask |= POINTSSOURCEID_COLUMN_BITMASK;

        if (!_setOriginalPointsSourceId) {
            _setOriginalPointsSourceId = true;

            _originalPointsSourceId = _pointsSourceId;
        }

        _pointsSourceId = pointsSourceId;
    }

    public long getOriginalPointsSourceId() {
        return _originalPointsSourceId;
    }

    @JSON
    @Override
    public long getOriginatingContestPK() {
        return _originatingContestPK;
    }

    @Override
    public void setOriginatingContestPK(long originatingContestPK) {
        _columnBitmask |= ORIGINATINGCONTESTPK_COLUMN_BITMASK;

        if (!_setOriginalOriginatingContestPK) {
            _setOriginalOriginatingContestPK = true;

            _originalOriginatingContestPK = _originatingContestPK;
        }

        _originatingContestPK = originatingContestPK;
    }

    public long getOriginalOriginatingContestPK() {
        return _originalOriginatingContestPK;
    }

    @JSON
    @Override
    public long getOriginatingProposalId() {
        return _originatingProposalId;
    }

    @Override
    public void setOriginatingProposalId(long originatingProposalId) {
        _originatingProposalId = originatingProposalId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Points.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Points toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Points) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        PointsImpl pointsImpl = new PointsImpl();

        pointsImpl.setId(getId());
        pointsImpl.setProposalId(getProposalId());
        pointsImpl.setUserId(getUserId());
        pointsImpl.setMaterializedPoints(getMaterializedPoints());
        pointsImpl.setHypotheticalPoints(getHypotheticalPoints());
        pointsImpl.setPointsSourceId(getPointsSourceId());
        pointsImpl.setOriginatingContestPK(getOriginatingContestPK());
        pointsImpl.setOriginatingProposalId(getOriginatingProposalId());

        pointsImpl.resetOriginalValues();

        return pointsImpl;
    }

    @Override
    public int compareTo(Points points) {
        long primaryKey = points.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Points)) {
            return false;
        }

        Points points = (Points) obj;

        long primaryKey = points.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        PointsModelImpl pointsModelImpl = this;

        pointsModelImpl._originalProposalId = pointsModelImpl._proposalId;

        pointsModelImpl._setOriginalProposalId = false;

        pointsModelImpl._originalUserId = pointsModelImpl._userId;

        pointsModelImpl._setOriginalUserId = false;

        pointsModelImpl._originalPointsSourceId = pointsModelImpl._pointsSourceId;

        pointsModelImpl._setOriginalPointsSourceId = false;

        pointsModelImpl._originalOriginatingContestPK = pointsModelImpl._originatingContestPK;

        pointsModelImpl._setOriginalOriginatingContestPK = false;

        pointsModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Points> toCacheModel() {
        PointsCacheModel pointsCacheModel = new PointsCacheModel();

        pointsCacheModel.id = getId();

        pointsCacheModel.proposalId = getProposalId();

        pointsCacheModel.userId = getUserId();

        pointsCacheModel.materializedPoints = getMaterializedPoints();

        pointsCacheModel.hypotheticalPoints = getHypotheticalPoints();

        pointsCacheModel.pointsSourceId = getPointsSourceId();

        pointsCacheModel.originatingContestPK = getOriginatingContestPK();

        pointsCacheModel.originatingProposalId = getOriginatingProposalId();

        return pointsCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(17);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", proposalId=");
        sb.append(getProposalId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", materializedPoints=");
        sb.append(getMaterializedPoints());
        sb.append(", hypotheticalPoints=");
        sb.append(getHypotheticalPoints());
        sb.append(", pointsSourceId=");
        sb.append(getPointsSourceId());
        sb.append(", originatingContestPK=");
        sb.append(getOriginatingContestPK());
        sb.append(", originatingProposalId=");
        sb.append(getOriginatingProposalId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(28);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.Points");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>proposalId</column-name><column-value><![CDATA[");
        sb.append(getProposalId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>materializedPoints</column-name><column-value><![CDATA[");
        sb.append(getMaterializedPoints());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>hypotheticalPoints</column-name><column-value><![CDATA[");
        sb.append(getHypotheticalPoints());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>pointsSourceId</column-name><column-value><![CDATA[");
        sb.append(getPointsSourceId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>originatingContestPK</column-name><column-value><![CDATA[");
        sb.append(getOriginatingContestPK());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>originatingProposalId</column-name><column-value><![CDATA[");
        sb.append(getOriginatingProposalId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
