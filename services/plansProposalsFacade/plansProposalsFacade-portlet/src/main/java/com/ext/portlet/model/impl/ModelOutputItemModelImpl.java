package com.ext.portlet.model.impl;

import com.ext.portlet.model.ModelOutputItem;
import com.ext.portlet.model.ModelOutputItemModel;
import com.ext.portlet.model.ModelOutputItemSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ModelOutputItem service. Represents a row in the &quot;xcolab_ModelOutputItem&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.ModelOutputItemModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ModelOutputItemImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ModelOutputItemImpl
 * @see com.ext.portlet.model.ModelOutputItem
 * @see com.ext.portlet.model.ModelOutputItemModel
 * @generated
 */
@JSON(strict = true)
public class ModelOutputItemModelImpl extends BaseModelImpl<ModelOutputItem>
    implements ModelOutputItemModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a model output item model instance should use the {@link com.ext.portlet.model.ModelOutputItem} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_ModelOutputItem";
    public static final Object[][] TABLE_COLUMNS = {
            { "modelOutputItemModifierPK", Types.BIGINT },
            { "modelId", Types.BIGINT },
            { "modelOutputItemId", Types.BIGINT },
            { "modelOutputItemOrder", Types.INTEGER },
            { "modelItemRangePolicy", Types.VARCHAR },
            { "modelItemRangeMessage", Types.VARCHAR },
            { "modelItemErrorPolicy", Types.VARCHAR },
            { "modelItemErrorMessage", Types.VARCHAR },
            { "modelItemLabelFormat", Types.VARCHAR },
            { "modelItemIsVisible", Types.BOOLEAN },
            { "itemType", Types.VARCHAR },
            { "relatedOutputItem", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_ModelOutputItem (modelOutputItemModifierPK LONG not null primary key,modelId LONG,modelOutputItemId LONG,modelOutputItemOrder INTEGER,modelItemRangePolicy VARCHAR(75) null,modelItemRangeMessage VARCHAR(75) null,modelItemErrorPolicy VARCHAR(75) null,modelItemErrorMessage VARCHAR(75) null,modelItemLabelFormat VARCHAR(75) null,modelItemIsVisible BOOLEAN,itemType VARCHAR(75) null,relatedOutputItem LONG)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_ModelOutputItem";
    public static final String ORDER_BY_JPQL = " ORDER BY modelOutputItem.modelOutputItemModifierPK ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_ModelOutputItem.modelOutputItemModifierPK ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.ModelOutputItem"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.ModelOutputItem"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.model.ModelOutputItem"),
            true);
    public static long MODELOUTPUTITEMID_COLUMN_BITMASK = 1L;
    public static long MODELOUTPUTITEMMODIFIERPK_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.ModelOutputItem"));
    private static ClassLoader _classLoader = ModelOutputItem.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            ModelOutputItem.class
        };
    private long _modelOutputItemModifierPK;
    private long _modelId;
    private long _modelOutputItemId;
    private long _originalModelOutputItemId;
    private boolean _setOriginalModelOutputItemId;
    private int _modelOutputItemOrder;
    private String _modelItemRangePolicy;
    private String _modelItemRangeMessage;
    private String _modelItemErrorPolicy;
    private String _modelItemErrorMessage;
    private String _modelItemLabelFormat;
    private boolean _modelItemIsVisible;
    private String _itemType;
    private long _relatedOutputItem;
    private long _columnBitmask;
    private ModelOutputItem _escapedModel;

    public ModelOutputItemModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static ModelOutputItem toModel(ModelOutputItemSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        ModelOutputItem model = new ModelOutputItemImpl();

        model.setModelOutputItemModifierPK(soapModel.getModelOutputItemModifierPK());
        model.setModelId(soapModel.getModelId());
        model.setModelOutputItemId(soapModel.getModelOutputItemId());
        model.setModelOutputItemOrder(soapModel.getModelOutputItemOrder());
        model.setModelItemRangePolicy(soapModel.getModelItemRangePolicy());
        model.setModelItemRangeMessage(soapModel.getModelItemRangeMessage());
        model.setModelItemErrorPolicy(soapModel.getModelItemErrorPolicy());
        model.setModelItemErrorMessage(soapModel.getModelItemErrorMessage());
        model.setModelItemLabelFormat(soapModel.getModelItemLabelFormat());
        model.setModelItemIsVisible(soapModel.getModelItemIsVisible());
        model.setItemType(soapModel.getItemType());
        model.setRelatedOutputItem(soapModel.getRelatedOutputItem());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<ModelOutputItem> toModels(
        ModelOutputItemSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<ModelOutputItem> models = new ArrayList<ModelOutputItem>(soapModels.length);

        for (ModelOutputItemSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _modelOutputItemModifierPK;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setModelOutputItemModifierPK(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _modelOutputItemModifierPK;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return ModelOutputItem.class;
    }

    @Override
    public String getModelClassName() {
        return ModelOutputItem.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("modelOutputItemModifierPK",
            getModelOutputItemModifierPK());
        attributes.put("modelId", getModelId());
        attributes.put("modelOutputItemId", getModelOutputItemId());
        attributes.put("modelOutputItemOrder", getModelOutputItemOrder());
        attributes.put("modelItemRangePolicy", getModelItemRangePolicy());
        attributes.put("modelItemRangeMessage", getModelItemRangeMessage());
        attributes.put("modelItemErrorPolicy", getModelItemErrorPolicy());
        attributes.put("modelItemErrorMessage", getModelItemErrorMessage());
        attributes.put("modelItemLabelFormat", getModelItemLabelFormat());
        attributes.put("modelItemIsVisible", getModelItemIsVisible());
        attributes.put("itemType", getItemType());
        attributes.put("relatedOutputItem", getRelatedOutputItem());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long modelOutputItemModifierPK = (Long) attributes.get(
                "modelOutputItemModifierPK");

        if (modelOutputItemModifierPK != null) {
            setModelOutputItemModifierPK(modelOutputItemModifierPK);
        }

        Long modelId = (Long) attributes.get("modelId");

        if (modelId != null) {
            setModelId(modelId);
        }

        Long modelOutputItemId = (Long) attributes.get("modelOutputItemId");

        if (modelOutputItemId != null) {
            setModelOutputItemId(modelOutputItemId);
        }

        Integer modelOutputItemOrder = (Integer) attributes.get(
                "modelOutputItemOrder");

        if (modelOutputItemOrder != null) {
            setModelOutputItemOrder(modelOutputItemOrder);
        }

        String modelItemRangePolicy = (String) attributes.get(
                "modelItemRangePolicy");

        if (modelItemRangePolicy != null) {
            setModelItemRangePolicy(modelItemRangePolicy);
        }

        String modelItemRangeMessage = (String) attributes.get(
                "modelItemRangeMessage");

        if (modelItemRangeMessage != null) {
            setModelItemRangeMessage(modelItemRangeMessage);
        }

        String modelItemErrorPolicy = (String) attributes.get(
                "modelItemErrorPolicy");

        if (modelItemErrorPolicy != null) {
            setModelItemErrorPolicy(modelItemErrorPolicy);
        }

        String modelItemErrorMessage = (String) attributes.get(
                "modelItemErrorMessage");

        if (modelItemErrorMessage != null) {
            setModelItemErrorMessage(modelItemErrorMessage);
        }

        String modelItemLabelFormat = (String) attributes.get(
                "modelItemLabelFormat");

        if (modelItemLabelFormat != null) {
            setModelItemLabelFormat(modelItemLabelFormat);
        }

        Boolean modelItemIsVisible = (Boolean) attributes.get(
                "modelItemIsVisible");

        if (modelItemIsVisible != null) {
            setModelItemIsVisible(modelItemIsVisible);
        }

        String itemType = (String) attributes.get("itemType");

        if (itemType != null) {
            setItemType(itemType);
        }

        Long relatedOutputItem = (Long) attributes.get("relatedOutputItem");

        if (relatedOutputItem != null) {
            setRelatedOutputItem(relatedOutputItem);
        }
    }

    @JSON
    @Override
    public long getModelOutputItemModifierPK() {
        return _modelOutputItemModifierPK;
    }

    @Override
    public void setModelOutputItemModifierPK(long modelOutputItemModifierPK) {
        _modelOutputItemModifierPK = modelOutputItemModifierPK;
    }

    @JSON
    @Override
    public long getModelId() {
        return _modelId;
    }

    @Override
    public void setModelId(long modelId) {
        _modelId = modelId;
    }

    @JSON
    @Override
    public long getModelOutputItemId() {
        return _modelOutputItemId;
    }

    @Override
    public void setModelOutputItemId(long modelOutputItemId) {
        _columnBitmask |= MODELOUTPUTITEMID_COLUMN_BITMASK;

        if (!_setOriginalModelOutputItemId) {
            _setOriginalModelOutputItemId = true;

            _originalModelOutputItemId = _modelOutputItemId;
        }

        _modelOutputItemId = modelOutputItemId;
    }

    public long getOriginalModelOutputItemId() {
        return _originalModelOutputItemId;
    }

    @JSON
    @Override
    public int getModelOutputItemOrder() {
        return _modelOutputItemOrder;
    }

    @Override
    public void setModelOutputItemOrder(int modelOutputItemOrder) {
        _modelOutputItemOrder = modelOutputItemOrder;
    }

    @JSON
    @Override
    public String getModelItemRangePolicy() {
        if (_modelItemRangePolicy == null) {
            return StringPool.BLANK;
        } else {
            return _modelItemRangePolicy;
        }
    }

    @Override
    public void setModelItemRangePolicy(String modelItemRangePolicy) {
        _modelItemRangePolicy = modelItemRangePolicy;
    }

    @JSON
    @Override
    public String getModelItemRangeMessage() {
        if (_modelItemRangeMessage == null) {
            return StringPool.BLANK;
        } else {
            return _modelItemRangeMessage;
        }
    }

    @Override
    public void setModelItemRangeMessage(String modelItemRangeMessage) {
        _modelItemRangeMessage = modelItemRangeMessage;
    }

    @JSON
    @Override
    public String getModelItemErrorPolicy() {
        if (_modelItemErrorPolicy == null) {
            return StringPool.BLANK;
        } else {
            return _modelItemErrorPolicy;
        }
    }

    @Override
    public void setModelItemErrorPolicy(String modelItemErrorPolicy) {
        _modelItemErrorPolicy = modelItemErrorPolicy;
    }

    @JSON
    @Override
    public String getModelItemErrorMessage() {
        if (_modelItemErrorMessage == null) {
            return StringPool.BLANK;
        } else {
            return _modelItemErrorMessage;
        }
    }

    @Override
    public void setModelItemErrorMessage(String modelItemErrorMessage) {
        _modelItemErrorMessage = modelItemErrorMessage;
    }

    @JSON
    @Override
    public String getModelItemLabelFormat() {
        if (_modelItemLabelFormat == null) {
            return StringPool.BLANK;
        } else {
            return _modelItemLabelFormat;
        }
    }

    @Override
    public void setModelItemLabelFormat(String modelItemLabelFormat) {
        _modelItemLabelFormat = modelItemLabelFormat;
    }

    @JSON
    @Override
    public boolean getModelItemIsVisible() {
        return _modelItemIsVisible;
    }

    @Override
    public boolean isModelItemIsVisible() {
        return _modelItemIsVisible;
    }

    @Override
    public void setModelItemIsVisible(boolean modelItemIsVisible) {
        _modelItemIsVisible = modelItemIsVisible;
    }

    @JSON
    @Override
    public String getItemType() {
        if (_itemType == null) {
            return StringPool.BLANK;
        } else {
            return _itemType;
        }
    }

    @Override
    public void setItemType(String itemType) {
        _itemType = itemType;
    }

    @JSON
    @Override
    public long getRelatedOutputItem() {
        return _relatedOutputItem;
    }

    @Override
    public void setRelatedOutputItem(long relatedOutputItem) {
        _relatedOutputItem = relatedOutputItem;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            ModelOutputItem.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public ModelOutputItem toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (ModelOutputItem) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ModelOutputItemImpl modelOutputItemImpl = new ModelOutputItemImpl();

        modelOutputItemImpl.setModelOutputItemModifierPK(getModelOutputItemModifierPK());
        modelOutputItemImpl.setModelId(getModelId());
        modelOutputItemImpl.setModelOutputItemId(getModelOutputItemId());
        modelOutputItemImpl.setModelOutputItemOrder(getModelOutputItemOrder());
        modelOutputItemImpl.setModelItemRangePolicy(getModelItemRangePolicy());
        modelOutputItemImpl.setModelItemRangeMessage(getModelItemRangeMessage());
        modelOutputItemImpl.setModelItemErrorPolicy(getModelItemErrorPolicy());
        modelOutputItemImpl.setModelItemErrorMessage(getModelItemErrorMessage());
        modelOutputItemImpl.setModelItemLabelFormat(getModelItemLabelFormat());
        modelOutputItemImpl.setModelItemIsVisible(getModelItemIsVisible());
        modelOutputItemImpl.setItemType(getItemType());
        modelOutputItemImpl.setRelatedOutputItem(getRelatedOutputItem());

        modelOutputItemImpl.resetOriginalValues();

        return modelOutputItemImpl;
    }

    @Override
    public int compareTo(ModelOutputItem modelOutputItem) {
        long primaryKey = modelOutputItem.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ModelOutputItem)) {
            return false;
        }

        ModelOutputItem modelOutputItem = (ModelOutputItem) obj;

        long primaryKey = modelOutputItem.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        ModelOutputItemModelImpl modelOutputItemModelImpl = this;

        modelOutputItemModelImpl._originalModelOutputItemId = modelOutputItemModelImpl._modelOutputItemId;

        modelOutputItemModelImpl._setOriginalModelOutputItemId = false;

        modelOutputItemModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<ModelOutputItem> toCacheModel() {
        ModelOutputItemCacheModel modelOutputItemCacheModel = new ModelOutputItemCacheModel();

        modelOutputItemCacheModel.modelOutputItemModifierPK = getModelOutputItemModifierPK();

        modelOutputItemCacheModel.modelId = getModelId();

        modelOutputItemCacheModel.modelOutputItemId = getModelOutputItemId();

        modelOutputItemCacheModel.modelOutputItemOrder = getModelOutputItemOrder();

        modelOutputItemCacheModel.modelItemRangePolicy = getModelItemRangePolicy();

        String modelItemRangePolicy = modelOutputItemCacheModel.modelItemRangePolicy;

        if ((modelItemRangePolicy != null) &&
                (modelItemRangePolicy.length() == 0)) {
            modelOutputItemCacheModel.modelItemRangePolicy = null;
        }

        modelOutputItemCacheModel.modelItemRangeMessage = getModelItemRangeMessage();

        String modelItemRangeMessage = modelOutputItemCacheModel.modelItemRangeMessage;

        if ((modelItemRangeMessage != null) &&
                (modelItemRangeMessage.length() == 0)) {
            modelOutputItemCacheModel.modelItemRangeMessage = null;
        }

        modelOutputItemCacheModel.modelItemErrorPolicy = getModelItemErrorPolicy();

        String modelItemErrorPolicy = modelOutputItemCacheModel.modelItemErrorPolicy;

        if ((modelItemErrorPolicy != null) &&
                (modelItemErrorPolicy.length() == 0)) {
            modelOutputItemCacheModel.modelItemErrorPolicy = null;
        }

        modelOutputItemCacheModel.modelItemErrorMessage = getModelItemErrorMessage();

        String modelItemErrorMessage = modelOutputItemCacheModel.modelItemErrorMessage;

        if ((modelItemErrorMessage != null) &&
                (modelItemErrorMessage.length() == 0)) {
            modelOutputItemCacheModel.modelItemErrorMessage = null;
        }

        modelOutputItemCacheModel.modelItemLabelFormat = getModelItemLabelFormat();

        String modelItemLabelFormat = modelOutputItemCacheModel.modelItemLabelFormat;

        if ((modelItemLabelFormat != null) &&
                (modelItemLabelFormat.length() == 0)) {
            modelOutputItemCacheModel.modelItemLabelFormat = null;
        }

        modelOutputItemCacheModel.modelItemIsVisible = getModelItemIsVisible();

        modelOutputItemCacheModel.itemType = getItemType();

        String itemType = modelOutputItemCacheModel.itemType;

        if ((itemType != null) && (itemType.length() == 0)) {
            modelOutputItemCacheModel.itemType = null;
        }

        modelOutputItemCacheModel.relatedOutputItem = getRelatedOutputItem();

        return modelOutputItemCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(25);

        sb.append("{modelOutputItemModifierPK=");
        sb.append(getModelOutputItemModifierPK());
        sb.append(", modelId=");
        sb.append(getModelId());
        sb.append(", modelOutputItemId=");
        sb.append(getModelOutputItemId());
        sb.append(", modelOutputItemOrder=");
        sb.append(getModelOutputItemOrder());
        sb.append(", modelItemRangePolicy=");
        sb.append(getModelItemRangePolicy());
        sb.append(", modelItemRangeMessage=");
        sb.append(getModelItemRangeMessage());
        sb.append(", modelItemErrorPolicy=");
        sb.append(getModelItemErrorPolicy());
        sb.append(", modelItemErrorMessage=");
        sb.append(getModelItemErrorMessage());
        sb.append(", modelItemLabelFormat=");
        sb.append(getModelItemLabelFormat());
        sb.append(", modelItemIsVisible=");
        sb.append(getModelItemIsVisible());
        sb.append(", itemType=");
        sb.append(getItemType());
        sb.append(", relatedOutputItem=");
        sb.append(getRelatedOutputItem());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(40);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.ModelOutputItem");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>modelOutputItemModifierPK</column-name><column-value><![CDATA[");
        sb.append(getModelOutputItemModifierPK());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modelId</column-name><column-value><![CDATA[");
        sb.append(getModelId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modelOutputItemId</column-name><column-value><![CDATA[");
        sb.append(getModelOutputItemId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modelOutputItemOrder</column-name><column-value><![CDATA[");
        sb.append(getModelOutputItemOrder());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modelItemRangePolicy</column-name><column-value><![CDATA[");
        sb.append(getModelItemRangePolicy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modelItemRangeMessage</column-name><column-value><![CDATA[");
        sb.append(getModelItemRangeMessage());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modelItemErrorPolicy</column-name><column-value><![CDATA[");
        sb.append(getModelItemErrorPolicy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modelItemErrorMessage</column-name><column-value><![CDATA[");
        sb.append(getModelItemErrorMessage());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modelItemLabelFormat</column-name><column-value><![CDATA[");
        sb.append(getModelItemLabelFormat());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modelItemIsVisible</column-name><column-value><![CDATA[");
        sb.append(getModelItemIsVisible());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemType</column-name><column-value><![CDATA[");
        sb.append(getItemType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>relatedOutputItem</column-name><column-value><![CDATA[");
        sb.append(getRelatedOutputItem());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
