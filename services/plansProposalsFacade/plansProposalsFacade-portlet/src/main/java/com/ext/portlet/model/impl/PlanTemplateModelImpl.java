package com.ext.portlet.model.impl;

import com.ext.portlet.model.PlanTemplate;
import com.ext.portlet.model.PlanTemplateModel;
import com.ext.portlet.model.PlanTemplateSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the PlanTemplate service. Represents a row in the &quot;xcolab_PlanTemplate&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.PlanTemplateModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PlanTemplateImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PlanTemplateImpl
 * @see com.ext.portlet.model.PlanTemplate
 * @see com.ext.portlet.model.PlanTemplateModel
 * @generated
 */
@JSON(strict = true)
public class PlanTemplateModelImpl extends BaseModelImpl<PlanTemplate>
    implements PlanTemplateModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a plan template model instance should use the {@link com.ext.portlet.model.PlanTemplate} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_PlanTemplate";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "name", Types.VARCHAR },
            { "baseTemplateId", Types.BIGINT },
            { "impactSeriesTemplateId", Types.BIGINT },
            { "focusAreaListTemplateId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_PlanTemplate (id_ LONG not null primary key,name VARCHAR(1024) null,baseTemplateId LONG,impactSeriesTemplateId LONG,focusAreaListTemplateId LONG)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_PlanTemplate";
    public static final String ORDER_BY_JPQL = " ORDER BY planTemplate.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_PlanTemplate.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.PlanTemplate"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.PlanTemplate"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.PlanTemplate"));
    private static ClassLoader _classLoader = PlanTemplate.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            PlanTemplate.class
        };
    private long _id;
    private String _name;
    private Long _baseTemplateId;
    private Long _impactSeriesTemplateId;
    private Long _focusAreaListTemplateId;
    private PlanTemplate _escapedModel;

    public PlanTemplateModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static PlanTemplate toModel(PlanTemplateSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        PlanTemplate model = new PlanTemplateImpl();

        model.setId(soapModel.getId());
        model.setName(soapModel.getName());
        model.setBaseTemplateId(soapModel.getBaseTemplateId());
        model.setImpactSeriesTemplateId(soapModel.getImpactSeriesTemplateId());
        model.setFocusAreaListTemplateId(soapModel.getFocusAreaListTemplateId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<PlanTemplate> toModels(PlanTemplateSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<PlanTemplate> models = new ArrayList<PlanTemplate>(soapModels.length);

        for (PlanTemplateSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return PlanTemplate.class;
    }

    @Override
    public String getModelClassName() {
        return PlanTemplate.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("name", getName());
        attributes.put("baseTemplateId", getBaseTemplateId());
        attributes.put("impactSeriesTemplateId", getImpactSeriesTemplateId());
        attributes.put("focusAreaListTemplateId", getFocusAreaListTemplateId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        Long baseTemplateId = (Long) attributes.get("baseTemplateId");

        if (baseTemplateId != null) {
            setBaseTemplateId(baseTemplateId);
        }

        Long impactSeriesTemplateId = (Long) attributes.get(
                "impactSeriesTemplateId");

        if (impactSeriesTemplateId != null) {
            setImpactSeriesTemplateId(impactSeriesTemplateId);
        }

        Long focusAreaListTemplateId = (Long) attributes.get(
                "focusAreaListTemplateId");

        if (focusAreaListTemplateId != null) {
            setFocusAreaListTemplateId(focusAreaListTemplateId);
        }
    }

    @JSON
    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @JSON
    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _name = name;
    }

    @JSON
    @Override
    public Long getBaseTemplateId() {
        return _baseTemplateId;
    }

    @Override
    public void setBaseTemplateId(Long baseTemplateId) {
        _baseTemplateId = baseTemplateId;
    }

    @JSON
    @Override
    public Long getImpactSeriesTemplateId() {
        return _impactSeriesTemplateId;
    }

    @Override
    public void setImpactSeriesTemplateId(Long impactSeriesTemplateId) {
        _impactSeriesTemplateId = impactSeriesTemplateId;
    }

    @JSON
    @Override
    public Long getFocusAreaListTemplateId() {
        return _focusAreaListTemplateId;
    }

    @Override
    public void setFocusAreaListTemplateId(Long focusAreaListTemplateId) {
        _focusAreaListTemplateId = focusAreaListTemplateId;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            PlanTemplate.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public PlanTemplate toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (PlanTemplate) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        PlanTemplateImpl planTemplateImpl = new PlanTemplateImpl();

        planTemplateImpl.setId(getId());
        planTemplateImpl.setName(getName());
        planTemplateImpl.setBaseTemplateId(getBaseTemplateId());
        planTemplateImpl.setImpactSeriesTemplateId(getImpactSeriesTemplateId());
        planTemplateImpl.setFocusAreaListTemplateId(getFocusAreaListTemplateId());

        planTemplateImpl.resetOriginalValues();

        return planTemplateImpl;
    }

    @Override
    public int compareTo(PlanTemplate planTemplate) {
        long primaryKey = planTemplate.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof PlanTemplate)) {
            return false;
        }

        PlanTemplate planTemplate = (PlanTemplate) obj;

        long primaryKey = planTemplate.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<PlanTemplate> toCacheModel() {
        PlanTemplateCacheModel planTemplateCacheModel = new PlanTemplateCacheModel();

        planTemplateCacheModel.id = getId();

        planTemplateCacheModel.name = getName();

        String name = planTemplateCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            planTemplateCacheModel.name = null;
        }

        planTemplateCacheModel.baseTemplateId = getBaseTemplateId();

        planTemplateCacheModel.impactSeriesTemplateId = getImpactSeriesTemplateId();

        planTemplateCacheModel.focusAreaListTemplateId = getFocusAreaListTemplateId();

        return planTemplateCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", baseTemplateId=");
        sb.append(getBaseTemplateId());
        sb.append(", impactSeriesTemplateId=");
        sb.append(getImpactSeriesTemplateId());
        sb.append(", focusAreaListTemplateId=");
        sb.append(getFocusAreaListTemplateId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.PlanTemplate");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>baseTemplateId</column-name><column-value><![CDATA[");
        sb.append(getBaseTemplateId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>impactSeriesTemplateId</column-name><column-value><![CDATA[");
        sb.append(getImpactSeriesTemplateId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>focusAreaListTemplateId</column-name><column-value><![CDATA[");
        sb.append(getFocusAreaListTemplateId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
