package com.ext.portlet.model.impl;

import com.ext.portlet.model.ContestPhaseRibbonType;
import com.ext.portlet.model.ContestPhaseRibbonTypeModel;
import com.ext.portlet.model.ContestPhaseRibbonTypeSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.List;

/**
 * The base model implementation for the ContestPhaseRibbonType service. Represents a row in the &quot;xcolab_ContestPhaseRibbonType&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.ContestPhaseRibbonTypeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ContestPhaseRibbonTypeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ContestPhaseRibbonTypeImpl
 * @see com.ext.portlet.model.ContestPhaseRibbonType
 * @see com.ext.portlet.model.ContestPhaseRibbonTypeModel
 * @generated
 */
@JSON(strict = true)
public class ContestPhaseRibbonTypeModelImpl extends BaseModelImpl<ContestPhaseRibbonType>
    implements ContestPhaseRibbonTypeModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a contest phase ribbon type model instance should use the {@link com.ext.portlet.model.ContestPhaseRibbonType} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_ContestPhaseRibbonType";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "ribbon", Types.INTEGER },
            { "hoverText", Types.VARCHAR },
            { "description", Types.VARCHAR },
            { "copyOnPromote", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_ContestPhaseRibbonType (id_ LONG not null primary key,ribbon INTEGER,hoverText VARCHAR(75) null,description VARCHAR(75) null,copyOnPromote BOOLEAN)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_ContestPhaseRibbonType";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.ContestPhaseRibbonType"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.ContestPhaseRibbonType"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.ContestPhaseRibbonType"));
    private static ClassLoader _classLoader = ContestPhaseRibbonType.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            ContestPhaseRibbonType.class
        };
    private long _id;
    private int _ribbon;
    private String _hoverText;
    private String _description;
    private boolean _copyOnPromote;
    private transient ExpandoBridge _expandoBridge;
    private ContestPhaseRibbonType _escapedModelProxy;

    public ContestPhaseRibbonTypeModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static ContestPhaseRibbonType toModel(
        ContestPhaseRibbonTypeSoap soapModel) {
        ContestPhaseRibbonType model = new ContestPhaseRibbonTypeImpl();

        model.setId(soapModel.getId());
        model.setRibbon(soapModel.getRibbon());
        model.setHoverText(soapModel.getHoverText());
        model.setDescription(soapModel.getDescription());
        model.setCopyOnPromote(soapModel.getCopyOnPromote());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<ContestPhaseRibbonType> toModels(
        ContestPhaseRibbonTypeSoap[] soapModels) {
        List<ContestPhaseRibbonType> models = new ArrayList<ContestPhaseRibbonType>(soapModels.length);

        for (ContestPhaseRibbonTypeSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public long getPrimaryKey() {
        return _id;
    }

    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_id);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return ContestPhaseRibbonType.class;
    }

    public String getModelClassName() {
        return ContestPhaseRibbonType.class.getName();
    }

    @JSON
    public long getId() {
        return _id;
    }

    public void setId(long id) {
        _id = id;
    }

    @JSON
    public int getRibbon() {
        return _ribbon;
    }

    public void setRibbon(int ribbon) {
        _ribbon = ribbon;
    }

    @JSON
    public String getHoverText() {
        if (_hoverText == null) {
            return StringPool.BLANK;
        } else {
            return _hoverText;
        }
    }

    public void setHoverText(String hoverText) {
        _hoverText = hoverText;
    }

    @JSON
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    public void setDescription(String description) {
        _description = description;
    }

    @JSON
    public boolean getCopyOnPromote() {
        return _copyOnPromote;
    }

    public boolean isCopyOnPromote() {
        return _copyOnPromote;
    }

    public void setCopyOnPromote(boolean copyOnPromote) {
        _copyOnPromote = copyOnPromote;
    }

    @Override
    public ContestPhaseRibbonType toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (ContestPhaseRibbonType) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        if (_expandoBridge == null) {
            _expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
                    ContestPhaseRibbonType.class.getName(), getPrimaryKey());
        }

        return _expandoBridge;
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        getExpandoBridge().setAttributes(serviceContext);
    }

    @Override
    public Object clone() {
        ContestPhaseRibbonTypeImpl contestPhaseRibbonTypeImpl = new ContestPhaseRibbonTypeImpl();

        contestPhaseRibbonTypeImpl.setId(getId());
        contestPhaseRibbonTypeImpl.setRibbon(getRibbon());
        contestPhaseRibbonTypeImpl.setHoverText(getHoverText());
        contestPhaseRibbonTypeImpl.setDescription(getDescription());
        contestPhaseRibbonTypeImpl.setCopyOnPromote(getCopyOnPromote());

        contestPhaseRibbonTypeImpl.resetOriginalValues();

        return contestPhaseRibbonTypeImpl;
    }

    public int compareTo(ContestPhaseRibbonType contestPhaseRibbonType) {
        long primaryKey = contestPhaseRibbonType.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        ContestPhaseRibbonType contestPhaseRibbonType = null;

        try {
            contestPhaseRibbonType = (ContestPhaseRibbonType) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = contestPhaseRibbonType.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<ContestPhaseRibbonType> toCacheModel() {
        ContestPhaseRibbonTypeCacheModel contestPhaseRibbonTypeCacheModel = new ContestPhaseRibbonTypeCacheModel();

        contestPhaseRibbonTypeCacheModel.id = getId();

        contestPhaseRibbonTypeCacheModel.ribbon = getRibbon();

        contestPhaseRibbonTypeCacheModel.hoverText = getHoverText();

        String hoverText = contestPhaseRibbonTypeCacheModel.hoverText;

        if ((hoverText != null) && (hoverText.length() == 0)) {
            contestPhaseRibbonTypeCacheModel.hoverText = null;
        }

        contestPhaseRibbonTypeCacheModel.description = getDescription();

        String description = contestPhaseRibbonTypeCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            contestPhaseRibbonTypeCacheModel.description = null;
        }

        contestPhaseRibbonTypeCacheModel.copyOnPromote = getCopyOnPromote();

        return contestPhaseRibbonTypeCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", ribbon=");
        sb.append(getRibbon());
        sb.append(", hoverText=");
        sb.append(getHoverText());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append(", copyOnPromote=");
        sb.append(getCopyOnPromote());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.ContestPhaseRibbonType");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ribbon</column-name><column-value><![CDATA[");
        sb.append(getRibbon());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>hoverText</column-name><column-value><![CDATA[");
        sb.append(getHoverText());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>copyOnPromote</column-name><column-value><![CDATA[");
        sb.append(getCopyOnPromote());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
