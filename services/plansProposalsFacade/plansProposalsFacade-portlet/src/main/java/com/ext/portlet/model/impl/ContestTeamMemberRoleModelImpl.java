package com.ext.portlet.model.impl;

import com.ext.portlet.model.ContestTeamMemberRole;
import com.ext.portlet.model.ContestTeamMemberRoleModel;
import com.ext.portlet.model.ContestTeamMemberRoleSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ContestTeamMemberRole service. Represents a row in the &quot;xcolab_ContestTeamMemberRole&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.ContestTeamMemberRoleModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ContestTeamMemberRoleImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ContestTeamMemberRoleImpl
 * @see com.ext.portlet.model.ContestTeamMemberRole
 * @see com.ext.portlet.model.ContestTeamMemberRoleModel
 * @generated
 */
@JSON(strict = true)
public class ContestTeamMemberRoleModelImpl extends BaseModelImpl<ContestTeamMemberRole>
    implements ContestTeamMemberRoleModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a contest team member role model instance should use the {@link com.ext.portlet.model.ContestTeamMemberRole} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_ContestTeamMemberRole";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "role", Types.VARCHAR },
            { "sort", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_ContestTeamMemberRole (id_ LONG not null primary key,role VARCHAR(75) null,sort INTEGER)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_ContestTeamMemberRole";
    public static final String ORDER_BY_JPQL = " ORDER BY contestTeamMemberRole.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_ContestTeamMemberRole.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.ContestTeamMemberRole"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.ContestTeamMemberRole"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.ContestTeamMemberRole"));
    private static ClassLoader _classLoader = ContestTeamMemberRole.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            ContestTeamMemberRole.class
        };
    private long _id;
    private String _role;
    private int _sort;
    private ContestTeamMemberRole _escapedModel;

    public ContestTeamMemberRoleModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static ContestTeamMemberRole toModel(
        ContestTeamMemberRoleSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        ContestTeamMemberRole model = new ContestTeamMemberRoleImpl();

        model.setId(soapModel.getId());
        model.setRole(soapModel.getRole());
        model.setSort(soapModel.getSort());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<ContestTeamMemberRole> toModels(
        ContestTeamMemberRoleSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<ContestTeamMemberRole> models = new ArrayList<ContestTeamMemberRole>(soapModels.length);

        for (ContestTeamMemberRoleSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return ContestTeamMemberRole.class;
    }

    @Override
    public String getModelClassName() {
        return ContestTeamMemberRole.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("role", getRole());
        attributes.put("sort", getSort());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        String role = (String) attributes.get("role");

        if (role != null) {
            setRole(role);
        }

        Integer sort = (Integer) attributes.get("sort");

        if (sort != null) {
            setSort(sort);
        }
    }

    @JSON
    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @JSON
    @Override
    public String getRole() {
        if (_role == null) {
            return StringPool.BLANK;
        } else {
            return _role;
        }
    }

    @Override
    public void setRole(String role) {
        _role = role;
    }

    @JSON
    @Override
    public int getSort() {
        return _sort;
    }

    @Override
    public void setSort(int sort) {
        _sort = sort;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            ContestTeamMemberRole.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public ContestTeamMemberRole toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (ContestTeamMemberRole) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ContestTeamMemberRoleImpl contestTeamMemberRoleImpl = new ContestTeamMemberRoleImpl();

        contestTeamMemberRoleImpl.setId(getId());
        contestTeamMemberRoleImpl.setRole(getRole());
        contestTeamMemberRoleImpl.setSort(getSort());

        contestTeamMemberRoleImpl.resetOriginalValues();

        return contestTeamMemberRoleImpl;
    }

    @Override
    public int compareTo(ContestTeamMemberRole contestTeamMemberRole) {
        int value = 0;

        if (getId() < contestTeamMemberRole.getId()) {
            value = -1;
        } else if (getId() > contestTeamMemberRole.getId()) {
            value = 1;
        } else {
            value = 0;
        }

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ContestTeamMemberRole)) {
            return false;
        }

        ContestTeamMemberRole contestTeamMemberRole = (ContestTeamMemberRole) obj;

        long primaryKey = contestTeamMemberRole.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<ContestTeamMemberRole> toCacheModel() {
        ContestTeamMemberRoleCacheModel contestTeamMemberRoleCacheModel = new ContestTeamMemberRoleCacheModel();

        contestTeamMemberRoleCacheModel.id = getId();

        contestTeamMemberRoleCacheModel.role = getRole();

        String role = contestTeamMemberRoleCacheModel.role;

        if ((role != null) && (role.length() == 0)) {
            contestTeamMemberRoleCacheModel.role = null;
        }

        contestTeamMemberRoleCacheModel.sort = getSort();

        return contestTeamMemberRoleCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", role=");
        sb.append(getRole());
        sb.append(", sort=");
        sb.append(getSort());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.ContestTeamMemberRole");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>role</column-name><column-value><![CDATA[");
        sb.append(getRole());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sort</column-name><column-value><![CDATA[");
        sb.append(getSort());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
