package com.ext.portlet.model.impl;

import com.ext.portlet.model.Role_;
import com.ext.portlet.model.Role_Model;
import com.ext.portlet.model.Role_Soap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Role_ service. Represents a row in the &quot;xcolab_Role_&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.Role_Model} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link Role_Impl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see Role_Impl
 * @see com.ext.portlet.model.Role_
 * @see com.ext.portlet.model.Role_Model
 * @generated
 */
@JSON(strict = true)
public class Role_ModelImpl extends BaseModelImpl<Role_> implements Role_Model {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a role_ model instance should use the {@link com.ext.portlet.model.Role_} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_Role_";
    public static final Object[][] TABLE_COLUMNS = {
            { "roleId", Types.BIGINT },
            { "name", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_Role_ (roleId LONG not null primary key,name VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_Role_";
    public static final String ORDER_BY_JPQL = " ORDER BY role_.roleId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_Role_.roleId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.Role_"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.Role_"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final String MAPPING_TABLE_XCOLAB_USERS_ROLES_NAME = "xcolab_Users_Roles";
    public static final Object[][] MAPPING_TABLE_XCOLAB_USERS_ROLES_COLUMNS = {
            { "userId", Types.BIGINT },
            { "roleId", Types.BIGINT }
        };
    public static final String MAPPING_TABLE_XCOLAB_USERS_ROLES_SQL_CREATE = "create table xcolab_Users_Roles (roleId LONG not null,userId LONG not null,primary key (roleId, userId))";
    public static final boolean FINDER_CACHE_ENABLED_XCOLAB_USERS_ROLES = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.xcolab_Users_Roles"), true);
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.Role_"));
    private static ClassLoader _classLoader = Role_.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Role_.class };
    private long _roleId;
    private String _name;
    private Role_ _escapedModel;

    public Role_ModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Role_ toModel(Role_Soap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Role_ model = new Role_Impl();

        model.setRoleId(soapModel.getRoleId());
        model.setName(soapModel.getName());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Role_> toModels(Role_Soap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Role_> models = new ArrayList<Role_>(soapModels.length);

        for (Role_Soap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _roleId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setRoleId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _roleId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Role_.class;
    }

    @Override
    public String getModelClassName() {
        return Role_.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("roleId", getRoleId());
        attributes.put("name", getName());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long roleId = (Long) attributes.get("roleId");

        if (roleId != null) {
            setRoleId(roleId);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }
    }

    @JSON
    @Override
    public long getRoleId() {
        return _roleId;
    }

    @Override
    public void setRoleId(long roleId) {
        _roleId = roleId;
    }

    @JSON
    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _name = name;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Role_.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Role_ toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Role_) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        Role_Impl role_Impl = new Role_Impl();

        role_Impl.setRoleId(getRoleId());
        role_Impl.setName(getName());

        role_Impl.resetOriginalValues();

        return role_Impl;
    }

    @Override
    public int compareTo(Role_ role_) {
        long primaryKey = role_.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Role_)) {
            return false;
        }

        Role_ role_ = (Role_) obj;

        long primaryKey = role_.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<Role_> toCacheModel() {
        Role_CacheModel role_CacheModel = new Role_CacheModel();

        role_CacheModel.roleId = getRoleId();

        role_CacheModel.name = getName();

        String name = role_CacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            role_CacheModel.name = null;
        }

        return role_CacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(5);

        sb.append("{roleId=");
        sb.append(getRoleId());
        sb.append(", name=");
        sb.append(getName());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(10);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.Role_");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>roleId</column-name><column-value><![CDATA[");
        sb.append(getRoleId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
