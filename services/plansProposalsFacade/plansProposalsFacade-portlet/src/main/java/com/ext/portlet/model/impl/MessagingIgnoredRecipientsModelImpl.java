package com.ext.portlet.model.impl;

import com.ext.portlet.model.MessagingIgnoredRecipients;
import com.ext.portlet.model.MessagingIgnoredRecipientsModel;
import com.ext.portlet.model.MessagingIgnoredRecipientsSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the MessagingIgnoredRecipients service. Represents a row in the &quot;xcolab_MessagingIgnoredRecipients&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.MessagingIgnoredRecipientsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MessagingIgnoredRecipientsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MessagingIgnoredRecipientsImpl
 * @see com.ext.portlet.model.MessagingIgnoredRecipients
 * @see com.ext.portlet.model.MessagingIgnoredRecipientsModel
 * @generated
 */
@JSON(strict = true)
public class MessagingIgnoredRecipientsModelImpl extends BaseModelImpl<MessagingIgnoredRecipients>
    implements MessagingIgnoredRecipientsModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a messaging ignored recipients model instance should use the {@link com.ext.portlet.model.MessagingIgnoredRecipients} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_MessagingIgnoredRecipients";
    public static final Object[][] TABLE_COLUMNS = {
            { "ignoredRecipientId", Types.BIGINT },
            { "email", Types.VARCHAR },
            { "name", Types.VARCHAR },
            { "userId", Types.BIGINT },
            { "createDate", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_MessagingIgnoredRecipients (ignoredRecipientId LONG not null primary key,email VARCHAR(512) null,name VARCHAR(512) null,userId LONG,createDate DATE null)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_MessagingIgnoredRecipients";
    public static final String ORDER_BY_JPQL = " ORDER BY messagingIgnoredRecipients.email ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_MessagingIgnoredRecipients.email ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.MessagingIgnoredRecipients"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.MessagingIgnoredRecipients"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.model.MessagingIgnoredRecipients"),
            true);
    public static long EMAIL_COLUMN_BITMASK = 1L;
    public static long USERID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.MessagingIgnoredRecipients"));
    private static ClassLoader _classLoader = MessagingIgnoredRecipients.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            MessagingIgnoredRecipients.class
        };
    private long _ignoredRecipientId;
    private String _email;
    private String _originalEmail;
    private String _name;
    private long _userId;
    private String _userUuid;
    private long _originalUserId;
    private boolean _setOriginalUserId;
    private Date _createDate;
    private transient ExpandoBridge _expandoBridge;
    private long _columnBitmask;
    private MessagingIgnoredRecipients _escapedModelProxy;

    public MessagingIgnoredRecipientsModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static MessagingIgnoredRecipients toModel(
        MessagingIgnoredRecipientsSoap soapModel) {
        MessagingIgnoredRecipients model = new MessagingIgnoredRecipientsImpl();

        model.setIgnoredRecipientId(soapModel.getIgnoredRecipientId());
        model.setEmail(soapModel.getEmail());
        model.setName(soapModel.getName());
        model.setUserId(soapModel.getUserId());
        model.setCreateDate(soapModel.getCreateDate());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<MessagingIgnoredRecipients> toModels(
        MessagingIgnoredRecipientsSoap[] soapModels) {
        List<MessagingIgnoredRecipients> models = new ArrayList<MessagingIgnoredRecipients>(soapModels.length);

        for (MessagingIgnoredRecipientsSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public long getPrimaryKey() {
        return _ignoredRecipientId;
    }

    public void setPrimaryKey(long primaryKey) {
        setIgnoredRecipientId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_ignoredRecipientId);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return MessagingIgnoredRecipients.class;
    }

    public String getModelClassName() {
        return MessagingIgnoredRecipients.class.getName();
    }

    @JSON
    public long getIgnoredRecipientId() {
        return _ignoredRecipientId;
    }

    public void setIgnoredRecipientId(long ignoredRecipientId) {
        _ignoredRecipientId = ignoredRecipientId;
    }

    @JSON
    public String getEmail() {
        if (_email == null) {
            return StringPool.BLANK;
        } else {
            return _email;
        }
    }

    public void setEmail(String email) {
        _columnBitmask = -1L;

        if (_originalEmail == null) {
            _originalEmail = _email;
        }

        _email = email;
    }

    public String getOriginalEmail() {
        return GetterUtil.getString(_originalEmail);
    }

    @JSON
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    public void setName(String name) {
        _name = name;
    }

    @JSON
    public long getUserId() {
        return _userId;
    }

    public void setUserId(long userId) {
        _columnBitmask |= USERID_COLUMN_BITMASK;

        if (!_setOriginalUserId) {
            _setOriginalUserId = true;

            _originalUserId = _userId;
        }

        _userId = userId;
    }

    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    public long getOriginalUserId() {
        return _originalUserId;
    }

    @JSON
    public Date getCreateDate() {
        return _createDate;
    }

    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public MessagingIgnoredRecipients toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (MessagingIgnoredRecipients) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        if (_expandoBridge == null) {
            _expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
                    MessagingIgnoredRecipients.class.getName(), getPrimaryKey());
        }

        return _expandoBridge;
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        getExpandoBridge().setAttributes(serviceContext);
    }

    @Override
    public Object clone() {
        MessagingIgnoredRecipientsImpl messagingIgnoredRecipientsImpl = new MessagingIgnoredRecipientsImpl();

        messagingIgnoredRecipientsImpl.setIgnoredRecipientId(getIgnoredRecipientId());
        messagingIgnoredRecipientsImpl.setEmail(getEmail());
        messagingIgnoredRecipientsImpl.setName(getName());
        messagingIgnoredRecipientsImpl.setUserId(getUserId());
        messagingIgnoredRecipientsImpl.setCreateDate(getCreateDate());

        messagingIgnoredRecipientsImpl.resetOriginalValues();

        return messagingIgnoredRecipientsImpl;
    }

    public int compareTo(MessagingIgnoredRecipients messagingIgnoredRecipients) {
        int value = 0;

        value = getEmail().compareTo(messagingIgnoredRecipients.getEmail());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        MessagingIgnoredRecipients messagingIgnoredRecipients = null;

        try {
            messagingIgnoredRecipients = (MessagingIgnoredRecipients) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = messagingIgnoredRecipients.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        MessagingIgnoredRecipientsModelImpl messagingIgnoredRecipientsModelImpl = this;

        messagingIgnoredRecipientsModelImpl._originalEmail = messagingIgnoredRecipientsModelImpl._email;

        messagingIgnoredRecipientsModelImpl._originalUserId = messagingIgnoredRecipientsModelImpl._userId;

        messagingIgnoredRecipientsModelImpl._setOriginalUserId = false;

        messagingIgnoredRecipientsModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<MessagingIgnoredRecipients> toCacheModel() {
        MessagingIgnoredRecipientsCacheModel messagingIgnoredRecipientsCacheModel =
            new MessagingIgnoredRecipientsCacheModel();

        messagingIgnoredRecipientsCacheModel.ignoredRecipientId = getIgnoredRecipientId();

        messagingIgnoredRecipientsCacheModel.email = getEmail();

        String email = messagingIgnoredRecipientsCacheModel.email;

        if ((email != null) && (email.length() == 0)) {
            messagingIgnoredRecipientsCacheModel.email = null;
        }

        messagingIgnoredRecipientsCacheModel.name = getName();

        String name = messagingIgnoredRecipientsCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            messagingIgnoredRecipientsCacheModel.name = null;
        }

        messagingIgnoredRecipientsCacheModel.userId = getUserId();

        Date createDate = getCreateDate();

        if (createDate != null) {
            messagingIgnoredRecipientsCacheModel.createDate = createDate.getTime();
        } else {
            messagingIgnoredRecipientsCacheModel.createDate = Long.MIN_VALUE;
        }

        return messagingIgnoredRecipientsCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{ignoredRecipientId=");
        sb.append(getIgnoredRecipientId());
        sb.append(", email=");
        sb.append(getEmail());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.MessagingIgnoredRecipients");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>ignoredRecipientId</column-name><column-value><![CDATA[");
        sb.append(getIgnoredRecipientId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>email</column-name><column-value><![CDATA[");
        sb.append(getEmail());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
