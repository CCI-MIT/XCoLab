package com.ext.portlet.model.impl;

import com.ext.portlet.model.TrackedVisitor2User;
import com.ext.portlet.model.TrackedVisitor2UserModel;
import com.ext.portlet.model.TrackedVisitor2UserSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the TrackedVisitor2User service. Represents a row in the &quot;xcolab_TrackedVisitor2User&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.TrackedVisitor2UserModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TrackedVisitor2UserImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TrackedVisitor2UserImpl
 * @see com.ext.portlet.model.TrackedVisitor2User
 * @see com.ext.portlet.model.TrackedVisitor2UserModel
 * @generated
 */
@JSON(strict = true)
public class TrackedVisitor2UserModelImpl extends BaseModelImpl<TrackedVisitor2User>
    implements TrackedVisitor2UserModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a tracked visitor2 user model instance should use the {@link com.ext.portlet.model.TrackedVisitor2User} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_TrackedVisitor2User";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "uuid_", Types.VARCHAR },
            { "userId", Types.BIGINT },
            { "createDate", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_TrackedVisitor2User (id_ LONG not null primary key,uuid_ VARCHAR(36) null,userId LONG,createDate DATE null)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_TrackedVisitor2User";
    public static final String ORDER_BY_JPQL = " ORDER BY trackedVisitor2User.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_TrackedVisitor2User.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.TrackedVisitor2User"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.TrackedVisitor2User"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.TrackedVisitor2User"));
    private static ClassLoader _classLoader = TrackedVisitor2User.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            TrackedVisitor2User.class
        };
    private long _id;
    private String _uuid;
    private long _userId;
    private String _userUuid;
    private Date _createDate;
    private TrackedVisitor2User _escapedModel;

    public TrackedVisitor2UserModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static TrackedVisitor2User toModel(TrackedVisitor2UserSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        TrackedVisitor2User model = new TrackedVisitor2UserImpl();

        model.setId(soapModel.getId());
        model.setUuid(soapModel.getUuid());
        model.setUserId(soapModel.getUserId());
        model.setCreateDate(soapModel.getCreateDate());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<TrackedVisitor2User> toModels(
        TrackedVisitor2UserSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<TrackedVisitor2User> models = new ArrayList<TrackedVisitor2User>(soapModels.length);

        for (TrackedVisitor2UserSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return TrackedVisitor2User.class;
    }

    @Override
    public String getModelClassName() {
        return TrackedVisitor2User.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("uuid", getUuid());
        attributes.put("userId", getUserId());
        attributes.put("createDate", getCreateDate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        String uuid = (String) attributes.get("uuid");

        if (uuid != null) {
            setUuid(uuid);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }
    }

    @JSON
    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @JSON
    @Override
    public String getUuid() {
        if (_uuid == null) {
            return StringPool.BLANK;
        } else {
            return _uuid;
        }
    }

    @Override
    public void setUuid(String uuid) {
        _uuid = uuid;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            TrackedVisitor2User.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public TrackedVisitor2User toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (TrackedVisitor2User) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        TrackedVisitor2UserImpl trackedVisitor2UserImpl = new TrackedVisitor2UserImpl();

        trackedVisitor2UserImpl.setId(getId());
        trackedVisitor2UserImpl.setUuid(getUuid());
        trackedVisitor2UserImpl.setUserId(getUserId());
        trackedVisitor2UserImpl.setCreateDate(getCreateDate());

        trackedVisitor2UserImpl.resetOriginalValues();

        return trackedVisitor2UserImpl;
    }

    @Override
    public int compareTo(TrackedVisitor2User trackedVisitor2User) {
        long primaryKey = trackedVisitor2User.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof TrackedVisitor2User)) {
            return false;
        }

        TrackedVisitor2User trackedVisitor2User = (TrackedVisitor2User) obj;

        long primaryKey = trackedVisitor2User.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<TrackedVisitor2User> toCacheModel() {
        TrackedVisitor2UserCacheModel trackedVisitor2UserCacheModel = new TrackedVisitor2UserCacheModel();

        trackedVisitor2UserCacheModel.id = getId();

        trackedVisitor2UserCacheModel.uuid = getUuid();

        String uuid = trackedVisitor2UserCacheModel.uuid;

        if ((uuid != null) && (uuid.length() == 0)) {
            trackedVisitor2UserCacheModel.uuid = null;
        }

        trackedVisitor2UserCacheModel.userId = getUserId();

        Date createDate = getCreateDate();

        if (createDate != null) {
            trackedVisitor2UserCacheModel.createDate = createDate.getTime();
        } else {
            trackedVisitor2UserCacheModel.createDate = Long.MIN_VALUE;
        }

        return trackedVisitor2UserCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(9);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", uuid=");
        sb.append(getUuid());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(16);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.TrackedVisitor2User");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>uuid</column-name><column-value><![CDATA[");
        sb.append(getUuid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
