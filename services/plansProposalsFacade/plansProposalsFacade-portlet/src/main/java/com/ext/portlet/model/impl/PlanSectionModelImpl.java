package com.ext.portlet.model.impl;

import com.ext.portlet.model.PlanSection;
import com.ext.portlet.model.PlanSectionModel;
import com.ext.portlet.model.PlanSectionSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the PlanSection service. Represents a row in the &quot;xcolab_PlanSection&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.PlanSectionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PlanSectionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PlanSectionImpl
 * @see com.ext.portlet.model.PlanSection
 * @see com.ext.portlet.model.PlanSectionModel
 * @generated
 */
@JSON(strict = true)
public class PlanSectionModelImpl extends BaseModelImpl<PlanSection>
    implements PlanSectionModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a plan section model instance should use the {@link com.ext.portlet.model.PlanSection} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_PlanSection";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "planSectionDefinitionId", Types.BIGINT },
            { "planId", Types.BIGINT },
            { "content", Types.CLOB },
            { "numericValue", Types.BIGINT },
            { "created", Types.TIMESTAMP },
            { "version", Types.BIGINT },
            { "planVersion", Types.BIGINT },
            { "updateAuthorId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_PlanSection (id_ LONG not null primary key,planSectionDefinitionId LONG,planId LONG,content TEXT null,numericValue LONG,created DATE null,version LONG,planVersion LONG,updateAuthorId LONG)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_PlanSection";
    public static final String ORDER_BY_JPQL = " ORDER BY planSection.id DESC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_PlanSection.id_ DESC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.PlanSection"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.PlanSection"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.model.PlanSection"),
            true);
    public static long PLANID_COLUMN_BITMASK = 1L;
    public static long PLANSECTIONDEFINITIONID_COLUMN_BITMASK = 2L;
    public static long PLANVERSION_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.PlanSection"));
    private static ClassLoader _classLoader = PlanSection.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            PlanSection.class
        };
    private long _id;
    private long _planSectionDefinitionId;
    private long _originalPlanSectionDefinitionId;
    private boolean _setOriginalPlanSectionDefinitionId;
    private long _planId;
    private long _originalPlanId;
    private boolean _setOriginalPlanId;
    private String _content;
    private long _numericValue;
    private Date _created;
    private long _version;
    private long _planVersion;
    private long _originalPlanVersion;
    private boolean _setOriginalPlanVersion;
    private long _updateAuthorId;
    private transient ExpandoBridge _expandoBridge;
    private long _columnBitmask;
    private PlanSection _escapedModelProxy;

    public PlanSectionModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static PlanSection toModel(PlanSectionSoap soapModel) {
        PlanSection model = new PlanSectionImpl();

        model.setId(soapModel.getId());
        model.setPlanSectionDefinitionId(soapModel.getPlanSectionDefinitionId());
        model.setPlanId(soapModel.getPlanId());
        model.setContent(soapModel.getContent());
        model.setNumericValue(soapModel.getNumericValue());
        model.setCreated(soapModel.getCreated());
        model.setVersion(soapModel.getVersion());
        model.setPlanVersion(soapModel.getPlanVersion());
        model.setUpdateAuthorId(soapModel.getUpdateAuthorId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<PlanSection> toModels(PlanSectionSoap[] soapModels) {
        List<PlanSection> models = new ArrayList<PlanSection>(soapModels.length);

        for (PlanSectionSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public long getPrimaryKey() {
        return _id;
    }

    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_id);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return PlanSection.class;
    }

    public String getModelClassName() {
        return PlanSection.class.getName();
    }

    @JSON
    public long getId() {
        return _id;
    }

    public void setId(long id) {
        _columnBitmask = -1L;

        _id = id;
    }

    @JSON
    public long getPlanSectionDefinitionId() {
        return _planSectionDefinitionId;
    }

    public void setPlanSectionDefinitionId(long planSectionDefinitionId) {
        _columnBitmask |= PLANSECTIONDEFINITIONID_COLUMN_BITMASK;

        if (!_setOriginalPlanSectionDefinitionId) {
            _setOriginalPlanSectionDefinitionId = true;

            _originalPlanSectionDefinitionId = _planSectionDefinitionId;
        }

        _planSectionDefinitionId = planSectionDefinitionId;
    }

    public long getOriginalPlanSectionDefinitionId() {
        return _originalPlanSectionDefinitionId;
    }

    @JSON
    public long getPlanId() {
        return _planId;
    }

    public void setPlanId(long planId) {
        _columnBitmask |= PLANID_COLUMN_BITMASK;

        if (!_setOriginalPlanId) {
            _setOriginalPlanId = true;

            _originalPlanId = _planId;
        }

        _planId = planId;
    }

    public long getOriginalPlanId() {
        return _originalPlanId;
    }

    @JSON
    public String getContent() {
        if (_content == null) {
            return StringPool.BLANK;
        } else {
            return _content;
        }
    }

    public void setContent(String content) {
        _content = content;
    }

    @JSON
    public long getNumericValue() {
        return _numericValue;
    }

    public void setNumericValue(long numericValue) {
        _numericValue = numericValue;
    }

    @JSON
    public Date getCreated() {
        return _created;
    }

    public void setCreated(Date created) {
        _created = created;
    }

    @JSON
    public long getVersion() {
        return _version;
    }

    public void setVersion(long version) {
        _version = version;
    }

    @JSON
    public long getPlanVersion() {
        return _planVersion;
    }

    public void setPlanVersion(long planVersion) {
        _columnBitmask |= PLANVERSION_COLUMN_BITMASK;

        if (!_setOriginalPlanVersion) {
            _setOriginalPlanVersion = true;

            _originalPlanVersion = _planVersion;
        }

        _planVersion = planVersion;
    }

    public long getOriginalPlanVersion() {
        return _originalPlanVersion;
    }

    @JSON
    public long getUpdateAuthorId() {
        return _updateAuthorId;
    }

    public void setUpdateAuthorId(long updateAuthorId) {
        _updateAuthorId = updateAuthorId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public PlanSection toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (PlanSection) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        if (_expandoBridge == null) {
            _expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
                    PlanSection.class.getName(), getPrimaryKey());
        }

        return _expandoBridge;
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        getExpandoBridge().setAttributes(serviceContext);
    }

    @Override
    public Object clone() {
        PlanSectionImpl planSectionImpl = new PlanSectionImpl();

        planSectionImpl.setId(getId());
        planSectionImpl.setPlanSectionDefinitionId(getPlanSectionDefinitionId());
        planSectionImpl.setPlanId(getPlanId());
        planSectionImpl.setContent(getContent());
        planSectionImpl.setNumericValue(getNumericValue());
        planSectionImpl.setCreated(getCreated());
        planSectionImpl.setVersion(getVersion());
        planSectionImpl.setPlanVersion(getPlanVersion());
        planSectionImpl.setUpdateAuthorId(getUpdateAuthorId());

        planSectionImpl.resetOriginalValues();

        return planSectionImpl;
    }

    public int compareTo(PlanSection planSection) {
        int value = 0;

        if (getId() < planSection.getId()) {
            value = -1;
        } else if (getId() > planSection.getId()) {
            value = 1;
        } else {
            value = 0;
        }

        value = value * -1;

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        PlanSection planSection = null;

        try {
            planSection = (PlanSection) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = planSection.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        PlanSectionModelImpl planSectionModelImpl = this;

        planSectionModelImpl._originalPlanSectionDefinitionId = planSectionModelImpl._planSectionDefinitionId;

        planSectionModelImpl._setOriginalPlanSectionDefinitionId = false;

        planSectionModelImpl._originalPlanId = planSectionModelImpl._planId;

        planSectionModelImpl._setOriginalPlanId = false;

        planSectionModelImpl._originalPlanVersion = planSectionModelImpl._planVersion;

        planSectionModelImpl._setOriginalPlanVersion = false;

        planSectionModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<PlanSection> toCacheModel() {
        PlanSectionCacheModel planSectionCacheModel = new PlanSectionCacheModel();

        planSectionCacheModel.id = getId();

        planSectionCacheModel.planSectionDefinitionId = getPlanSectionDefinitionId();

        planSectionCacheModel.planId = getPlanId();

        planSectionCacheModel.content = getContent();

        String content = planSectionCacheModel.content;

        if ((content != null) && (content.length() == 0)) {
            planSectionCacheModel.content = null;
        }

        planSectionCacheModel.numericValue = getNumericValue();

        Date created = getCreated();

        if (created != null) {
            planSectionCacheModel.created = created.getTime();
        } else {
            planSectionCacheModel.created = Long.MIN_VALUE;
        }

        planSectionCacheModel.version = getVersion();

        planSectionCacheModel.planVersion = getPlanVersion();

        planSectionCacheModel.updateAuthorId = getUpdateAuthorId();

        return planSectionCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(19);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", planSectionDefinitionId=");
        sb.append(getPlanSectionDefinitionId());
        sb.append(", planId=");
        sb.append(getPlanId());
        sb.append(", content=");
        sb.append(getContent());
        sb.append(", numericValue=");
        sb.append(getNumericValue());
        sb.append(", created=");
        sb.append(getCreated());
        sb.append(", version=");
        sb.append(getVersion());
        sb.append(", planVersion=");
        sb.append(getPlanVersion());
        sb.append(", updateAuthorId=");
        sb.append(getUpdateAuthorId());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(31);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.PlanSection");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>planSectionDefinitionId</column-name><column-value><![CDATA[");
        sb.append(getPlanSectionDefinitionId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>planId</column-name><column-value><![CDATA[");
        sb.append(getPlanId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>content</column-name><column-value><![CDATA[");
        sb.append(getContent());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>numericValue</column-name><column-value><![CDATA[");
        sb.append(getNumericValue());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>created</column-name><column-value><![CDATA[");
        sb.append(getCreated());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>version</column-name><column-value><![CDATA[");
        sb.append(getVersion());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>planVersion</column-name><column-value><![CDATA[");
        sb.append(getPlanVersion());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>updateAuthorId</column-name><column-value><![CDATA[");
        sb.append(getUpdateAuthorId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
