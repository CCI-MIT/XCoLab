package com.ext.portlet.model.impl;

import com.ext.portlet.model.MessagingMessageRecipient;
import com.ext.portlet.model.MessagingMessageRecipientModel;
import com.ext.portlet.model.MessagingMessageRecipientSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.List;

/**
 * The base model implementation for the MessagingMessageRecipient service. Represents a row in the &quot;xcolab_MessagingMessageRecipient&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.MessagingMessageRecipientModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MessagingMessageRecipientImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MessagingMessageRecipientImpl
 * @see com.ext.portlet.model.MessagingMessageRecipient
 * @see com.ext.portlet.model.MessagingMessageRecipientModel
 * @generated
 */
@JSON(strict = true)
public class MessagingMessageRecipientModelImpl extends BaseModelImpl<MessagingMessageRecipient>
    implements MessagingMessageRecipientModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a messaging message recipient model instance should use the {@link com.ext.portlet.model.MessagingMessageRecipient} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_MessagingMessageRecipient";
    public static final Object[][] TABLE_COLUMNS = {
            { "recipientId", Types.BIGINT },
            { "messageId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "emailAddress", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_MessagingMessageRecipient (recipientId LONG not null primary key,messageId LONG,userId LONG,emailAddress VARCHAR(512) null)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_MessagingMessageRecipient";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.MessagingMessageRecipient"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.MessagingMessageRecipient"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.MessagingMessageRecipient"));
    private static ClassLoader _classLoader = MessagingMessageRecipient.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            MessagingMessageRecipient.class
        };
    private long _recipientId;
    private long _messageId;
    private long _userId;
    private String _userUuid;
    private String _emailAddress;
    private transient ExpandoBridge _expandoBridge;
    private MessagingMessageRecipient _escapedModelProxy;

    public MessagingMessageRecipientModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static MessagingMessageRecipient toModel(
        MessagingMessageRecipientSoap soapModel) {
        MessagingMessageRecipient model = new MessagingMessageRecipientImpl();

        model.setRecipientId(soapModel.getRecipientId());
        model.setMessageId(soapModel.getMessageId());
        model.setUserId(soapModel.getUserId());
        model.setEmailAddress(soapModel.getEmailAddress());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<MessagingMessageRecipient> toModels(
        MessagingMessageRecipientSoap[] soapModels) {
        List<MessagingMessageRecipient> models = new ArrayList<MessagingMessageRecipient>(soapModels.length);

        for (MessagingMessageRecipientSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public long getPrimaryKey() {
        return _recipientId;
    }

    public void setPrimaryKey(long primaryKey) {
        setRecipientId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_recipientId);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return MessagingMessageRecipient.class;
    }

    public String getModelClassName() {
        return MessagingMessageRecipient.class.getName();
    }

    @JSON
    public long getRecipientId() {
        return _recipientId;
    }

    public void setRecipientId(long recipientId) {
        _recipientId = recipientId;
    }

    @JSON
    public long getMessageId() {
        return _messageId;
    }

    public void setMessageId(long messageId) {
        _messageId = messageId;
    }

    @JSON
    public long getUserId() {
        return _userId;
    }

    public void setUserId(long userId) {
        _userId = userId;
    }

    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    public String getEmailAddress() {
        if (_emailAddress == null) {
            return StringPool.BLANK;
        } else {
            return _emailAddress;
        }
    }

    public void setEmailAddress(String emailAddress) {
        _emailAddress = emailAddress;
    }

    @Override
    public MessagingMessageRecipient toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (MessagingMessageRecipient) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        if (_expandoBridge == null) {
            _expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
                    MessagingMessageRecipient.class.getName(), getPrimaryKey());
        }

        return _expandoBridge;
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        getExpandoBridge().setAttributes(serviceContext);
    }

    @Override
    public Object clone() {
        MessagingMessageRecipientImpl messagingMessageRecipientImpl = new MessagingMessageRecipientImpl();

        messagingMessageRecipientImpl.setRecipientId(getRecipientId());
        messagingMessageRecipientImpl.setMessageId(getMessageId());
        messagingMessageRecipientImpl.setUserId(getUserId());
        messagingMessageRecipientImpl.setEmailAddress(getEmailAddress());

        messagingMessageRecipientImpl.resetOriginalValues();

        return messagingMessageRecipientImpl;
    }

    public int compareTo(MessagingMessageRecipient messagingMessageRecipient) {
        long primaryKey = messagingMessageRecipient.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        MessagingMessageRecipient messagingMessageRecipient = null;

        try {
            messagingMessageRecipient = (MessagingMessageRecipient) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = messagingMessageRecipient.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<MessagingMessageRecipient> toCacheModel() {
        MessagingMessageRecipientCacheModel messagingMessageRecipientCacheModel = new MessagingMessageRecipientCacheModel();

        messagingMessageRecipientCacheModel.recipientId = getRecipientId();

        messagingMessageRecipientCacheModel.messageId = getMessageId();

        messagingMessageRecipientCacheModel.userId = getUserId();

        messagingMessageRecipientCacheModel.emailAddress = getEmailAddress();

        String emailAddress = messagingMessageRecipientCacheModel.emailAddress;

        if ((emailAddress != null) && (emailAddress.length() == 0)) {
            messagingMessageRecipientCacheModel.emailAddress = null;
        }

        return messagingMessageRecipientCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(9);

        sb.append("{recipientId=");
        sb.append(getRecipientId());
        sb.append(", messageId=");
        sb.append(getMessageId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", emailAddress=");
        sb.append(getEmailAddress());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(16);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.MessagingMessageRecipient");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>recipientId</column-name><column-value><![CDATA[");
        sb.append(getRecipientId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>messageId</column-name><column-value><![CDATA[");
        sb.append(getMessageId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>emailAddress</column-name><column-value><![CDATA[");
        sb.append(getEmailAddress());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
