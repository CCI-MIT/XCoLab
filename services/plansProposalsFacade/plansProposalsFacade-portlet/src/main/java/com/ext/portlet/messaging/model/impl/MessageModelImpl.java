package com.ext.portlet.messaging.model.impl;

import com.ext.portlet.messaging.model.Message;
import com.ext.portlet.messaging.model.MessageModel;
import com.ext.portlet.messaging.model.MessageSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the Message service. Represents a row in the &quot;xcolab_Message&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.messaging.model.MessageModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MessageImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MessageImpl
 * @see com.ext.portlet.messaging.model.Message
 * @see com.ext.portlet.messaging.model.MessageModel
 * @generated
 */
@JSON(strict = true)
public class MessageModelImpl extends BaseModelImpl<Message>
    implements MessageModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a message model instance should use the {@link com.ext.portlet.messaging.model.Message} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_Message";
    public static final Object[][] TABLE_COLUMNS = {
            { "messageId", Types.BIGINT },
            { "fromId", Types.BIGINT },
            { "repliesTo", Types.BIGINT },
            { "createDate", Types.TIMESTAMP },
            { "subject", Types.VARCHAR },
            { "content", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_Message (messageId LONG not null primary key,fromId LONG,repliesTo LONG,createDate DATE null,subject VARCHAR(75) null,content VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_Message";
    public static final String ORDER_BY_JPQL = " ORDER BY message.createDate DESC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_Message.createDate DESC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.messaging.model.Message"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.messaging.model.Message"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.messaging.model.Message"),
            true);
    public static long FROMID_COLUMN_BITMASK = 1L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.messaging.model.Message"));
    private static ClassLoader _classLoader = Message.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            Message.class
        };
    private long _messageId;
    private long _fromId;
    private long _originalFromId;
    private boolean _setOriginalFromId;
    private long _repliesTo;
    private Date _createDate;
    private String _subject;
    private String _content;
    private transient ExpandoBridge _expandoBridge;
    private long _columnBitmask;
    private Message _escapedModelProxy;

    public MessageModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Message toModel(MessageSoap soapModel) {
        Message model = new MessageImpl();

        model.setMessageId(soapModel.getMessageId());
        model.setFromId(soapModel.getFromId());
        model.setRepliesTo(soapModel.getRepliesTo());
        model.setCreateDate(soapModel.getCreateDate());
        model.setSubject(soapModel.getSubject());
        model.setContent(soapModel.getContent());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Message> toModels(MessageSoap[] soapModels) {
        List<Message> models = new ArrayList<Message>(soapModels.length);

        for (MessageSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public long getPrimaryKey() {
        return _messageId;
    }

    public void setPrimaryKey(long primaryKey) {
        setMessageId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_messageId);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return Message.class;
    }

    public String getModelClassName() {
        return Message.class.getName();
    }

    @JSON
    public long getMessageId() {
        return _messageId;
    }

    public void setMessageId(long messageId) {
        _messageId = messageId;
    }

    @JSON
    public long getFromId() {
        return _fromId;
    }

    public void setFromId(long fromId) {
        _columnBitmask |= FROMID_COLUMN_BITMASK;

        if (!_setOriginalFromId) {
            _setOriginalFromId = true;

            _originalFromId = _fromId;
        }

        _fromId = fromId;
    }

    public long getOriginalFromId() {
        return _originalFromId;
    }

    @JSON
    public long getRepliesTo() {
        return _repliesTo;
    }

    public void setRepliesTo(long repliesTo) {
        _repliesTo = repliesTo;
    }

    @JSON
    public Date getCreateDate() {
        return _createDate;
    }

    public void setCreateDate(Date createDate) {
        _columnBitmask = -1L;

        _createDate = createDate;
    }

    @JSON
    public String getSubject() {
        if (_subject == null) {
            return StringPool.BLANK;
        } else {
            return _subject;
        }
    }

    public void setSubject(String subject) {
        _subject = subject;
    }

    @JSON
    public String getContent() {
        if (_content == null) {
            return StringPool.BLANK;
        } else {
            return _content;
        }
    }

    public void setContent(String content) {
        _content = content;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public Message toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (Message) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        if (_expandoBridge == null) {
            _expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
                    Message.class.getName(), getPrimaryKey());
        }

        return _expandoBridge;
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        getExpandoBridge().setAttributes(serviceContext);
    }

    @Override
    public Object clone() {
        MessageImpl messageImpl = new MessageImpl();

        messageImpl.setMessageId(getMessageId());
        messageImpl.setFromId(getFromId());
        messageImpl.setRepliesTo(getRepliesTo());
        messageImpl.setCreateDate(getCreateDate());
        messageImpl.setSubject(getSubject());
        messageImpl.setContent(getContent());

        messageImpl.resetOriginalValues();

        return messageImpl;
    }

    public int compareTo(Message message) {
        int value = 0;

        value = DateUtil.compareTo(getCreateDate(), message.getCreateDate());

        value = value * -1;

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        Message message = null;

        try {
            message = (Message) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = message.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        MessageModelImpl messageModelImpl = this;

        messageModelImpl._originalFromId = messageModelImpl._fromId;

        messageModelImpl._setOriginalFromId = false;

        messageModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Message> toCacheModel() {
        MessageCacheModel messageCacheModel = new MessageCacheModel();

        messageCacheModel.messageId = getMessageId();

        messageCacheModel.fromId = getFromId();

        messageCacheModel.repliesTo = getRepliesTo();

        Date createDate = getCreateDate();

        if (createDate != null) {
            messageCacheModel.createDate = createDate.getTime();
        } else {
            messageCacheModel.createDate = Long.MIN_VALUE;
        }

        messageCacheModel.subject = getSubject();

        String subject = messageCacheModel.subject;

        if ((subject != null) && (subject.length() == 0)) {
            messageCacheModel.subject = null;
        }

        messageCacheModel.content = getContent();

        String content = messageCacheModel.content;

        if ((content != null) && (content.length() == 0)) {
            messageCacheModel.content = null;
        }

        return messageCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(13);

        sb.append("{messageId=");
        sb.append(getMessageId());
        sb.append(", fromId=");
        sb.append(getFromId());
        sb.append(", repliesTo=");
        sb.append(getRepliesTo());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", subject=");
        sb.append(getSubject());
        sb.append(", content=");
        sb.append(getContent());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(22);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.messaging.model.Message");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>messageId</column-name><column-value><![CDATA[");
        sb.append(getMessageId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>fromId</column-name><column-value><![CDATA[");
        sb.append(getFromId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>repliesTo</column-name><column-value><![CDATA[");
        sb.append(getRepliesTo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>subject</column-name><column-value><![CDATA[");
        sb.append(getSubject());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>content</column-name><column-value><![CDATA[");
        sb.append(getContent());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
