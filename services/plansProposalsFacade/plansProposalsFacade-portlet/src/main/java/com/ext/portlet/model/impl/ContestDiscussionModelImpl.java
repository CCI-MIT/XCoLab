package com.ext.portlet.model.impl;

import com.ext.portlet.model.ContestDiscussion;
import com.ext.portlet.model.ContestDiscussionModel;
import com.ext.portlet.model.ContestDiscussionSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ContestDiscussion service. Represents a row in the &quot;xcolab_ContestDiscussion&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.ContestDiscussionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ContestDiscussionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ContestDiscussionImpl
 * @see com.ext.portlet.model.ContestDiscussion
 * @see com.ext.portlet.model.ContestDiscussionModel
 * @generated
 */
@JSON(strict = true)
public class ContestDiscussionModelImpl extends BaseModelImpl<ContestDiscussion>
    implements ContestDiscussionModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a contest discussion model instance should use the {@link com.ext.portlet.model.ContestDiscussion} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_ContestDiscussion";
    public static final Object[][] TABLE_COLUMNS = {
            { "DiscussionId", Types.BIGINT },
            { "ContestId", Types.BIGINT },
            { "Tab", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_ContestDiscussion (DiscussionId LONG not null primary key,ContestId LONG,Tab VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_ContestDiscussion";
    public static final String ORDER_BY_JPQL = " ORDER BY contestDiscussion.DiscussionId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_ContestDiscussion.DiscussionId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.ContestDiscussion"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.ContestDiscussion"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.model.ContestDiscussion"),
            true);
    public static long CONTESTID_COLUMN_BITMASK = 1L;
    public static long TAB_COLUMN_BITMASK = 2L;
    public static long DISCUSSIONID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.ContestDiscussion"));
    private static ClassLoader _classLoader = ContestDiscussion.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            ContestDiscussion.class
        };
    private long _DiscussionId;
    private long _ContestId;
    private long _originalContestId;
    private boolean _setOriginalContestId;
    private String _Tab;
    private String _originalTab;
    private long _columnBitmask;
    private ContestDiscussion _escapedModel;

    public ContestDiscussionModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static ContestDiscussion toModel(ContestDiscussionSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        ContestDiscussion model = new ContestDiscussionImpl();

        model.setDiscussionId(soapModel.getDiscussionId());
        model.setContestId(soapModel.getContestId());
        model.setTab(soapModel.getTab());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<ContestDiscussion> toModels(
        ContestDiscussionSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<ContestDiscussion> models = new ArrayList<ContestDiscussion>(soapModels.length);

        for (ContestDiscussionSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _DiscussionId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setDiscussionId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _DiscussionId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return ContestDiscussion.class;
    }

    @Override
    public String getModelClassName() {
        return ContestDiscussion.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("DiscussionId", getDiscussionId());
        attributes.put("ContestId", getContestId());
        attributes.put("Tab", getTab());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long DiscussionId = (Long) attributes.get("DiscussionId");

        if (DiscussionId != null) {
            setDiscussionId(DiscussionId);
        }

        Long ContestId = (Long) attributes.get("ContestId");

        if (ContestId != null) {
            setContestId(ContestId);
        }

        String Tab = (String) attributes.get("Tab");

        if (Tab != null) {
            setTab(Tab);
        }
    }

    @JSON
    @Override
    public long getDiscussionId() {
        return _DiscussionId;
    }

    @Override
    public void setDiscussionId(long DiscussionId) {
        _DiscussionId = DiscussionId;
    }

    @JSON
    @Override
    public long getContestId() {
        return _ContestId;
    }

    @Override
    public void setContestId(long ContestId) {
        _columnBitmask |= CONTESTID_COLUMN_BITMASK;

        if (!_setOriginalContestId) {
            _setOriginalContestId = true;

            _originalContestId = _ContestId;
        }

        _ContestId = ContestId;
    }

    public long getOriginalContestId() {
        return _originalContestId;
    }

    @JSON
    @Override
    public String getTab() {
        if (_Tab == null) {
            return StringPool.BLANK;
        } else {
            return _Tab;
        }
    }

    @Override
    public void setTab(String Tab) {
        _columnBitmask |= TAB_COLUMN_BITMASK;

        if (_originalTab == null) {
            _originalTab = _Tab;
        }

        _Tab = Tab;
    }

    public String getOriginalTab() {
        return GetterUtil.getString(_originalTab);
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            ContestDiscussion.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public ContestDiscussion toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (ContestDiscussion) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ContestDiscussionImpl contestDiscussionImpl = new ContestDiscussionImpl();

        contestDiscussionImpl.setDiscussionId(getDiscussionId());
        contestDiscussionImpl.setContestId(getContestId());
        contestDiscussionImpl.setTab(getTab());

        contestDiscussionImpl.resetOriginalValues();

        return contestDiscussionImpl;
    }

    @Override
    public int compareTo(ContestDiscussion contestDiscussion) {
        long primaryKey = contestDiscussion.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ContestDiscussion)) {
            return false;
        }

        ContestDiscussion contestDiscussion = (ContestDiscussion) obj;

        long primaryKey = contestDiscussion.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        ContestDiscussionModelImpl contestDiscussionModelImpl = this;

        contestDiscussionModelImpl._originalContestId = contestDiscussionModelImpl._ContestId;

        contestDiscussionModelImpl._setOriginalContestId = false;

        contestDiscussionModelImpl._originalTab = contestDiscussionModelImpl._Tab;

        contestDiscussionModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<ContestDiscussion> toCacheModel() {
        ContestDiscussionCacheModel contestDiscussionCacheModel = new ContestDiscussionCacheModel();

        contestDiscussionCacheModel.DiscussionId = getDiscussionId();

        contestDiscussionCacheModel.ContestId = getContestId();

        contestDiscussionCacheModel.Tab = getTab();

        String Tab = contestDiscussionCacheModel.Tab;

        if ((Tab != null) && (Tab.length() == 0)) {
            contestDiscussionCacheModel.Tab = null;
        }

        return contestDiscussionCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{DiscussionId=");
        sb.append(getDiscussionId());
        sb.append(", ContestId=");
        sb.append(getContestId());
        sb.append(", Tab=");
        sb.append(getTab());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.ContestDiscussion");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>DiscussionId</column-name><column-value><![CDATA[");
        sb.append(getDiscussionId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ContestId</column-name><column-value><![CDATA[");
        sb.append(getContestId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>Tab</column-name><column-value><![CDATA[");
        sb.append(getTab());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
