package com.ext.portlet.model.impl;

import com.ext.portlet.model.Contest;
import com.ext.portlet.model.ContestModel;
import com.ext.portlet.model.ContestSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Contest service. Represents a row in the &quot;xcolab_Contest&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.ContestModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ContestImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ContestImpl
 * @see com.ext.portlet.model.Contest
 * @see com.ext.portlet.model.ContestModel
 * @generated
 */
@JSON(strict = true)
public class ContestModelImpl extends BaseModelImpl<Contest>
    implements ContestModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a contest model instance should use the {@link com.ext.portlet.model.Contest} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_Contest";
    public static final Object[][] TABLE_COLUMNS = {
            { "ContestPK", Types.BIGINT },
            { "ContestName", Types.VARCHAR },
            { "ContestShortName", Types.VARCHAR },
            { "ContestDescription", Types.VARCHAR },
            { "ContestModelDescription", Types.VARCHAR },
            { "ContestPositionsDescription", Types.VARCHAR },
            { "defaultPlanDescription", Types.CLOB },
            { "PlanTypeId", Types.BIGINT },
            { "created", Types.TIMESTAMP },
            { "updated", Types.TIMESTAMP },
            { "authorId", Types.BIGINT },
            { "contestActive", Types.BOOLEAN },
            { "planTemplateId", Types.BIGINT },
            { "contestScheduleId", Types.BIGINT },
            { "focusAreaId", Types.BIGINT },
            { "contestTier", Types.BIGINT },
            { "contestLogoId", Types.BIGINT },
            { "featured_", Types.BOOLEAN },
            { "plansOpenByDefault", Types.BOOLEAN },
            { "sponsorLogoId", Types.BIGINT },
            { "sponsorText", Types.VARCHAR },
            { "sponsorLink", Types.VARCHAR },
            { "flag", Types.INTEGER },
            { "flagText", Types.VARCHAR },
            { "flagTooltip", Types.VARCHAR },
            { "groupId", Types.BIGINT },
            { "discussionGroupId", Types.BIGINT },
            { "weight", Types.INTEGER },
            { "resourcesUrl", Types.VARCHAR },
            { "contestPrivate", Types.BOOLEAN },
            { "usePermissions", Types.BOOLEAN },
            { "contestCreationStatus", Types.VARCHAR },
            { "defaultModelId", Types.BIGINT },
            { "otherModels", Types.VARCHAR },
            { "points", Types.DOUBLE },
            { "defaultParentPointType", Types.BIGINT },
            { "pointDistributionStrategy", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_Contest (ContestPK LONG not null primary key,ContestName VARCHAR(2048) null,ContestShortName VARCHAR(1024) null,ContestDescription VARCHAR(3072) null,ContestModelDescription VARCHAR(2048) null,ContestPositionsDescription VARCHAR(2048) null,defaultPlanDescription TEXT null,PlanTypeId LONG,created DATE null,updated DATE null,authorId LONG,contestActive BOOLEAN,planTemplateId LONG,contestScheduleId LONG,focusAreaId LONG,contestTier LONG,contestLogoId LONG,featured_ BOOLEAN,plansOpenByDefault BOOLEAN,sponsorLogoId LONG,sponsorText VARCHAR(2048) null,sponsorLink VARCHAR(75) null,flag INTEGER,flagText VARCHAR(1024) null,flagTooltip VARCHAR(1024) null,groupId LONG,discussionGroupId LONG,weight INTEGER,resourcesUrl VARCHAR(1024) null,contestPrivate BOOLEAN,usePermissions BOOLEAN,contestCreationStatus VARCHAR(75) null,defaultModelId LONG,otherModels VARCHAR(75) null,points DOUBLE,defaultParentPointType LONG,pointDistributionStrategy VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_Contest";
    public static final String ORDER_BY_JPQL = " ORDER BY contest.weight ASC, contest.created ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_Contest.weight ASC, xcolab_Contest.created ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.Contest"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.Contest"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.model.Contest"),
            true);
    public static long PLANTYPEID_COLUMN_BITMASK = 1L;
    public static long CONTESTACTIVE_COLUMN_BITMASK = 2L;
    public static long CONTESTPRIVATE_COLUMN_BITMASK = 4L;
    public static long CONTESTTIER_COLUMN_BITMASK = 8L;
    public static long FEATURED_COLUMN_BITMASK = 16L;
    public static long FLAG_COLUMN_BITMASK = 32L;
    public static long FLAGTEXT_COLUMN_BITMASK = 64L;
    public static long WEIGHT_COLUMN_BITMASK = 128L;
    public static long CREATED_COLUMN_BITMASK = 256L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.Contest"));
    private static ClassLoader _classLoader = Contest.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Contest.class
        };
    private long _ContestPK;
    private String _ContestName;
    private String _ContestShortName;
    private String _ContestDescription;
    private String _ContestModelDescription;
    private String _ContestPositionsDescription;
    private String _defaultPlanDescription;
    private long _PlanTypeId;
    private long _originalPlanTypeId;
    private boolean _setOriginalPlanTypeId;
    private Date _created;
    private Date _updated;
    private long _authorId;
    private boolean _contestActive;
    private boolean _originalContestActive;
    private boolean _setOriginalContestActive;
    private long _planTemplateId;
    private long _contestScheduleId;
    private long _focusAreaId;
    private long _contestTier;
    private long _originalContestTier;
    private boolean _setOriginalContestTier;
    private long _contestLogoId;
    private boolean _featured;
    private boolean _originalFeatured;
    private boolean _setOriginalFeatured;
    private boolean _plansOpenByDefault;
    private long _sponsorLogoId;
    private String _sponsorText;
    private String _sponsorLink;
    private int _flag;
    private int _originalFlag;
    private boolean _setOriginalFlag;
    private String _flagText;
    private String _originalFlagText;
    private String _flagTooltip;
    private long _groupId;
    private long _discussionGroupId;
    private int _weight;
    private String _resourcesUrl;
    private boolean _contestPrivate;
    private boolean _originalContestPrivate;
    private boolean _setOriginalContestPrivate;
    private boolean _usePermissions;
    private String _contestCreationStatus;
    private long _defaultModelId;
    private String _otherModels;
    private double _points;
    private long _defaultParentPointType;
    private String _pointDistributionStrategy;
    private long _columnBitmask;
    private Contest _escapedModel;

    public ContestModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Contest toModel(ContestSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Contest model = new ContestImpl();

        model.setContestPK(soapModel.getContestPK());
        model.setContestName(soapModel.getContestName());
        model.setContestShortName(soapModel.getContestShortName());
        model.setContestDescription(soapModel.getContestDescription());
        model.setContestModelDescription(soapModel.getContestModelDescription());
        model.setContestPositionsDescription(soapModel.getContestPositionsDescription());
        model.setDefaultPlanDescription(soapModel.getDefaultPlanDescription());
        model.setPlanTypeId(soapModel.getPlanTypeId());
        model.setCreated(soapModel.getCreated());
        model.setUpdated(soapModel.getUpdated());
        model.setAuthorId(soapModel.getAuthorId());
        model.setContestActive(soapModel.getContestActive());
        model.setPlanTemplateId(soapModel.getPlanTemplateId());
        model.setContestScheduleId(soapModel.getContestScheduleId());
        model.setFocusAreaId(soapModel.getFocusAreaId());
        model.setContestTier(soapModel.getContestTier());
        model.setContestLogoId(soapModel.getContestLogoId());
        model.setFeatured(soapModel.getFeatured());
        model.setPlansOpenByDefault(soapModel.getPlansOpenByDefault());
        model.setSponsorLogoId(soapModel.getSponsorLogoId());
        model.setSponsorText(soapModel.getSponsorText());
        model.setSponsorLink(soapModel.getSponsorLink());
        model.setFlag(soapModel.getFlag());
        model.setFlagText(soapModel.getFlagText());
        model.setFlagTooltip(soapModel.getFlagTooltip());
        model.setGroupId(soapModel.getGroupId());
        model.setDiscussionGroupId(soapModel.getDiscussionGroupId());
        model.setWeight(soapModel.getWeight());
        model.setResourcesUrl(soapModel.getResourcesUrl());
        model.setContestPrivate(soapModel.getContestPrivate());
        model.setUsePermissions(soapModel.getUsePermissions());
        model.setContestCreationStatus(soapModel.getContestCreationStatus());
        model.setDefaultModelId(soapModel.getDefaultModelId());
        model.setOtherModels(soapModel.getOtherModels());
        model.setPoints(soapModel.getPoints());
        model.setDefaultParentPointType(soapModel.getDefaultParentPointType());
        model.setPointDistributionStrategy(soapModel.getPointDistributionStrategy());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Contest> toModels(ContestSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Contest> models = new ArrayList<Contest>(soapModels.length);

        for (ContestSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _ContestPK;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setContestPK(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _ContestPK;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Contest.class;
    }

    @Override
    public String getModelClassName() {
        return Contest.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("ContestPK", getContestPK());
        attributes.put("ContestName", getContestName());
        attributes.put("ContestShortName", getContestShortName());
        attributes.put("ContestDescription", getContestDescription());
        attributes.put("ContestModelDescription", getContestModelDescription());
        attributes.put("ContestPositionsDescription",
            getContestPositionsDescription());
        attributes.put("defaultPlanDescription", getDefaultPlanDescription());
        attributes.put("PlanTypeId", getPlanTypeId());
        attributes.put("created", getCreated());
        attributes.put("updated", getUpdated());
        attributes.put("authorId", getAuthorId());
        attributes.put("contestActive", getContestActive());
        attributes.put("planTemplateId", getPlanTemplateId());
        attributes.put("contestScheduleId", getContestScheduleId());
        attributes.put("focusAreaId", getFocusAreaId());
        attributes.put("contestTier", getContestTier());
        attributes.put("contestLogoId", getContestLogoId());
        attributes.put("featured", getFeatured());
        attributes.put("plansOpenByDefault", getPlansOpenByDefault());
        attributes.put("sponsorLogoId", getSponsorLogoId());
        attributes.put("sponsorText", getSponsorText());
        attributes.put("sponsorLink", getSponsorLink());
        attributes.put("flag", getFlag());
        attributes.put("flagText", getFlagText());
        attributes.put("flagTooltip", getFlagTooltip());
        attributes.put("groupId", getGroupId());
        attributes.put("discussionGroupId", getDiscussionGroupId());
        attributes.put("weight", getWeight());
        attributes.put("resourcesUrl", getResourcesUrl());
        attributes.put("contestPrivate", getContestPrivate());
        attributes.put("usePermissions", getUsePermissions());
        attributes.put("contestCreationStatus", getContestCreationStatus());
        attributes.put("defaultModelId", getDefaultModelId());
        attributes.put("otherModels", getOtherModels());
        attributes.put("points", getPoints());
        attributes.put("defaultParentPointType", getDefaultParentPointType());
        attributes.put("pointDistributionStrategy",
            getPointDistributionStrategy());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long ContestPK = (Long) attributes.get("ContestPK");

        if (ContestPK != null) {
            setContestPK(ContestPK);
        }

        String ContestName = (String) attributes.get("ContestName");

        if (ContestName != null) {
            setContestName(ContestName);
        }

        String ContestShortName = (String) attributes.get("ContestShortName");

        if (ContestShortName != null) {
            setContestShortName(ContestShortName);
        }

        String ContestDescription = (String) attributes.get(
                "ContestDescription");

        if (ContestDescription != null) {
            setContestDescription(ContestDescription);
        }

        String ContestModelDescription = (String) attributes.get(
                "ContestModelDescription");

        if (ContestModelDescription != null) {
            setContestModelDescription(ContestModelDescription);
        }

        String ContestPositionsDescription = (String) attributes.get(
                "ContestPositionsDescription");

        if (ContestPositionsDescription != null) {
            setContestPositionsDescription(ContestPositionsDescription);
        }

        String defaultPlanDescription = (String) attributes.get(
                "defaultPlanDescription");

        if (defaultPlanDescription != null) {
            setDefaultPlanDescription(defaultPlanDescription);
        }

        Long PlanTypeId = (Long) attributes.get("PlanTypeId");

        if (PlanTypeId != null) {
            setPlanTypeId(PlanTypeId);
        }

        Date created = (Date) attributes.get("created");

        if (created != null) {
            setCreated(created);
        }

        Date updated = (Date) attributes.get("updated");

        if (updated != null) {
            setUpdated(updated);
        }

        Long authorId = (Long) attributes.get("authorId");

        if (authorId != null) {
            setAuthorId(authorId);
        }

        Boolean contestActive = (Boolean) attributes.get("contestActive");

        if (contestActive != null) {
            setContestActive(contestActive);
        }

        Long planTemplateId = (Long) attributes.get("planTemplateId");

        if (planTemplateId != null) {
            setPlanTemplateId(planTemplateId);
        }

        Long contestScheduleId = (Long) attributes.get("contestScheduleId");

        if (contestScheduleId != null) {
            setContestScheduleId(contestScheduleId);
        }

        Long focusAreaId = (Long) attributes.get("focusAreaId");

        if (focusAreaId != null) {
            setFocusAreaId(focusAreaId);
        }

        Long contestTier = (Long) attributes.get("contestTier");

        if (contestTier != null) {
            setContestTier(contestTier);
        }

        Long contestLogoId = (Long) attributes.get("contestLogoId");

        if (contestLogoId != null) {
            setContestLogoId(contestLogoId);
        }

        Boolean featured = (Boolean) attributes.get("featured");

        if (featured != null) {
            setFeatured(featured);
        }

        Boolean plansOpenByDefault = (Boolean) attributes.get(
                "plansOpenByDefault");

        if (plansOpenByDefault != null) {
            setPlansOpenByDefault(plansOpenByDefault);
        }

        Long sponsorLogoId = (Long) attributes.get("sponsorLogoId");

        if (sponsorLogoId != null) {
            setSponsorLogoId(sponsorLogoId);
        }

        String sponsorText = (String) attributes.get("sponsorText");

        if (sponsorText != null) {
            setSponsorText(sponsorText);
        }

        String sponsorLink = (String) attributes.get("sponsorLink");

        if (sponsorLink != null) {
            setSponsorLink(sponsorLink);
        }

        Integer flag = (Integer) attributes.get("flag");

        if (flag != null) {
            setFlag(flag);
        }

        String flagText = (String) attributes.get("flagText");

        if (flagText != null) {
            setFlagText(flagText);
        }

        String flagTooltip = (String) attributes.get("flagTooltip");

        if (flagTooltip != null) {
            setFlagTooltip(flagTooltip);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long discussionGroupId = (Long) attributes.get("discussionGroupId");

        if (discussionGroupId != null) {
            setDiscussionGroupId(discussionGroupId);
        }

        Integer weight = (Integer) attributes.get("weight");

        if (weight != null) {
            setWeight(weight);
        }

        String resourcesUrl = (String) attributes.get("resourcesUrl");

        if (resourcesUrl != null) {
            setResourcesUrl(resourcesUrl);
        }

        Boolean contestPrivate = (Boolean) attributes.get("contestPrivate");

        if (contestPrivate != null) {
            setContestPrivate(contestPrivate);
        }

        Boolean usePermissions = (Boolean) attributes.get("usePermissions");

        if (usePermissions != null) {
            setUsePermissions(usePermissions);
        }

        String contestCreationStatus = (String) attributes.get(
                "contestCreationStatus");

        if (contestCreationStatus != null) {
            setContestCreationStatus(contestCreationStatus);
        }

        Long defaultModelId = (Long) attributes.get("defaultModelId");

        if (defaultModelId != null) {
            setDefaultModelId(defaultModelId);
        }

        String otherModels = (String) attributes.get("otherModels");

        if (otherModels != null) {
            setOtherModels(otherModels);
        }

        Double points = (Double) attributes.get("points");

        if (points != null) {
            setPoints(points);
        }

        Long defaultParentPointType = (Long) attributes.get(
                "defaultParentPointType");

        if (defaultParentPointType != null) {
            setDefaultParentPointType(defaultParentPointType);
        }

        String pointDistributionStrategy = (String) attributes.get(
                "pointDistributionStrategy");

        if (pointDistributionStrategy != null) {
            setPointDistributionStrategy(pointDistributionStrategy);
        }
    }

    @JSON
    @Override
    public long getContestPK() {
        return _ContestPK;
    }

    @Override
    public void setContestPK(long ContestPK) {
        _ContestPK = ContestPK;
    }

    @JSON
    @Override
    public String getContestName() {
        if (_ContestName == null) {
            return StringPool.BLANK;
        } else {
            return _ContestName;
        }
    }

    @Override
    public void setContestName(String ContestName) {
        _ContestName = ContestName;
    }

    @JSON
    @Override
    public String getContestShortName() {
        if (_ContestShortName == null) {
            return StringPool.BLANK;
        } else {
            return _ContestShortName;
        }
    }

    @Override
    public void setContestShortName(String ContestShortName) {
        _ContestShortName = ContestShortName;
    }

    @JSON
    @Override
    public String getContestDescription() {
        if (_ContestDescription == null) {
            return StringPool.BLANK;
        } else {
            return _ContestDescription;
        }
    }

    @Override
    public void setContestDescription(String ContestDescription) {
        _ContestDescription = ContestDescription;
    }

    @JSON
    @Override
    public String getContestModelDescription() {
        if (_ContestModelDescription == null) {
            return StringPool.BLANK;
        } else {
            return _ContestModelDescription;
        }
    }

    @Override
    public void setContestModelDescription(String ContestModelDescription) {
        _ContestModelDescription = ContestModelDescription;
    }

    @JSON
    @Override
    public String getContestPositionsDescription() {
        if (_ContestPositionsDescription == null) {
            return StringPool.BLANK;
        } else {
            return _ContestPositionsDescription;
        }
    }

    @Override
    public void setContestPositionsDescription(
        String ContestPositionsDescription) {
        _ContestPositionsDescription = ContestPositionsDescription;
    }

    @JSON
    @Override
    public String getDefaultPlanDescription() {
        if (_defaultPlanDescription == null) {
            return StringPool.BLANK;
        } else {
            return _defaultPlanDescription;
        }
    }

    @Override
    public void setDefaultPlanDescription(String defaultPlanDescription) {
        _defaultPlanDescription = defaultPlanDescription;
    }

    @JSON
    @Override
    public long getPlanTypeId() {
        return _PlanTypeId;
    }

    @Override
    public void setPlanTypeId(long PlanTypeId) {
        _columnBitmask |= PLANTYPEID_COLUMN_BITMASK;

        if (!_setOriginalPlanTypeId) {
            _setOriginalPlanTypeId = true;

            _originalPlanTypeId = _PlanTypeId;
        }

        _PlanTypeId = PlanTypeId;
    }

    public long getOriginalPlanTypeId() {
        return _originalPlanTypeId;
    }

    @JSON
    @Override
    public Date getCreated() {
        return _created;
    }

    @Override
    public void setCreated(Date created) {
        _columnBitmask = -1L;

        _created = created;
    }

    @JSON
    @Override
    public Date getUpdated() {
        return _updated;
    }

    @Override
    public void setUpdated(Date updated) {
        _updated = updated;
    }

    @JSON
    @Override
    public long getAuthorId() {
        return _authorId;
    }

    @Override
    public void setAuthorId(long authorId) {
        _authorId = authorId;
    }

    @JSON
    @Override
    public boolean getContestActive() {
        return _contestActive;
    }

    @Override
    public boolean isContestActive() {
        return _contestActive;
    }

    @Override
    public void setContestActive(boolean contestActive) {
        _columnBitmask |= CONTESTACTIVE_COLUMN_BITMASK;

        if (!_setOriginalContestActive) {
            _setOriginalContestActive = true;

            _originalContestActive = _contestActive;
        }

        _contestActive = contestActive;
    }

    public boolean getOriginalContestActive() {
        return _originalContestActive;
    }

    @JSON
    @Override
    public long getPlanTemplateId() {
        return _planTemplateId;
    }

    @Override
    public void setPlanTemplateId(long planTemplateId) {
        _planTemplateId = planTemplateId;
    }

    @JSON
    @Override
    public long getContestScheduleId() {
        return _contestScheduleId;
    }

    @Override
    public void setContestScheduleId(long contestScheduleId) {
        _contestScheduleId = contestScheduleId;
    }

    @JSON
    @Override
    public long getFocusAreaId() {
        return _focusAreaId;
    }

    @Override
    public void setFocusAreaId(long focusAreaId) {
        _focusAreaId = focusAreaId;
    }

    @JSON
    @Override
    public long getContestTier() {
        return _contestTier;
    }

    @Override
    public void setContestTier(long contestTier) {
        _columnBitmask |= CONTESTTIER_COLUMN_BITMASK;

        if (!_setOriginalContestTier) {
            _setOriginalContestTier = true;

            _originalContestTier = _contestTier;
        }

        _contestTier = contestTier;
    }

    public long getOriginalContestTier() {
        return _originalContestTier;
    }

    @JSON
    @Override
    public long getContestLogoId() {
        return _contestLogoId;
    }

    @Override
    public void setContestLogoId(long contestLogoId) {
        _contestLogoId = contestLogoId;
    }

    @JSON
    @Override
    public boolean getFeatured() {
        return _featured;
    }

    @Override
    public boolean isFeatured() {
        return _featured;
    }

    @Override
    public void setFeatured(boolean featured) {
        _columnBitmask |= FEATURED_COLUMN_BITMASK;

        if (!_setOriginalFeatured) {
            _setOriginalFeatured = true;

            _originalFeatured = _featured;
        }

        _featured = featured;
    }

    public boolean getOriginalFeatured() {
        return _originalFeatured;
    }

    @JSON
    @Override
    public boolean getPlansOpenByDefault() {
        return _plansOpenByDefault;
    }

    @Override
    public boolean isPlansOpenByDefault() {
        return _plansOpenByDefault;
    }

    @Override
    public void setPlansOpenByDefault(boolean plansOpenByDefault) {
        _plansOpenByDefault = plansOpenByDefault;
    }

    @JSON
    @Override
    public long getSponsorLogoId() {
        return _sponsorLogoId;
    }

    @Override
    public void setSponsorLogoId(long sponsorLogoId) {
        _sponsorLogoId = sponsorLogoId;
    }

    @JSON
    @Override
    public String getSponsorText() {
        if (_sponsorText == null) {
            return StringPool.BLANK;
        } else {
            return _sponsorText;
        }
    }

    @Override
    public void setSponsorText(String sponsorText) {
        _sponsorText = sponsorText;
    }

    @JSON
    @Override
    public String getSponsorLink() {
        if (_sponsorLink == null) {
            return StringPool.BLANK;
        } else {
            return _sponsorLink;
        }
    }

    @Override
    public void setSponsorLink(String sponsorLink) {
        _sponsorLink = sponsorLink;
    }

    @JSON
    @Override
    public int getFlag() {
        return _flag;
    }

    @Override
    public void setFlag(int flag) {
        _columnBitmask |= FLAG_COLUMN_BITMASK;

        if (!_setOriginalFlag) {
            _setOriginalFlag = true;

            _originalFlag = _flag;
        }

        _flag = flag;
    }

    public int getOriginalFlag() {
        return _originalFlag;
    }

    @JSON
    @Override
    public String getFlagText() {
        if (_flagText == null) {
            return StringPool.BLANK;
        } else {
            return _flagText;
        }
    }

    @Override
    public void setFlagText(String flagText) {
        _columnBitmask |= FLAGTEXT_COLUMN_BITMASK;

        if (_originalFlagText == null) {
            _originalFlagText = _flagText;
        }

        _flagText = flagText;
    }

    public String getOriginalFlagText() {
        return GetterUtil.getString(_originalFlagText);
    }

    @JSON
    @Override
    public String getFlagTooltip() {
        if (_flagTooltip == null) {
            return StringPool.BLANK;
        } else {
            return _flagTooltip;
        }
    }

    @Override
    public void setFlagTooltip(String flagTooltip) {
        _flagTooltip = flagTooltip;
    }

    @JSON
    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _groupId = groupId;
    }

    @JSON
    @Override
    public long getDiscussionGroupId() {
        return _discussionGroupId;
    }

    @Override
    public void setDiscussionGroupId(long discussionGroupId) {
        _discussionGroupId = discussionGroupId;
    }

    @JSON
    @Override
    public int getWeight() {
        return _weight;
    }

    @Override
    public void setWeight(int weight) {
        _columnBitmask = -1L;

        _weight = weight;
    }

    @JSON
    @Override
    public String getResourcesUrl() {
        if (_resourcesUrl == null) {
            return StringPool.BLANK;
        } else {
            return _resourcesUrl;
        }
    }

    @Override
    public void setResourcesUrl(String resourcesUrl) {
        _resourcesUrl = resourcesUrl;
    }

    @JSON
    @Override
    public boolean getContestPrivate() {
        return _contestPrivate;
    }

    @Override
    public boolean isContestPrivate() {
        return _contestPrivate;
    }

    @Override
    public void setContestPrivate(boolean contestPrivate) {
        _columnBitmask |= CONTESTPRIVATE_COLUMN_BITMASK;

        if (!_setOriginalContestPrivate) {
            _setOriginalContestPrivate = true;

            _originalContestPrivate = _contestPrivate;
        }

        _contestPrivate = contestPrivate;
    }

    public boolean getOriginalContestPrivate() {
        return _originalContestPrivate;
    }

    @JSON
    @Override
    public boolean getUsePermissions() {
        return _usePermissions;
    }

    @Override
    public boolean isUsePermissions() {
        return _usePermissions;
    }

    @Override
    public void setUsePermissions(boolean usePermissions) {
        _usePermissions = usePermissions;
    }

    @JSON
    @Override
    public String getContestCreationStatus() {
        if (_contestCreationStatus == null) {
            return StringPool.BLANK;
        } else {
            return _contestCreationStatus;
        }
    }

    @Override
    public void setContestCreationStatus(String contestCreationStatus) {
        _contestCreationStatus = contestCreationStatus;
    }

    @JSON
    @Override
    public long getDefaultModelId() {
        return _defaultModelId;
    }

    @Override
    public void setDefaultModelId(long defaultModelId) {
        _defaultModelId = defaultModelId;
    }

    @JSON
    @Override
    public String getOtherModels() {
        if (_otherModels == null) {
            return StringPool.BLANK;
        } else {
            return _otherModels;
        }
    }

    @Override
    public void setOtherModels(String otherModels) {
        _otherModels = otherModels;
    }

    @JSON
    @Override
    public double getPoints() {
        return _points;
    }

    @Override
    public void setPoints(double points) {
        _points = points;
    }

    @JSON
    @Override
    public long getDefaultParentPointType() {
        return _defaultParentPointType;
    }

    @Override
    public void setDefaultParentPointType(long defaultParentPointType) {
        _defaultParentPointType = defaultParentPointType;
    }

    @JSON
    @Override
    public String getPointDistributionStrategy() {
        if (_pointDistributionStrategy == null) {
            return StringPool.BLANK;
        } else {
            return _pointDistributionStrategy;
        }
    }

    @Override
    public void setPointDistributionStrategy(String pointDistributionStrategy) {
        _pointDistributionStrategy = pointDistributionStrategy;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Contest.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Contest toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Contest) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ContestImpl contestImpl = new ContestImpl();

        contestImpl.setContestPK(getContestPK());
        contestImpl.setContestName(getContestName());
        contestImpl.setContestShortName(getContestShortName());
        contestImpl.setContestDescription(getContestDescription());
        contestImpl.setContestModelDescription(getContestModelDescription());
        contestImpl.setContestPositionsDescription(getContestPositionsDescription());
        contestImpl.setDefaultPlanDescription(getDefaultPlanDescription());
        contestImpl.setPlanTypeId(getPlanTypeId());
        contestImpl.setCreated(getCreated());
        contestImpl.setUpdated(getUpdated());
        contestImpl.setAuthorId(getAuthorId());
        contestImpl.setContestActive(getContestActive());
        contestImpl.setPlanTemplateId(getPlanTemplateId());
        contestImpl.setContestScheduleId(getContestScheduleId());
        contestImpl.setFocusAreaId(getFocusAreaId());
        contestImpl.setContestTier(getContestTier());
        contestImpl.setContestLogoId(getContestLogoId());
        contestImpl.setFeatured(getFeatured());
        contestImpl.setPlansOpenByDefault(getPlansOpenByDefault());
        contestImpl.setSponsorLogoId(getSponsorLogoId());
        contestImpl.setSponsorText(getSponsorText());
        contestImpl.setSponsorLink(getSponsorLink());
        contestImpl.setFlag(getFlag());
        contestImpl.setFlagText(getFlagText());
        contestImpl.setFlagTooltip(getFlagTooltip());
        contestImpl.setGroupId(getGroupId());
        contestImpl.setDiscussionGroupId(getDiscussionGroupId());
        contestImpl.setWeight(getWeight());
        contestImpl.setResourcesUrl(getResourcesUrl());
        contestImpl.setContestPrivate(getContestPrivate());
        contestImpl.setUsePermissions(getUsePermissions());
        contestImpl.setContestCreationStatus(getContestCreationStatus());
        contestImpl.setDefaultModelId(getDefaultModelId());
        contestImpl.setOtherModels(getOtherModels());
        contestImpl.setPoints(getPoints());
        contestImpl.setDefaultParentPointType(getDefaultParentPointType());
        contestImpl.setPointDistributionStrategy(getPointDistributionStrategy());

        contestImpl.resetOriginalValues();

        return contestImpl;
    }

    @Override
    public int compareTo(Contest contest) {
        int value = 0;

        if (getWeight() < contest.getWeight()) {
            value = -1;
        } else if (getWeight() > contest.getWeight()) {
            value = 1;
        } else {
            value = 0;
        }

        if (value != 0) {
            return value;
        }

        value = DateUtil.compareTo(getCreated(), contest.getCreated());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Contest)) {
            return false;
        }

        Contest contest = (Contest) obj;

        long primaryKey = contest.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        ContestModelImpl contestModelImpl = this;

        contestModelImpl._originalPlanTypeId = contestModelImpl._PlanTypeId;

        contestModelImpl._setOriginalPlanTypeId = false;

        contestModelImpl._originalContestActive = contestModelImpl._contestActive;

        contestModelImpl._setOriginalContestActive = false;

        contestModelImpl._originalContestTier = contestModelImpl._contestTier;

        contestModelImpl._setOriginalContestTier = false;

        contestModelImpl._originalFeatured = contestModelImpl._featured;

        contestModelImpl._setOriginalFeatured = false;

        contestModelImpl._originalFlag = contestModelImpl._flag;

        contestModelImpl._setOriginalFlag = false;

        contestModelImpl._originalFlagText = contestModelImpl._flagText;

        contestModelImpl._originalContestPrivate = contestModelImpl._contestPrivate;

        contestModelImpl._setOriginalContestPrivate = false;

        contestModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Contest> toCacheModel() {
        ContestCacheModel contestCacheModel = new ContestCacheModel();

        contestCacheModel.ContestPK = getContestPK();

        contestCacheModel.ContestName = getContestName();

        String ContestName = contestCacheModel.ContestName;

        if ((ContestName != null) && (ContestName.length() == 0)) {
            contestCacheModel.ContestName = null;
        }

        contestCacheModel.ContestShortName = getContestShortName();

        String ContestShortName = contestCacheModel.ContestShortName;

        if ((ContestShortName != null) && (ContestShortName.length() == 0)) {
            contestCacheModel.ContestShortName = null;
        }

        contestCacheModel.ContestDescription = getContestDescription();

        String ContestDescription = contestCacheModel.ContestDescription;

        if ((ContestDescription != null) && (ContestDescription.length() == 0)) {
            contestCacheModel.ContestDescription = null;
        }

        contestCacheModel.ContestModelDescription = getContestModelDescription();

        String ContestModelDescription = contestCacheModel.ContestModelDescription;

        if ((ContestModelDescription != null) &&
                (ContestModelDescription.length() == 0)) {
            contestCacheModel.ContestModelDescription = null;
        }

        contestCacheModel.ContestPositionsDescription = getContestPositionsDescription();

        String ContestPositionsDescription = contestCacheModel.ContestPositionsDescription;

        if ((ContestPositionsDescription != null) &&
                (ContestPositionsDescription.length() == 0)) {
            contestCacheModel.ContestPositionsDescription = null;
        }

        contestCacheModel.defaultPlanDescription = getDefaultPlanDescription();

        String defaultPlanDescription = contestCacheModel.defaultPlanDescription;

        if ((defaultPlanDescription != null) &&
                (defaultPlanDescription.length() == 0)) {
            contestCacheModel.defaultPlanDescription = null;
        }

        contestCacheModel.PlanTypeId = getPlanTypeId();

        Date created = getCreated();

        if (created != null) {
            contestCacheModel.created = created.getTime();
        } else {
            contestCacheModel.created = Long.MIN_VALUE;
        }

        Date updated = getUpdated();

        if (updated != null) {
            contestCacheModel.updated = updated.getTime();
        } else {
            contestCacheModel.updated = Long.MIN_VALUE;
        }

        contestCacheModel.authorId = getAuthorId();

        contestCacheModel.contestActive = getContestActive();

        contestCacheModel.planTemplateId = getPlanTemplateId();

        contestCacheModel.contestScheduleId = getContestScheduleId();

        contestCacheModel.focusAreaId = getFocusAreaId();

        contestCacheModel.contestTier = getContestTier();

        contestCacheModel.contestLogoId = getContestLogoId();

        contestCacheModel.featured = getFeatured();

        contestCacheModel.plansOpenByDefault = getPlansOpenByDefault();

        contestCacheModel.sponsorLogoId = getSponsorLogoId();

        contestCacheModel.sponsorText = getSponsorText();

        String sponsorText = contestCacheModel.sponsorText;

        if ((sponsorText != null) && (sponsorText.length() == 0)) {
            contestCacheModel.sponsorText = null;
        }

        contestCacheModel.sponsorLink = getSponsorLink();

        String sponsorLink = contestCacheModel.sponsorLink;

        if ((sponsorLink != null) && (sponsorLink.length() == 0)) {
            contestCacheModel.sponsorLink = null;
        }

        contestCacheModel.flag = getFlag();

        contestCacheModel.flagText = getFlagText();

        String flagText = contestCacheModel.flagText;

        if ((flagText != null) && (flagText.length() == 0)) {
            contestCacheModel.flagText = null;
        }

        contestCacheModel.flagTooltip = getFlagTooltip();

        String flagTooltip = contestCacheModel.flagTooltip;

        if ((flagTooltip != null) && (flagTooltip.length() == 0)) {
            contestCacheModel.flagTooltip = null;
        }

        contestCacheModel.groupId = getGroupId();

        contestCacheModel.discussionGroupId = getDiscussionGroupId();

        contestCacheModel.weight = getWeight();

        contestCacheModel.resourcesUrl = getResourcesUrl();

        String resourcesUrl = contestCacheModel.resourcesUrl;

        if ((resourcesUrl != null) && (resourcesUrl.length() == 0)) {
            contestCacheModel.resourcesUrl = null;
        }

        contestCacheModel.contestPrivate = getContestPrivate();

        contestCacheModel.usePermissions = getUsePermissions();

        contestCacheModel.contestCreationStatus = getContestCreationStatus();

        String contestCreationStatus = contestCacheModel.contestCreationStatus;

        if ((contestCreationStatus != null) &&
                (contestCreationStatus.length() == 0)) {
            contestCacheModel.contestCreationStatus = null;
        }

        contestCacheModel.defaultModelId = getDefaultModelId();

        contestCacheModel.otherModels = getOtherModels();

        String otherModels = contestCacheModel.otherModels;

        if ((otherModels != null) && (otherModels.length() == 0)) {
            contestCacheModel.otherModels = null;
        }

        contestCacheModel.points = getPoints();

        contestCacheModel.defaultParentPointType = getDefaultParentPointType();

        contestCacheModel.pointDistributionStrategy = getPointDistributionStrategy();

        String pointDistributionStrategy = contestCacheModel.pointDistributionStrategy;

        if ((pointDistributionStrategy != null) &&
                (pointDistributionStrategy.length() == 0)) {
            contestCacheModel.pointDistributionStrategy = null;
        }

        return contestCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(75);

        sb.append("{ContestPK=");
        sb.append(getContestPK());
        sb.append(", ContestName=");
        sb.append(getContestName());
        sb.append(", ContestShortName=");
        sb.append(getContestShortName());
        sb.append(", ContestDescription=");
        sb.append(getContestDescription());
        sb.append(", ContestModelDescription=");
        sb.append(getContestModelDescription());
        sb.append(", ContestPositionsDescription=");
        sb.append(getContestPositionsDescription());
        sb.append(", defaultPlanDescription=");
        sb.append(getDefaultPlanDescription());
        sb.append(", PlanTypeId=");
        sb.append(getPlanTypeId());
        sb.append(", created=");
        sb.append(getCreated());
        sb.append(", updated=");
        sb.append(getUpdated());
        sb.append(", authorId=");
        sb.append(getAuthorId());
        sb.append(", contestActive=");
        sb.append(getContestActive());
        sb.append(", planTemplateId=");
        sb.append(getPlanTemplateId());
        sb.append(", contestScheduleId=");
        sb.append(getContestScheduleId());
        sb.append(", focusAreaId=");
        sb.append(getFocusAreaId());
        sb.append(", contestTier=");
        sb.append(getContestTier());
        sb.append(", contestLogoId=");
        sb.append(getContestLogoId());
        sb.append(", featured=");
        sb.append(getFeatured());
        sb.append(", plansOpenByDefault=");
        sb.append(getPlansOpenByDefault());
        sb.append(", sponsorLogoId=");
        sb.append(getSponsorLogoId());
        sb.append(", sponsorText=");
        sb.append(getSponsorText());
        sb.append(", sponsorLink=");
        sb.append(getSponsorLink());
        sb.append(", flag=");
        sb.append(getFlag());
        sb.append(", flagText=");
        sb.append(getFlagText());
        sb.append(", flagTooltip=");
        sb.append(getFlagTooltip());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", discussionGroupId=");
        sb.append(getDiscussionGroupId());
        sb.append(", weight=");
        sb.append(getWeight());
        sb.append(", resourcesUrl=");
        sb.append(getResourcesUrl());
        sb.append(", contestPrivate=");
        sb.append(getContestPrivate());
        sb.append(", usePermissions=");
        sb.append(getUsePermissions());
        sb.append(", contestCreationStatus=");
        sb.append(getContestCreationStatus());
        sb.append(", defaultModelId=");
        sb.append(getDefaultModelId());
        sb.append(", otherModels=");
        sb.append(getOtherModels());
        sb.append(", points=");
        sb.append(getPoints());
        sb.append(", defaultParentPointType=");
        sb.append(getDefaultParentPointType());
        sb.append(", pointDistributionStrategy=");
        sb.append(getPointDistributionStrategy());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(115);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.Contest");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>ContestPK</column-name><column-value><![CDATA[");
        sb.append(getContestPK());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ContestName</column-name><column-value><![CDATA[");
        sb.append(getContestName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ContestShortName</column-name><column-value><![CDATA[");
        sb.append(getContestShortName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ContestDescription</column-name><column-value><![CDATA[");
        sb.append(getContestDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ContestModelDescription</column-name><column-value><![CDATA[");
        sb.append(getContestModelDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ContestPositionsDescription</column-name><column-value><![CDATA[");
        sb.append(getContestPositionsDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>defaultPlanDescription</column-name><column-value><![CDATA[");
        sb.append(getDefaultPlanDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>PlanTypeId</column-name><column-value><![CDATA[");
        sb.append(getPlanTypeId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>created</column-name><column-value><![CDATA[");
        sb.append(getCreated());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>updated</column-name><column-value><![CDATA[");
        sb.append(getUpdated());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>authorId</column-name><column-value><![CDATA[");
        sb.append(getAuthorId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contestActive</column-name><column-value><![CDATA[");
        sb.append(getContestActive());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>planTemplateId</column-name><column-value><![CDATA[");
        sb.append(getPlanTemplateId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contestScheduleId</column-name><column-value><![CDATA[");
        sb.append(getContestScheduleId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>focusAreaId</column-name><column-value><![CDATA[");
        sb.append(getFocusAreaId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contestTier</column-name><column-value><![CDATA[");
        sb.append(getContestTier());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contestLogoId</column-name><column-value><![CDATA[");
        sb.append(getContestLogoId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>featured</column-name><column-value><![CDATA[");
        sb.append(getFeatured());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>plansOpenByDefault</column-name><column-value><![CDATA[");
        sb.append(getPlansOpenByDefault());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sponsorLogoId</column-name><column-value><![CDATA[");
        sb.append(getSponsorLogoId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sponsorText</column-name><column-value><![CDATA[");
        sb.append(getSponsorText());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sponsorLink</column-name><column-value><![CDATA[");
        sb.append(getSponsorLink());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>flag</column-name><column-value><![CDATA[");
        sb.append(getFlag());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>flagText</column-name><column-value><![CDATA[");
        sb.append(getFlagText());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>flagTooltip</column-name><column-value><![CDATA[");
        sb.append(getFlagTooltip());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>discussionGroupId</column-name><column-value><![CDATA[");
        sb.append(getDiscussionGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>weight</column-name><column-value><![CDATA[");
        sb.append(getWeight());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>resourcesUrl</column-name><column-value><![CDATA[");
        sb.append(getResourcesUrl());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contestPrivate</column-name><column-value><![CDATA[");
        sb.append(getContestPrivate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>usePermissions</column-name><column-value><![CDATA[");
        sb.append(getUsePermissions());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contestCreationStatus</column-name><column-value><![CDATA[");
        sb.append(getContestCreationStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>defaultModelId</column-name><column-value><![CDATA[");
        sb.append(getDefaultModelId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>otherModels</column-name><column-value><![CDATA[");
        sb.append(getOtherModels());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>points</column-name><column-value><![CDATA[");
        sb.append(getPoints());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>defaultParentPointType</column-name><column-value><![CDATA[");
        sb.append(getDefaultParentPointType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>pointDistributionStrategy</column-name><column-value><![CDATA[");
        sb.append(getPointDistributionStrategy());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
