package com.ext.portlet.model.impl;

import com.ext.portlet.model.Contest;
import com.ext.portlet.model.ContestModel;
import com.ext.portlet.model.ContestSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the Contest service. Represents a row in the &quot;xcolab_Contest&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.ContestModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ContestImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ContestImpl
 * @see com.ext.portlet.model.Contest
 * @see com.ext.portlet.model.ContestModel
 * @generated
 */
@JSON(strict = true)
public class ContestModelImpl extends BaseModelImpl<Contest>
    implements ContestModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a contest model instance should use the {@link com.ext.portlet.model.Contest} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_Contest";
    public static final Object[][] TABLE_COLUMNS = {
            { "ContestPK", Types.BIGINT },
            { "ContestName", Types.VARCHAR },
            { "ContestShortName", Types.VARCHAR },
            { "ContestDescription", Types.VARCHAR },
            { "ContestModelDescription", Types.VARCHAR },
            { "ContestPositionsDescription", Types.VARCHAR },
            { "defaultPlanDescription", Types.CLOB },
            { "PlanTypeId", Types.BIGINT },
            { "created", Types.TIMESTAMP },
            { "updated", Types.TIMESTAMP },
            { "authorId", Types.BIGINT },
            { "contestActive", Types.BOOLEAN },
            { "planTemplateId", Types.BIGINT },
            { "focusAreaId", Types.BIGINT },
            { "contestLogoId", Types.BIGINT },
            { "featured_", Types.BOOLEAN },
            { "plansOpenByDefault", Types.BOOLEAN },
            { "sponsorLogoId", Types.BIGINT },
            { "sponsorText", Types.VARCHAR },
            { "flag", Types.INTEGER },
            { "flagText", Types.VARCHAR },
            { "flagTooltip", Types.VARCHAR },
            { "groupId", Types.BIGINT },
            { "discussionGroupId", Types.BIGINT },
            { "weight", Types.INTEGER },
            { "resourcesUrl", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_Contest (ContestPK LONG not null primary key,ContestName VARCHAR(2048) null,ContestShortName VARCHAR(1024) null,ContestDescription VARCHAR(2048) null,ContestModelDescription VARCHAR(2048) null,ContestPositionsDescription VARCHAR(2048) null,defaultPlanDescription TEXT null,PlanTypeId LONG,created DATE null,updated DATE null,authorId LONG,contestActive BOOLEAN,planTemplateId LONG,focusAreaId LONG,contestLogoId LONG,featured_ BOOLEAN,plansOpenByDefault BOOLEAN,sponsorLogoId LONG,sponsorText VARCHAR(75) null,flag INTEGER,flagText VARCHAR(1024) null,flagTooltip VARCHAR(1024) null,groupId LONG,discussionGroupId LONG,weight INTEGER,resourcesUrl VARCHAR(1024) null)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_Contest";
    public static final String ORDER_BY_JPQL = " ORDER BY contest.weight ASC, contest.created ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_Contest.weight ASC, xcolab_Contest.created ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.Contest"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.Contest"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.model.Contest"),
            true);
    public static long PLANTYPEID_COLUMN_BITMASK = 1L;
    public static long CONTESTACTIVE_COLUMN_BITMASK = 2L;
    public static long FEATURED_COLUMN_BITMASK = 4L;
    public static long FLAG_COLUMN_BITMASK = 8L;
    public static long FLAGTEXT_COLUMN_BITMASK = 16L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.Contest"));
    private static ClassLoader _classLoader = Contest.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            Contest.class
        };
    private long _ContestPK;
    private String _ContestName;
    private String _ContestShortName;
    private String _ContestDescription;
    private String _ContestModelDescription;
    private String _ContestPositionsDescription;
    private String _defaultPlanDescription;
    private long _PlanTypeId;
    private long _originalPlanTypeId;
    private boolean _setOriginalPlanTypeId;
    private Date _created;
    private Date _updated;
    private long _authorId;
    private boolean _contestActive;
    private boolean _originalContestActive;
    private boolean _setOriginalContestActive;
    private long _planTemplateId;
    private long _focusAreaId;
    private long _contestLogoId;
    private boolean _featured;
    private boolean _originalFeatured;
    private boolean _setOriginalFeatured;
    private boolean _plansOpenByDefault;
    private long _sponsorLogoId;
    private String _sponsorText;
    private int _flag;
    private int _originalFlag;
    private boolean _setOriginalFlag;
    private String _flagText;
    private String _originalFlagText;
    private String _flagTooltip;
    private long _groupId;
    private long _discussionGroupId;
    private int _weight;
    private String _resourcesUrl;
    private transient ExpandoBridge _expandoBridge;
    private long _columnBitmask;
    private Contest _escapedModelProxy;

    public ContestModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Contest toModel(ContestSoap soapModel) {
        Contest model = new ContestImpl();

        model.setContestPK(soapModel.getContestPK());
        model.setContestName(soapModel.getContestName());
        model.setContestShortName(soapModel.getContestShortName());
        model.setContestDescription(soapModel.getContestDescription());
        model.setContestModelDescription(soapModel.getContestModelDescription());
        model.setContestPositionsDescription(soapModel.getContestPositionsDescription());
        model.setDefaultPlanDescription(soapModel.getDefaultPlanDescription());
        model.setPlanTypeId(soapModel.getPlanTypeId());
        model.setCreated(soapModel.getCreated());
        model.setUpdated(soapModel.getUpdated());
        model.setAuthorId(soapModel.getAuthorId());
        model.setContestActive(soapModel.getContestActive());
        model.setPlanTemplateId(soapModel.getPlanTemplateId());
        model.setFocusAreaId(soapModel.getFocusAreaId());
        model.setContestLogoId(soapModel.getContestLogoId());
        model.setFeatured(soapModel.getFeatured());
        model.setPlansOpenByDefault(soapModel.getPlansOpenByDefault());
        model.setSponsorLogoId(soapModel.getSponsorLogoId());
        model.setSponsorText(soapModel.getSponsorText());
        model.setFlag(soapModel.getFlag());
        model.setFlagText(soapModel.getFlagText());
        model.setFlagTooltip(soapModel.getFlagTooltip());
        model.setGroupId(soapModel.getGroupId());
        model.setDiscussionGroupId(soapModel.getDiscussionGroupId());
        model.setWeight(soapModel.getWeight());
        model.setResourcesUrl(soapModel.getResourcesUrl());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Contest> toModels(ContestSoap[] soapModels) {
        List<Contest> models = new ArrayList<Contest>(soapModels.length);

        for (ContestSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public long getPrimaryKey() {
        return _ContestPK;
    }

    public void setPrimaryKey(long primaryKey) {
        setContestPK(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_ContestPK);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return Contest.class;
    }

    public String getModelClassName() {
        return Contest.class.getName();
    }

    @JSON
    public long getContestPK() {
        return _ContestPK;
    }

    public void setContestPK(long ContestPK) {
        _ContestPK = ContestPK;
    }

    @JSON
    public String getContestName() {
        if (_ContestName == null) {
            return StringPool.BLANK;
        } else {
            return _ContestName;
        }
    }

    public void setContestName(String ContestName) {
        _ContestName = ContestName;
    }

    @JSON
    public String getContestShortName() {
        if (_ContestShortName == null) {
            return StringPool.BLANK;
        } else {
            return _ContestShortName;
        }
    }

    public void setContestShortName(String ContestShortName) {
        _ContestShortName = ContestShortName;
    }

    @JSON
    public String getContestDescription() {
        if (_ContestDescription == null) {
            return StringPool.BLANK;
        } else {
            return _ContestDescription;
        }
    }

    public void setContestDescription(String ContestDescription) {
        _ContestDescription = ContestDescription;
    }

    @JSON
    public String getContestModelDescription() {
        if (_ContestModelDescription == null) {
            return StringPool.BLANK;
        } else {
            return _ContestModelDescription;
        }
    }

    public void setContestModelDescription(String ContestModelDescription) {
        _ContestModelDescription = ContestModelDescription;
    }

    @JSON
    public String getContestPositionsDescription() {
        if (_ContestPositionsDescription == null) {
            return StringPool.BLANK;
        } else {
            return _ContestPositionsDescription;
        }
    }

    public void setContestPositionsDescription(
        String ContestPositionsDescription) {
        _ContestPositionsDescription = ContestPositionsDescription;
    }

    @JSON
    public String getDefaultPlanDescription() {
        if (_defaultPlanDescription == null) {
            return StringPool.BLANK;
        } else {
            return _defaultPlanDescription;
        }
    }

    public void setDefaultPlanDescription(String defaultPlanDescription) {
        _defaultPlanDescription = defaultPlanDescription;
    }

    @JSON
    public long getPlanTypeId() {
        return _PlanTypeId;
    }

    public void setPlanTypeId(long PlanTypeId) {
        _columnBitmask |= PLANTYPEID_COLUMN_BITMASK;

        if (!_setOriginalPlanTypeId) {
            _setOriginalPlanTypeId = true;

            _originalPlanTypeId = _PlanTypeId;
        }

        _PlanTypeId = PlanTypeId;
    }

    public long getOriginalPlanTypeId() {
        return _originalPlanTypeId;
    }

    @JSON
    public Date getCreated() {
        return _created;
    }

    public void setCreated(Date created) {
        _columnBitmask = -1L;

        _created = created;
    }

    @JSON
    public Date getUpdated() {
        return _updated;
    }

    public void setUpdated(Date updated) {
        _updated = updated;
    }

    @JSON
    public long getAuthorId() {
        return _authorId;
    }

    public void setAuthorId(long authorId) {
        _authorId = authorId;
    }

    @JSON
    public boolean getContestActive() {
        return _contestActive;
    }

    public boolean isContestActive() {
        return _contestActive;
    }

    public void setContestActive(boolean contestActive) {
        _columnBitmask |= CONTESTACTIVE_COLUMN_BITMASK;

        if (!_setOriginalContestActive) {
            _setOriginalContestActive = true;

            _originalContestActive = _contestActive;
        }

        _contestActive = contestActive;
    }

    public boolean getOriginalContestActive() {
        return _originalContestActive;
    }

    @JSON
    public long getPlanTemplateId() {
        return _planTemplateId;
    }

    public void setPlanTemplateId(long planTemplateId) {
        _planTemplateId = planTemplateId;
    }

    @JSON
    public long getFocusAreaId() {
        return _focusAreaId;
    }

    public void setFocusAreaId(long focusAreaId) {
        _focusAreaId = focusAreaId;
    }

    @JSON
    public long getContestLogoId() {
        return _contestLogoId;
    }

    public void setContestLogoId(long contestLogoId) {
        _contestLogoId = contestLogoId;
    }

    @JSON
    public boolean getFeatured() {
        return _featured;
    }

    public boolean isFeatured() {
        return _featured;
    }

    public void setFeatured(boolean featured) {
        _columnBitmask |= FEATURED_COLUMN_BITMASK;

        if (!_setOriginalFeatured) {
            _setOriginalFeatured = true;

            _originalFeatured = _featured;
        }

        _featured = featured;
    }

    public boolean getOriginalFeatured() {
        return _originalFeatured;
    }

    @JSON
    public boolean getPlansOpenByDefault() {
        return _plansOpenByDefault;
    }

    public boolean isPlansOpenByDefault() {
        return _plansOpenByDefault;
    }

    public void setPlansOpenByDefault(boolean plansOpenByDefault) {
        _plansOpenByDefault = plansOpenByDefault;
    }

    @JSON
    public long getSponsorLogoId() {
        return _sponsorLogoId;
    }

    public void setSponsorLogoId(long sponsorLogoId) {
        _sponsorLogoId = sponsorLogoId;
    }

    @JSON
    public String getSponsorText() {
        if (_sponsorText == null) {
            return StringPool.BLANK;
        } else {
            return _sponsorText;
        }
    }

    public void setSponsorText(String sponsorText) {
        _sponsorText = sponsorText;
    }

    @JSON
    public int getFlag() {
        return _flag;
    }

    public void setFlag(int flag) {
        _columnBitmask |= FLAG_COLUMN_BITMASK;

        if (!_setOriginalFlag) {
            _setOriginalFlag = true;

            _originalFlag = _flag;
        }

        _flag = flag;
    }

    public int getOriginalFlag() {
        return _originalFlag;
    }

    @JSON
    public String getFlagText() {
        if (_flagText == null) {
            return StringPool.BLANK;
        } else {
            return _flagText;
        }
    }

    public void setFlagText(String flagText) {
        _columnBitmask |= FLAGTEXT_COLUMN_BITMASK;

        if (_originalFlagText == null) {
            _originalFlagText = _flagText;
        }

        _flagText = flagText;
    }

    public String getOriginalFlagText() {
        return GetterUtil.getString(_originalFlagText);
    }

    @JSON
    public String getFlagTooltip() {
        if (_flagTooltip == null) {
            return StringPool.BLANK;
        } else {
            return _flagTooltip;
        }
    }

    public void setFlagTooltip(String flagTooltip) {
        _flagTooltip = flagTooltip;
    }

    @JSON
    public long getGroupId() {
        return _groupId;
    }

    public void setGroupId(long groupId) {
        _groupId = groupId;
    }

    @JSON
    public long getDiscussionGroupId() {
        return _discussionGroupId;
    }

    public void setDiscussionGroupId(long discussionGroupId) {
        _discussionGroupId = discussionGroupId;
    }

    @JSON
    public int getWeight() {
        return _weight;
    }

    public void setWeight(int weight) {
        _columnBitmask = -1L;

        _weight = weight;
    }

    @JSON
    public String getResourcesUrl() {
        if (_resourcesUrl == null) {
            return StringPool.BLANK;
        } else {
            return _resourcesUrl;
        }
    }

    public void setResourcesUrl(String resourcesUrl) {
        _resourcesUrl = resourcesUrl;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public Contest toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (Contest) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        if (_expandoBridge == null) {
            _expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
                    Contest.class.getName(), getPrimaryKey());
        }

        return _expandoBridge;
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        getExpandoBridge().setAttributes(serviceContext);
    }

    @Override
    public Object clone() {
        ContestImpl contestImpl = new ContestImpl();

        contestImpl.setContestPK(getContestPK());
        contestImpl.setContestName(getContestName());
        contestImpl.setContestShortName(getContestShortName());
        contestImpl.setContestDescription(getContestDescription());
        contestImpl.setContestModelDescription(getContestModelDescription());
        contestImpl.setContestPositionsDescription(getContestPositionsDescription());
        contestImpl.setDefaultPlanDescription(getDefaultPlanDescription());
        contestImpl.setPlanTypeId(getPlanTypeId());
        contestImpl.setCreated(getCreated());
        contestImpl.setUpdated(getUpdated());
        contestImpl.setAuthorId(getAuthorId());
        contestImpl.setContestActive(getContestActive());
        contestImpl.setPlanTemplateId(getPlanTemplateId());
        contestImpl.setFocusAreaId(getFocusAreaId());
        contestImpl.setContestLogoId(getContestLogoId());
        contestImpl.setFeatured(getFeatured());
        contestImpl.setPlansOpenByDefault(getPlansOpenByDefault());
        contestImpl.setSponsorLogoId(getSponsorLogoId());
        contestImpl.setSponsorText(getSponsorText());
        contestImpl.setFlag(getFlag());
        contestImpl.setFlagText(getFlagText());
        contestImpl.setFlagTooltip(getFlagTooltip());
        contestImpl.setGroupId(getGroupId());
        contestImpl.setDiscussionGroupId(getDiscussionGroupId());
        contestImpl.setWeight(getWeight());
        contestImpl.setResourcesUrl(getResourcesUrl());

        contestImpl.resetOriginalValues();

        return contestImpl;
    }

    public int compareTo(Contest contest) {
        int value = 0;

        if (getWeight() < contest.getWeight()) {
            value = -1;
        } else if (getWeight() > contest.getWeight()) {
            value = 1;
        } else {
            value = 0;
        }

        if (value != 0) {
            return value;
        }

        value = DateUtil.compareTo(getCreated(), contest.getCreated());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        Contest contest = null;

        try {
            contest = (Contest) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = contest.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        ContestModelImpl contestModelImpl = this;

        contestModelImpl._originalPlanTypeId = contestModelImpl._PlanTypeId;

        contestModelImpl._setOriginalPlanTypeId = false;

        contestModelImpl._originalContestActive = contestModelImpl._contestActive;

        contestModelImpl._setOriginalContestActive = false;

        contestModelImpl._originalFeatured = contestModelImpl._featured;

        contestModelImpl._setOriginalFeatured = false;

        contestModelImpl._originalFlag = contestModelImpl._flag;

        contestModelImpl._setOriginalFlag = false;

        contestModelImpl._originalFlagText = contestModelImpl._flagText;

        contestModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Contest> toCacheModel() {
        ContestCacheModel contestCacheModel = new ContestCacheModel();

        contestCacheModel.ContestPK = getContestPK();

        contestCacheModel.ContestName = getContestName();

        String ContestName = contestCacheModel.ContestName;

        if ((ContestName != null) && (ContestName.length() == 0)) {
            contestCacheModel.ContestName = null;
        }

        contestCacheModel.ContestShortName = getContestShortName();

        String ContestShortName = contestCacheModel.ContestShortName;

        if ((ContestShortName != null) && (ContestShortName.length() == 0)) {
            contestCacheModel.ContestShortName = null;
        }

        contestCacheModel.ContestDescription = getContestDescription();

        String ContestDescription = contestCacheModel.ContestDescription;

        if ((ContestDescription != null) && (ContestDescription.length() == 0)) {
            contestCacheModel.ContestDescription = null;
        }

        contestCacheModel.ContestModelDescription = getContestModelDescription();

        String ContestModelDescription = contestCacheModel.ContestModelDescription;

        if ((ContestModelDescription != null) &&
                (ContestModelDescription.length() == 0)) {
            contestCacheModel.ContestModelDescription = null;
        }

        contestCacheModel.ContestPositionsDescription = getContestPositionsDescription();

        String ContestPositionsDescription = contestCacheModel.ContestPositionsDescription;

        if ((ContestPositionsDescription != null) &&
                (ContestPositionsDescription.length() == 0)) {
            contestCacheModel.ContestPositionsDescription = null;
        }

        contestCacheModel.defaultPlanDescription = getDefaultPlanDescription();

        String defaultPlanDescription = contestCacheModel.defaultPlanDescription;

        if ((defaultPlanDescription != null) &&
                (defaultPlanDescription.length() == 0)) {
            contestCacheModel.defaultPlanDescription = null;
        }

        contestCacheModel.PlanTypeId = getPlanTypeId();

        Date created = getCreated();

        if (created != null) {
            contestCacheModel.created = created.getTime();
        } else {
            contestCacheModel.created = Long.MIN_VALUE;
        }

        Date updated = getUpdated();

        if (updated != null) {
            contestCacheModel.updated = updated.getTime();
        } else {
            contestCacheModel.updated = Long.MIN_VALUE;
        }

        contestCacheModel.authorId = getAuthorId();

        contestCacheModel.contestActive = getContestActive();

        contestCacheModel.planTemplateId = getPlanTemplateId();

        contestCacheModel.focusAreaId = getFocusAreaId();

        contestCacheModel.contestLogoId = getContestLogoId();

        contestCacheModel.featured = getFeatured();

        contestCacheModel.plansOpenByDefault = getPlansOpenByDefault();

        contestCacheModel.sponsorLogoId = getSponsorLogoId();

        contestCacheModel.sponsorText = getSponsorText();

        String sponsorText = contestCacheModel.sponsorText;

        if ((sponsorText != null) && (sponsorText.length() == 0)) {
            contestCacheModel.sponsorText = null;
        }

        contestCacheModel.flag = getFlag();

        contestCacheModel.flagText = getFlagText();

        String flagText = contestCacheModel.flagText;

        if ((flagText != null) && (flagText.length() == 0)) {
            contestCacheModel.flagText = null;
        }

        contestCacheModel.flagTooltip = getFlagTooltip();

        String flagTooltip = contestCacheModel.flagTooltip;

        if ((flagTooltip != null) && (flagTooltip.length() == 0)) {
            contestCacheModel.flagTooltip = null;
        }

        contestCacheModel.groupId = getGroupId();

        contestCacheModel.discussionGroupId = getDiscussionGroupId();

        contestCacheModel.weight = getWeight();

        contestCacheModel.resourcesUrl = getResourcesUrl();

        String resourcesUrl = contestCacheModel.resourcesUrl;

        if ((resourcesUrl != null) && (resourcesUrl.length() == 0)) {
            contestCacheModel.resourcesUrl = null;
        }

        return contestCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(53);

        sb.append("{ContestPK=");
        sb.append(getContestPK());
        sb.append(", ContestName=");
        sb.append(getContestName());
        sb.append(", ContestShortName=");
        sb.append(getContestShortName());
        sb.append(", ContestDescription=");
        sb.append(getContestDescription());
        sb.append(", ContestModelDescription=");
        sb.append(getContestModelDescription());
        sb.append(", ContestPositionsDescription=");
        sb.append(getContestPositionsDescription());
        sb.append(", defaultPlanDescription=");
        sb.append(getDefaultPlanDescription());
        sb.append(", PlanTypeId=");
        sb.append(getPlanTypeId());
        sb.append(", created=");
        sb.append(getCreated());
        sb.append(", updated=");
        sb.append(getUpdated());
        sb.append(", authorId=");
        sb.append(getAuthorId());
        sb.append(", contestActive=");
        sb.append(getContestActive());
        sb.append(", planTemplateId=");
        sb.append(getPlanTemplateId());
        sb.append(", focusAreaId=");
        sb.append(getFocusAreaId());
        sb.append(", contestLogoId=");
        sb.append(getContestLogoId());
        sb.append(", featured=");
        sb.append(getFeatured());
        sb.append(", plansOpenByDefault=");
        sb.append(getPlansOpenByDefault());
        sb.append(", sponsorLogoId=");
        sb.append(getSponsorLogoId());
        sb.append(", sponsorText=");
        sb.append(getSponsorText());
        sb.append(", flag=");
        sb.append(getFlag());
        sb.append(", flagText=");
        sb.append(getFlagText());
        sb.append(", flagTooltip=");
        sb.append(getFlagTooltip());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", discussionGroupId=");
        sb.append(getDiscussionGroupId());
        sb.append(", weight=");
        sb.append(getWeight());
        sb.append(", resourcesUrl=");
        sb.append(getResourcesUrl());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(82);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.Contest");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>ContestPK</column-name><column-value><![CDATA[");
        sb.append(getContestPK());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ContestName</column-name><column-value><![CDATA[");
        sb.append(getContestName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ContestShortName</column-name><column-value><![CDATA[");
        sb.append(getContestShortName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ContestDescription</column-name><column-value><![CDATA[");
        sb.append(getContestDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ContestModelDescription</column-name><column-value><![CDATA[");
        sb.append(getContestModelDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ContestPositionsDescription</column-name><column-value><![CDATA[");
        sb.append(getContestPositionsDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>defaultPlanDescription</column-name><column-value><![CDATA[");
        sb.append(getDefaultPlanDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>PlanTypeId</column-name><column-value><![CDATA[");
        sb.append(getPlanTypeId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>created</column-name><column-value><![CDATA[");
        sb.append(getCreated());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>updated</column-name><column-value><![CDATA[");
        sb.append(getUpdated());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>authorId</column-name><column-value><![CDATA[");
        sb.append(getAuthorId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contestActive</column-name><column-value><![CDATA[");
        sb.append(getContestActive());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>planTemplateId</column-name><column-value><![CDATA[");
        sb.append(getPlanTemplateId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>focusAreaId</column-name><column-value><![CDATA[");
        sb.append(getFocusAreaId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contestLogoId</column-name><column-value><![CDATA[");
        sb.append(getContestLogoId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>featured</column-name><column-value><![CDATA[");
        sb.append(getFeatured());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>plansOpenByDefault</column-name><column-value><![CDATA[");
        sb.append(getPlansOpenByDefault());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sponsorLogoId</column-name><column-value><![CDATA[");
        sb.append(getSponsorLogoId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sponsorText</column-name><column-value><![CDATA[");
        sb.append(getSponsorText());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>flag</column-name><column-value><![CDATA[");
        sb.append(getFlag());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>flagText</column-name><column-value><![CDATA[");
        sb.append(getFlagText());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>flagTooltip</column-name><column-value><![CDATA[");
        sb.append(getFlagTooltip());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>discussionGroupId</column-name><column-value><![CDATA[");
        sb.append(getDiscussionGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>weight</column-name><column-value><![CDATA[");
        sb.append(getWeight());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>resourcesUrl</column-name><column-value><![CDATA[");
        sb.append(getResourcesUrl());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
