package com.ext.portlet.model.impl;

import com.ext.portlet.model.PlanPositionItem;
import com.ext.portlet.model.PlanPositionItemModel;
import com.ext.portlet.model.PlanPositionItemSoap;
import com.ext.portlet.service.persistence.PlanPositionItemPK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the PlanPositionItem service. Represents a row in the &quot;xcolab_PlanPositionItem&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.PlanPositionItemModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PlanPositionItemImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PlanPositionItemImpl
 * @see com.ext.portlet.model.PlanPositionItem
 * @see com.ext.portlet.model.PlanPositionItemModel
 * @generated
 */
@JSON(strict = true)
public class PlanPositionItemModelImpl extends BaseModelImpl<PlanPositionItem>
    implements PlanPositionItemModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a plan position item model instance should use the {@link com.ext.portlet.model.PlanPositionItem} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_PlanPositionItem";
    public static final Object[][] TABLE_COLUMNS = {
            { "planPositionsId", Types.BIGINT },
            { "positionId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_PlanPositionItem (planPositionsId LONG not null,positionId LONG not null,primary key (planPositionsId, positionId))";
    public static final String TABLE_SQL_DROP = "drop table xcolab_PlanPositionItem";
    public static final String ORDER_BY_JPQL = " ORDER BY planPositionItem.id.planPositionsId ASC, planPositionItem.id.positionId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_PlanPositionItem.planPositionsId ASC, xcolab_PlanPositionItem.positionId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.PlanPositionItem"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.PlanPositionItem"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.model.PlanPositionItem"),
            true);
    public static long PLANPOSITIONSID_COLUMN_BITMASK = 1L;
    public static long POSITIONID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.PlanPositionItem"));
    private static ClassLoader _classLoader = PlanPositionItem.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            PlanPositionItem.class
        };
    private long _planPositionsId;
    private long _originalPlanPositionsId;
    private boolean _setOriginalPlanPositionsId;
    private long _positionId;
    private long _columnBitmask;
    private PlanPositionItem _escapedModel;

    public PlanPositionItemModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static PlanPositionItem toModel(PlanPositionItemSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        PlanPositionItem model = new PlanPositionItemImpl();

        model.setPlanPositionsId(soapModel.getPlanPositionsId());
        model.setPositionId(soapModel.getPositionId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<PlanPositionItem> toModels(
        PlanPositionItemSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<PlanPositionItem> models = new ArrayList<PlanPositionItem>(soapModels.length);

        for (PlanPositionItemSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public PlanPositionItemPK getPrimaryKey() {
        return new PlanPositionItemPK(_planPositionsId, _positionId);
    }

    @Override
    public void setPrimaryKey(PlanPositionItemPK primaryKey) {
        setPlanPositionsId(primaryKey.planPositionsId);
        setPositionId(primaryKey.positionId);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new PlanPositionItemPK(_planPositionsId, _positionId);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((PlanPositionItemPK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return PlanPositionItem.class;
    }

    @Override
    public String getModelClassName() {
        return PlanPositionItem.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("planPositionsId", getPlanPositionsId());
        attributes.put("positionId", getPositionId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long planPositionsId = (Long) attributes.get("planPositionsId");

        if (planPositionsId != null) {
            setPlanPositionsId(planPositionsId);
        }

        Long positionId = (Long) attributes.get("positionId");

        if (positionId != null) {
            setPositionId(positionId);
        }
    }

    @JSON
    @Override
    public long getPlanPositionsId() {
        return _planPositionsId;
    }

    @Override
    public void setPlanPositionsId(long planPositionsId) {
        _columnBitmask |= PLANPOSITIONSID_COLUMN_BITMASK;

        if (!_setOriginalPlanPositionsId) {
            _setOriginalPlanPositionsId = true;

            _originalPlanPositionsId = _planPositionsId;
        }

        _planPositionsId = planPositionsId;
    }

    public long getOriginalPlanPositionsId() {
        return _originalPlanPositionsId;
    }

    @JSON
    @Override
    public long getPositionId() {
        return _positionId;
    }

    @Override
    public void setPositionId(long positionId) {
        _positionId = positionId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public PlanPositionItem toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (PlanPositionItem) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        PlanPositionItemImpl planPositionItemImpl = new PlanPositionItemImpl();

        planPositionItemImpl.setPlanPositionsId(getPlanPositionsId());
        planPositionItemImpl.setPositionId(getPositionId());

        planPositionItemImpl.resetOriginalValues();

        return planPositionItemImpl;
    }

    @Override
    public int compareTo(PlanPositionItem planPositionItem) {
        PlanPositionItemPK primaryKey = planPositionItem.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof PlanPositionItem)) {
            return false;
        }

        PlanPositionItem planPositionItem = (PlanPositionItem) obj;

        PlanPositionItemPK primaryKey = planPositionItem.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        PlanPositionItemModelImpl planPositionItemModelImpl = this;

        planPositionItemModelImpl._originalPlanPositionsId = planPositionItemModelImpl._planPositionsId;

        planPositionItemModelImpl._setOriginalPlanPositionsId = false;

        planPositionItemModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<PlanPositionItem> toCacheModel() {
        PlanPositionItemCacheModel planPositionItemCacheModel = new PlanPositionItemCacheModel();

        planPositionItemCacheModel.planPositionsId = getPlanPositionsId();

        planPositionItemCacheModel.positionId = getPositionId();

        return planPositionItemCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(5);

        sb.append("{planPositionsId=");
        sb.append(getPlanPositionsId());
        sb.append(", positionId=");
        sb.append(getPositionId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(10);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.PlanPositionItem");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>planPositionsId</column-name><column-value><![CDATA[");
        sb.append(getPlanPositionsId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>positionId</column-name><column-value><![CDATA[");
        sb.append(getPositionId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
