package com.ext.portlet.model.impl;

import com.ext.portlet.model.ProposalRating;
import com.ext.portlet.model.ProposalRatingModel;
import com.ext.portlet.model.ProposalRatingSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ProposalRating service. Represents a row in the &quot;xcolab_ProposalRating&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.ProposalRatingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProposalRatingImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProposalRatingImpl
 * @see com.ext.portlet.model.ProposalRating
 * @see com.ext.portlet.model.ProposalRatingModel
 * @generated
 */
@JSON(strict = true)
public class ProposalRatingModelImpl extends BaseModelImpl<ProposalRating>
    implements ProposalRatingModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a proposal rating model instance should use the {@link com.ext.portlet.model.ProposalRating} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_ProposalRating";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "proposalId", Types.BIGINT },
            { "contestPhaseId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "ratingValueId", Types.BIGINT },
            { "comment_", Types.CLOB },
            { "commentEnabled", Types.BOOLEAN },
            { "otherDataString", Types.VARCHAR },
            { "onlyForInternalUsage", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_ProposalRating (id_ LONG not null primary key,proposalId LONG,contestPhaseId LONG,userId LONG,ratingValueId LONG,comment_ TEXT null,commentEnabled BOOLEAN,otherDataString VARCHAR(75) null,onlyForInternalUsage BOOLEAN)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_ProposalRating";
    public static final String ORDER_BY_JPQL = " ORDER BY proposalRating.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_ProposalRating.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.ProposalRating"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.ProposalRating"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.ProposalRating"));
    private static ClassLoader _classLoader = ProposalRating.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            ProposalRating.class
        };
    private long _id;
    private long _proposalId;
    private long _contestPhaseId;
    private long _userId;
    private String _userUuid;
    private long _ratingValueId;
    private String _comment;
    private boolean _commentEnabled;
    private String _otherDataString;
    private boolean _onlyForInternalUsage;
    private ProposalRating _escapedModel;

    public ProposalRatingModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static ProposalRating toModel(ProposalRatingSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        ProposalRating model = new ProposalRatingImpl();

        model.setId(soapModel.getId());
        model.setProposalId(soapModel.getProposalId());
        model.setContestPhaseId(soapModel.getContestPhaseId());
        model.setUserId(soapModel.getUserId());
        model.setRatingValueId(soapModel.getRatingValueId());
        model.setComment(soapModel.getComment());
        model.setCommentEnabled(soapModel.getCommentEnabled());
        model.setOtherDataString(soapModel.getOtherDataString());
        model.setOnlyForInternalUsage(soapModel.getOnlyForInternalUsage());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<ProposalRating> toModels(ProposalRatingSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<ProposalRating> models = new ArrayList<ProposalRating>(soapModels.length);

        for (ProposalRatingSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return ProposalRating.class;
    }

    @Override
    public String getModelClassName() {
        return ProposalRating.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("proposalId", getProposalId());
        attributes.put("contestPhaseId", getContestPhaseId());
        attributes.put("userId", getUserId());
        attributes.put("ratingValueId", getRatingValueId());
        attributes.put("comment", getComment());
        attributes.put("commentEnabled", getCommentEnabled());
        attributes.put("otherDataString", getOtherDataString());
        attributes.put("onlyForInternalUsage", getOnlyForInternalUsage());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        Long proposalId = (Long) attributes.get("proposalId");

        if (proposalId != null) {
            setProposalId(proposalId);
        }

        Long contestPhaseId = (Long) attributes.get("contestPhaseId");

        if (contestPhaseId != null) {
            setContestPhaseId(contestPhaseId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Long ratingValueId = (Long) attributes.get("ratingValueId");

        if (ratingValueId != null) {
            setRatingValueId(ratingValueId);
        }

        String comment = (String) attributes.get("comment");

        if (comment != null) {
            setComment(comment);
        }

        Boolean commentEnabled = (Boolean) attributes.get("commentEnabled");

        if (commentEnabled != null) {
            setCommentEnabled(commentEnabled);
        }

        String otherDataString = (String) attributes.get("otherDataString");

        if (otherDataString != null) {
            setOtherDataString(otherDataString);
        }

        Boolean onlyForInternalUsage = (Boolean) attributes.get(
                "onlyForInternalUsage");

        if (onlyForInternalUsage != null) {
            setOnlyForInternalUsage(onlyForInternalUsage);
        }
    }

    @JSON
    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @JSON
    @Override
    public long getProposalId() {
        return _proposalId;
    }

    @Override
    public void setProposalId(long proposalId) {
        _proposalId = proposalId;
    }

    @JSON
    @Override
    public long getContestPhaseId() {
        return _contestPhaseId;
    }

    @Override
    public void setContestPhaseId(long contestPhaseId) {
        _contestPhaseId = contestPhaseId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    @Override
    public long getRatingValueId() {
        return _ratingValueId;
    }

    @Override
    public void setRatingValueId(long ratingValueId) {
        _ratingValueId = ratingValueId;
    }

    @JSON
    @Override
    public String getComment() {
        if (_comment == null) {
            return StringPool.BLANK;
        } else {
            return _comment;
        }
    }

    @Override
    public void setComment(String comment) {
        _comment = comment;
    }

    @JSON
    @Override
    public boolean getCommentEnabled() {
        return _commentEnabled;
    }

    @Override
    public boolean isCommentEnabled() {
        return _commentEnabled;
    }

    @Override
    public void setCommentEnabled(boolean commentEnabled) {
        _commentEnabled = commentEnabled;
    }

    @JSON
    @Override
    public String getOtherDataString() {
        if (_otherDataString == null) {
            return StringPool.BLANK;
        } else {
            return _otherDataString;
        }
    }

    @Override
    public void setOtherDataString(String otherDataString) {
        _otherDataString = otherDataString;
    }

    @JSON
    @Override
    public boolean getOnlyForInternalUsage() {
        return _onlyForInternalUsage;
    }

    @Override
    public boolean isOnlyForInternalUsage() {
        return _onlyForInternalUsage;
    }

    @Override
    public void setOnlyForInternalUsage(boolean onlyForInternalUsage) {
        _onlyForInternalUsage = onlyForInternalUsage;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            ProposalRating.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public ProposalRating toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (ProposalRating) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ProposalRatingImpl proposalRatingImpl = new ProposalRatingImpl();

        proposalRatingImpl.setId(getId());
        proposalRatingImpl.setProposalId(getProposalId());
        proposalRatingImpl.setContestPhaseId(getContestPhaseId());
        proposalRatingImpl.setUserId(getUserId());
        proposalRatingImpl.setRatingValueId(getRatingValueId());
        proposalRatingImpl.setComment(getComment());
        proposalRatingImpl.setCommentEnabled(getCommentEnabled());
        proposalRatingImpl.setOtherDataString(getOtherDataString());
        proposalRatingImpl.setOnlyForInternalUsage(getOnlyForInternalUsage());

        proposalRatingImpl.resetOriginalValues();

        return proposalRatingImpl;
    }

    @Override
    public int compareTo(ProposalRating proposalRating) {
        long primaryKey = proposalRating.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ProposalRating)) {
            return false;
        }

        ProposalRating proposalRating = (ProposalRating) obj;

        long primaryKey = proposalRating.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<ProposalRating> toCacheModel() {
        ProposalRatingCacheModel proposalRatingCacheModel = new ProposalRatingCacheModel();

        proposalRatingCacheModel.id = getId();

        proposalRatingCacheModel.proposalId = getProposalId();

        proposalRatingCacheModel.contestPhaseId = getContestPhaseId();

        proposalRatingCacheModel.userId = getUserId();

        proposalRatingCacheModel.ratingValueId = getRatingValueId();

        proposalRatingCacheModel.comment = getComment();

        String comment = proposalRatingCacheModel.comment;

        if ((comment != null) && (comment.length() == 0)) {
            proposalRatingCacheModel.comment = null;
        }

        proposalRatingCacheModel.commentEnabled = getCommentEnabled();

        proposalRatingCacheModel.otherDataString = getOtherDataString();

        String otherDataString = proposalRatingCacheModel.otherDataString;

        if ((otherDataString != null) && (otherDataString.length() == 0)) {
            proposalRatingCacheModel.otherDataString = null;
        }

        proposalRatingCacheModel.onlyForInternalUsage = getOnlyForInternalUsage();

        return proposalRatingCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(19);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", proposalId=");
        sb.append(getProposalId());
        sb.append(", contestPhaseId=");
        sb.append(getContestPhaseId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", ratingValueId=");
        sb.append(getRatingValueId());
        sb.append(", comment=");
        sb.append(getComment());
        sb.append(", commentEnabled=");
        sb.append(getCommentEnabled());
        sb.append(", otherDataString=");
        sb.append(getOtherDataString());
        sb.append(", onlyForInternalUsage=");
        sb.append(getOnlyForInternalUsage());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(31);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.ProposalRating");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>proposalId</column-name><column-value><![CDATA[");
        sb.append(getProposalId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contestPhaseId</column-name><column-value><![CDATA[");
        sb.append(getContestPhaseId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ratingValueId</column-name><column-value><![CDATA[");
        sb.append(getRatingValueId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>comment</column-name><column-value><![CDATA[");
        sb.append(getComment());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>commentEnabled</column-name><column-value><![CDATA[");
        sb.append(getCommentEnabled());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>otherDataString</column-name><column-value><![CDATA[");
        sb.append(getOtherDataString());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>onlyForInternalUsage</column-name><column-value><![CDATA[");
        sb.append(getOnlyForInternalUsage());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
