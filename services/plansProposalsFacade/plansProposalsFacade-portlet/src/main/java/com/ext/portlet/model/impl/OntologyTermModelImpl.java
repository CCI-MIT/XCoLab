package com.ext.portlet.model.impl;

import com.ext.portlet.model.OntologyTerm;
import com.ext.portlet.model.OntologyTermModel;
import com.ext.portlet.model.OntologyTermSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the OntologyTerm service. Represents a row in the &quot;xcolab_OntologyTerm&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.model.OntologyTermModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OntologyTermImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see OntologyTermImpl
 * @see com.ext.portlet.model.OntologyTerm
 * @see com.ext.portlet.model.OntologyTermModel
 * @generated
 */
@JSON(strict = true)
public class OntologyTermModelImpl extends BaseModelImpl<OntologyTerm>
    implements OntologyTermModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a ontology term model instance should use the {@link com.ext.portlet.model.OntologyTerm} interface instead.
     */
    public static final String TABLE_NAME = "xcolab_OntologyTerm";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "parentId", Types.BIGINT },
            { "ontologySpaceId", Types.BIGINT },
            { "name", Types.VARCHAR },
            { "descriptionUrl", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table xcolab_OntologyTerm (id_ LONG not null primary key,parentId LONG,ontologySpaceId LONG,name VARCHAR(256) null,descriptionUrl VARCHAR(1024) null)";
    public static final String TABLE_SQL_DROP = "drop table xcolab_OntologyTerm";
    public static final String ORDER_BY_JPQL = " ORDER BY ontologyTerm.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY xcolab_OntologyTerm.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.ext.portlet.model.OntologyTerm"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.ext.portlet.model.OntologyTerm"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.ext.portlet.model.OntologyTerm"),
            true);
    public static long NAME_COLUMN_BITMASK = 1L;
    public static long ONTOLOGYSPACEID_COLUMN_BITMASK = 2L;
    public static long PARENTID_COLUMN_BITMASK = 4L;
    public static long ID_COLUMN_BITMASK = 8L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.ext.portlet.model.OntologyTerm"));
    private static ClassLoader _classLoader = OntologyTerm.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            OntologyTerm.class
        };
    private long _id;
    private long _parentId;
    private long _originalParentId;
    private boolean _setOriginalParentId;
    private long _ontologySpaceId;
    private long _originalOntologySpaceId;
    private boolean _setOriginalOntologySpaceId;
    private String _name;
    private String _originalName;
    private String _descriptionUrl;
    private long _columnBitmask;
    private OntologyTerm _escapedModel;

    public OntologyTermModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static OntologyTerm toModel(OntologyTermSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        OntologyTerm model = new OntologyTermImpl();

        model.setId(soapModel.getId());
        model.setParentId(soapModel.getParentId());
        model.setOntologySpaceId(soapModel.getOntologySpaceId());
        model.setName(soapModel.getName());
        model.setDescriptionUrl(soapModel.getDescriptionUrl());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<OntologyTerm> toModels(OntologyTermSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<OntologyTerm> models = new ArrayList<OntologyTerm>(soapModels.length);

        for (OntologyTermSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return OntologyTerm.class;
    }

    @Override
    public String getModelClassName() {
        return OntologyTerm.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("parentId", getParentId());
        attributes.put("ontologySpaceId", getOntologySpaceId());
        attributes.put("name", getName());
        attributes.put("descriptionUrl", getDescriptionUrl());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        Long parentId = (Long) attributes.get("parentId");

        if (parentId != null) {
            setParentId(parentId);
        }

        Long ontologySpaceId = (Long) attributes.get("ontologySpaceId");

        if (ontologySpaceId != null) {
            setOntologySpaceId(ontologySpaceId);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        String descriptionUrl = (String) attributes.get("descriptionUrl");

        if (descriptionUrl != null) {
            setDescriptionUrl(descriptionUrl);
        }
    }

    @JSON
    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @JSON
    @Override
    public long getParentId() {
        return _parentId;
    }

    @Override
    public void setParentId(long parentId) {
        _columnBitmask |= PARENTID_COLUMN_BITMASK;

        if (!_setOriginalParentId) {
            _setOriginalParentId = true;

            _originalParentId = _parentId;
        }

        _parentId = parentId;
    }

    public long getOriginalParentId() {
        return _originalParentId;
    }

    @JSON
    @Override
    public long getOntologySpaceId() {
        return _ontologySpaceId;
    }

    @Override
    public void setOntologySpaceId(long ontologySpaceId) {
        _columnBitmask |= ONTOLOGYSPACEID_COLUMN_BITMASK;

        if (!_setOriginalOntologySpaceId) {
            _setOriginalOntologySpaceId = true;

            _originalOntologySpaceId = _ontologySpaceId;
        }

        _ontologySpaceId = ontologySpaceId;
    }

    public long getOriginalOntologySpaceId() {
        return _originalOntologySpaceId;
    }

    @JSON
    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _columnBitmask |= NAME_COLUMN_BITMASK;

        if (_originalName == null) {
            _originalName = _name;
        }

        _name = name;
    }

    public String getOriginalName() {
        return GetterUtil.getString(_originalName);
    }

    @JSON
    @Override
    public String getDescriptionUrl() {
        if (_descriptionUrl == null) {
            return StringPool.BLANK;
        } else {
            return _descriptionUrl;
        }
    }

    @Override
    public void setDescriptionUrl(String descriptionUrl) {
        _descriptionUrl = descriptionUrl;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            OntologyTerm.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public OntologyTerm toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (OntologyTerm) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        OntologyTermImpl ontologyTermImpl = new OntologyTermImpl();

        ontologyTermImpl.setId(getId());
        ontologyTermImpl.setParentId(getParentId());
        ontologyTermImpl.setOntologySpaceId(getOntologySpaceId());
        ontologyTermImpl.setName(getName());
        ontologyTermImpl.setDescriptionUrl(getDescriptionUrl());

        ontologyTermImpl.resetOriginalValues();

        return ontologyTermImpl;
    }

    @Override
    public int compareTo(OntologyTerm ontologyTerm) {
        long primaryKey = ontologyTerm.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof OntologyTerm)) {
            return false;
        }

        OntologyTerm ontologyTerm = (OntologyTerm) obj;

        long primaryKey = ontologyTerm.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        OntologyTermModelImpl ontologyTermModelImpl = this;

        ontologyTermModelImpl._originalParentId = ontologyTermModelImpl._parentId;

        ontologyTermModelImpl._setOriginalParentId = false;

        ontologyTermModelImpl._originalOntologySpaceId = ontologyTermModelImpl._ontologySpaceId;

        ontologyTermModelImpl._setOriginalOntologySpaceId = false;

        ontologyTermModelImpl._originalName = ontologyTermModelImpl._name;

        ontologyTermModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<OntologyTerm> toCacheModel() {
        OntologyTermCacheModel ontologyTermCacheModel = new OntologyTermCacheModel();

        ontologyTermCacheModel.id = getId();

        ontologyTermCacheModel.parentId = getParentId();

        ontologyTermCacheModel.ontologySpaceId = getOntologySpaceId();

        ontologyTermCacheModel.name = getName();

        String name = ontologyTermCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            ontologyTermCacheModel.name = null;
        }

        ontologyTermCacheModel.descriptionUrl = getDescriptionUrl();

        String descriptionUrl = ontologyTermCacheModel.descriptionUrl;

        if ((descriptionUrl != null) && (descriptionUrl.length() == 0)) {
            ontologyTermCacheModel.descriptionUrl = null;
        }

        return ontologyTermCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", parentId=");
        sb.append(getParentId());
        sb.append(", ontologySpaceId=");
        sb.append(getOntologySpaceId());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", descriptionUrl=");
        sb.append(getDescriptionUrl());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("com.ext.portlet.model.OntologyTerm");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>parentId</column-name><column-value><![CDATA[");
        sb.append(getParentId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ontologySpaceId</column-name><column-value><![CDATA[");
        sb.append(getOntologySpaceId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>descriptionUrl</column-name><column-value><![CDATA[");
        sb.append(getDescriptionUrl());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
