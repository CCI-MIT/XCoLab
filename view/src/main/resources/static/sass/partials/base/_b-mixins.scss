@function sqrt($r) {
  $x0: 1;
  $x1: $x0;

  @for $i from 1 through 10 {
    $x1: $x0 - ($x0 * $x0 - abs($r)) / (2 * $x0);
    $x0: $x1;
  }

  @return $x1;
}

// Brightness math based on:
//   http://www.nbdtech.com/Blog/archive/2008/04/27/Calculating-the-Perceived-Brightness-of-a-Color.aspx

$red-magic-number: 0.241;
$green-magic-number: 0.691;
$blue-magic-number: 0.068;

//calculates the brightness of a color on a scale from 0 to 255
@function brightness($color) {
  $red-component: red($color);
  $green-component: green($color);
  $blue-component: blue($color);

  @return sqrt( ($red-magic-number * $red-component * $red-component)
                + ($green-magic-number * $green-component * $green-component)
                + ($blue-magic-number * $blue-component * $blue-component) );
}

//chooses the optimal color for good contrast.
//param threshold is an optional cut-off value between 0 and 255
@function contrasting-color($color, $light: $t-Color__text--light, $dark: $t-Color__text--dark, $threshold: null) {
  @if $threshold == null {
    $threshold: (brightness($light) + brightness($dark)) / 2;
  }
  @if brightness($color) > $threshold {
    @return $dark;
  } @else {
    @return $light;
  }
}

@function simple-gradient($base-color) {
  @return linear-gradient(top, lighten($base-color, 5%), darken($base-color, 5%));
}

@mixin background-gradient($base-color, $image-url: null, $image-padding: 0) {
  background-color: $base-color;
  @if $image-url == null {
    @include background(simple-gradient($base-color));
  } @else {
    @include background($image-url no-repeat, simple-gradient($base-color));
    @include background-size(contain);
    padding-left: $image-padding;
  }
}
