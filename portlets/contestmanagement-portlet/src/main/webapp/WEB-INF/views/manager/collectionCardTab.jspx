<jsp:root xmlns:c="http://java.sun.com/jsp/jstl/core"
          xmlns:jsp="http://java.sun.com/JSP/Page"
          xmlns:form="http://www.springframework.org/tags/form"
          xmlns:contestmanagementPortlet="urn:jsptagdir:/WEB-INF/tags"
          xmlns:portlet="http://java.sun.com/portlet_2_0" version="2.0">

    <!--@elvariable id="collectionCardWrapperWhat" type="org.xcolab.portlets.contestmanagement.wrappers.CollectionCardWrapper"-->
    <!--@elvariable id="collectionCardWrapperWhere" type="org.xcolab.portlets.contestmanagement.wrappers.CollectionCardWrapper"-->
    <!--@elvariable id="section" type="java.lang.Integer"-->
    <!--@elvariable id="level" type="java.lang.Integer"-->

    <jsp:directive.include file="../init.jspx"/>
    <jsp:directive.include file="./header.jspx"/>


    <div class="collectionCard-outline-left">
        <div class="expand">
            <a href="#" class="showall" style="display: inline;">Expand All</a>
            <a href="#" class="hideall" style="display: none;">Collapse All</a>
        </div>
        <br/>
        <h2 class="collectionCard-category">
            Any action:
        </h2>
            <contestmanagementPortlet:collectionCardWithChildren collectionCard="${collectionCardWrapperWhat}" section="${section + 1 }" level="${level + 1 }" />
        <h2 class="collectionCard-category">
            Anywhere:
        </h2>
            <contestmanagementPortlet:collectionCardWithChildren collectionCard="${collectionCardWrapperWhere}" section="${section + 1 }" level="${level + 1 }" />
    </div>

    <div class="collectionCard-outline-right">
        <portlet:actionURL var="changeElementURL">
            <portlet:param name="tab" value="${param.tab}" />
            <portlet:param name="elementId" value="${planTemplateId}" />
        </portlet:actionURL>

        <form:form action="${changeElementURL }" commandName="collectionCardWrapperWhat" id="selectForm" method="post">
            <div class="collectionCard-edit-form">
                <h1 id="title">
                    <!-- -->
                </h1>
                <br/>
                <div class="addpropbox">
                    <strong class="inputTitleLeft">Description:</strong>
                    <input id="description" name="Description" class="wideLargeInput" type="text" value="" validatelength="false"/>
                </div>
                <div class="addpropbox">
                    <strong class="inputTitleLeft">Ontologyterm to load:</strong>
                    <input id="ontologyTermToLoad" name="ontologyTermToLoad" class="wideLargeInput" type="text" value="" validatelength="false"/>
                </div>
                <div class="addpropbox">
                    <strong class="inputTitleLeft">Big Ontologyterm</strong>
                    <form:select path="bigOntologyTerm" id="bigOntologyTerm" cssClass="wideLargeInput" items="${collectionCardWrapperWhat.ontologyTerms}" />
                </div>
                <div class="addpropbox">
                    <strong class="inputTitleLeft">Small Ontologyterm</strong>
                    <input id="smallOntologyTerm" name="smallOntologyTerm" class="wideLargeInput" type="text" value="" validatelength="false"/>
                </div>
            </div>
        </form:form>
    </div>


    <script type="text/javascript">

        var collectionCards = {};
        <c:forEach var="collectionCard" items="${collectionCardWrapperWhat.allCollectionCards}">
                <c:choose>
                    <c:when test="${not empty collectionCard.parentId}">
                        collectionCards[${collectionCard.id}] = {id: ${collectionCard.id}, parent: ${collectionCard.parentId}, bigOntologyTermId: '${collectionCard.bigOntologyTermId}', smallOntologyTermId: '${collectionCard.smallOntologyTermId}',  ontologyTermToLoadId: '${collectionCard.ontologyTermToLoadId}',bigOntologyTerm: '${collectionCard.bigOntologyTerm}', smallOntologyTerm: '${collectionCard.smallOntologyTerm}',  ontologyTermToLoad: '${collectionCard.ontologyTermToLoad}', visible: ${collectionCard.visible}, onlyFeatured: ${collectionCard.onlyFeatured}, description: '${collectionCard.description}'};
                    </c:when>
                    <c:otherwise>
                        collectionCards[${collectionCard.id}] = {id: ${collectionCard.id}, bigOntologyTermId: '${collectionCard.bigOntologyTermId}', smallOntologyTermId: '${collectionCard.smallOntologyTermId}',  ontologyTermToLoadId: '${collectionCard.ontologyTermToLoadId}',bigOntologyTerm: '${collectionCard.bigOntologyTerm}', smallOntologyTerm: '${collectionCard.smallOntologyTerm}',  ontologyTermToLoad: '${collectionCard.ontologyTermToLoad}', visible: ${collectionCard.visible}, onlyFeatured: ${collectionCard.onlyFeatured}, description: '${collectionCard.description}'};
                    </c:otherwise>
                </c:choose>
        </c:forEach>


        <![CDATA[
        jQuery(".collectionCard-outline-left").on('click', 'a', function(event) {
            event.preventDefault();
            var that = this;
            var self = jQuery(this);
            if (self.hasClass('showall') || self.hasClass('hideall')) {
                return;
            }
            var container = self.parent();
            container.addClass('currentlyClicked');
            jQuery('.collectionCard-outline-left li.active').not('.currentlyClicked').removeClass(
                    'active');
            jQuery('.collectionCard-outline-left a.open').each(function () {
                if (that == this) return;

                var parent = jQuery(this).parent();
                if (!parent.hasClass('currentlyClicked') && parent.find(".currentlyClicked").length
                        == 0) {
                    // this is different branch than the one currently clicked, close it
                    parent.find(".open").removeClass("open");
                    parent.find("> ul").slideUp();
                }
            });
            container.removeClass('currentlyClicked').toggleClass('active');
            if (!container.hasClass('active')) {
                container.find("> ul").slideUp();
                self.removeClass('open');
            }
            else {
                self.addClass('open');
                container.find("> ul").slideDown();

                if (container.find("> ul > li").length == 1) {
                    container.find("> ul > li > a").not(".open").addClass('open');
                    container.find("> ul > li > ul").slideDown();
                }
            }
        });

        jQuery(".expand a").click(function() {
            var that = this;
            var self = jQuery(this);
            jQuery(".expand a").toggle();
            if (jQuery(this).hasClass('showall')) {
                jQuery(".collectionCard-outline-left a").addClass('open');
                jQuery(".collectionCard-outline-left .level0 ul").slideDown();
            }
            else {
                jQuery(".collectionCard-outline-left a").removeClass('open');
                jQuery(".collectionCard-outline-left .level0 ul").slideUp();
            }
        });

        jQuery(".collectionCard-outline-left").on('click', 'a', function(event) {
            event.preventDefault();
            var self = jQuery(this);
            if (self.hasClass('showall') || self.hasClass('hideall')) {
                return;
            }
            loadCollectionCardForm(self.attr('data-card-id'));
        });


        function loadCollectionCardForm(collectionCardId) {
            var collectionCard = collectionCards[collectionCardId];

            jQuery(".collectionCard-edit-form #title").html(collectionCard.description)
            jQuery(".collectionCard-edit-form #description").val(collectionCard.description);
            jQuery(".collectionCard-edit-form #ontologyTermToLoad").val(collectionCard.ontologyTermToLoad);
            jQuery(".collectionCard-edit-form #bigOntologyTerm").val(collectionCard.bigOntologyTermId);
            jQuery(".collectionCard-edit-form #smallOntologyTerm").val(collectionCard.smallOntologyTerm);

        }

        ]]>
    </script>

</jsp:root>