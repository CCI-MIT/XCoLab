<jsp:root 
xmlns:c="http://java.sun.com/jsp/jstl/core"
	xmlns:jsp="http://java.sun.com/JSP/Page"
	xmlns:fn="http://java.sun.com/jsp/jstl/functions"
	xmlns:fmt="http://java.sun.com/jsp/jstl/fmt"
	xmlns:spring="http://www.springframework.org/tags"
	xmlns:form="http://www.springframework.org/tags/form"
	xmlns:collab="http://climatecolab.org/tags/collab_1.0"
	xmlns:proposalsPortlet="urn:jsptagdir:/WEB-INF/tags/proposalsPortlet"
	xmlns:portlet="http://java.sun.com/portlet_2_0" version="2.0">
	
  	<div class="contestsContainer">
	
    <div class="contest-outline-left">
        <div class="expand">
        	<a href="#" class="showall" style="display: inline;">Expand All</a>
        	<a href="#" class="hideall" style="display: none;">Collapse All</a>
        </div>
        <div class="contest-count">Contests <span class="count">35</span></div>
        
        <ul class="level0 accordion">
        <c:forEach var="ontologySpace" items="${ontologySpaces }" varStatus="status">
        	<li class="contest-section${status.index+1 }">
        		<a href="#${ontologySpace.id }" class="section-head trigger">
        			<span class="active-icon"><!--  --></span>
        			<h2>${ontologySpace.name } <span>${ontologySpace.description}</span></h2>
        			<span class="section-icon"><!--  --></span>
        		</a>
				<proposalsPortlet:outline_ontologyTermWithChildren terms="${ontologySpace.rootTerms }" section="${status.index+1 }" level="1" />
        	</li>
        </c:forEach> 
                         
        </ul>
    
    </div> <!-- / contest-outline-left -->




    <div class="cintro">
        <h2>How to use the outline</h2>
        <p>The Climate CoLab breaks down the large, complex problem of climate change into a series of more manageable sub-problems; each contest addresses a particular sub-problem.</p>
        <p>All contests can thus be specified by a combination of What-Where-Who-How, as defined by the expandable outline to the left.</p>
        <p><strong>Select an item on the left side of the page to see which contests are defined by the selected part of the outline.</strong></p>
    </div>
    
    
    
    <div class="contest-outline-right">
        
        <div class="contest-count"><span class="count"><!--  --></span> contests</div>
        <!-- 
        <div class="show-active">Display: 
        	<c:choose>
				<c:when test="${showActiveContests }">
					<a href="/web/guest/plans/-/plans/contestsType/prior" data-base-url="/web/guest/plans/-/plans/contestsType/prior" class='showOtherContestsLink' >Show active contests</a>
				</c:when>
				<c:otherwise>
					<a href="/web/guest/plans/" data-base-url="/web/guest/plans/" class='showOtherContestsLink'>Show prior contests</a>
				</c:otherwise>
			</c:choose>
		</div>
		 -->
		<div class="clearfix"><!--  --></div>
        <div class="section-list">
        	<!--  -->
        </div>
        
        
        <div class="prop-head">Proposals</div>
        <div class="contest-list">
       		<!--  -->
        </div> <!-- / contest-list -->
        <div class="otherContestsInfoContainer">
        	<c:if test="${not showAllContests }">
				<c:choose>
					<c:when test="${showActiveContests }">
						<span class="otherContestsCount">If you enable 
						<a href="/web/guest/plans/-/plans/contestsType/prior" data-base-url="/web/guest/plans/-/plans/contestsType/prior" class='showOtherContestsLink' >prior contests</a>, 
					
						<span class='count'><!--  --></span> more 
						<span class='plural'>contests</span>
						<span class='singular'>contest</span> will show up</span>
					</c:when>
					<c:otherwise>
						<span class="otherContestsCount">If you enable 
						<a href="/web/guest/plans/" data-base-url="/web/guest/plans/" class='showOtherContestsLink'>active contests</a>, 
				
						<span class='count'><!--  --></span> more 
						<span class='plural'>contests</span>
						<span class='singular'>contest</span> will show up</span>
					</c:otherwise>
				</c:choose>
			</c:if>
		</div>
    
 		
    </div> <!-- / contest-outline-right -->
	</div>

	<script>
	    var ontologyTerms = {};
		var contests = {};
		var otherContests = {};
		var focusAreas = {};
		var ontologySpaces = {};
		
		<c:forEach var="ontologySpace" items="${ontologySpaces}">
			ontologySpaces[${ontologySpace.id}] = {id: ${ontologySpace.id}, name: "${ontologySpace.name}"};
		</c:forEach>
		
		<c:forEach var="term" items="${ontologyTerms}">
			ontologyTerms[${term.id}] = {id: ${term.id}, parentId: ${term.parentId}, name: "${term.name}", contests: [], otherContests: [], space: ontologySpaces[${term.ontologySpaceId}]};
		</c:forEach>
		
		for (var termId in ontologyTerms) {
			if (ontologyTerms[termId].parentId > 0) {
				ontologyTerms[termId].parent = ontologyTerms[ontologyTerms[termId].parentId ];
			}
			else {
				ontologyTerms[termId].parent = null;
			}
		}
		<c:forEach var="focusArea" items="${focusAreas}">
			focusAreas[${focusArea.id}] = {id: ${focusArea.id}, terms: ${focusArea.termsIdsStr}};
		</c:forEach>
		var focusArea = null;
		var contest = null;
		
		function addContestToTermAndParents(contest, term, isOther) {
			if (term == null) return;
			if (isOther) {
				for (var i = 0 ; i &lt; term.otherContests.length; i++) {
					if (term.otherContests[i].id == contest.id) return;
				}
				term.otherContests.push(contest);
			}
			else {
				for (var i = 0 ; i &lt; term.contests.length; i++) {
					if (term.contests[i].id == contest.id) return;
				}
				term.contests.push(contest);
			}
			addContestToTermAndParents(contest, term.parent, isOther);
		}
		var contestsCount = 0;
		<c:forEach var="contest" items="${contests}">
			contest = {id: ${contest.contestPK}, name: "${contest.contestShortName}", description: "${contest.contestName }", focusAreaId: ${contest.focusAreaId}, 
					proposalsCount: ${contest.proposalsCount}, contestLink: '<proposalsPortlet:contestLink contestId="${contest.contestPK }" text="visit" />', 
					contestUrl: '/web/guest/plans/-/plans/contestId/${contest.contestPK}', created: ${contest.createdTime}};
			contests[${contest.contestPK}] = contest;
			contestsCount++;
			focusArea = focusAreas[${contest.focusAreaId}];
			
			for (var idx in focusArea.terms) {
				addContestToTermAndParents(contest, ontologyTerms[focusArea.terms[idx]]);
			}
			
		</c:forEach>

		<c:forEach var="contest" items="${otherContests}">
			otherContest = {id: ${contest.contestPK}, name: "${contest.contestShortName}", description: "${contest.contestName }", focusAreaId: ${contest.focusAreaId}, 
					proposalsCount: ${contest.proposalsCount}, contestLink: '<proposalsPortlet:contestLink contestId="${contest.contestPK }" text="visit" />'};
			otherContests[${contest.contestPK}] = otherContest;
			focusArea = focusAreas[${contest.focusAreaId}];
			
			for (var idx in focusArea.terms) {
				addContestToTermAndParents(otherContest, ontologyTerms[focusArea.terms[idx]], true);
			}
			
		</c:forEach>
		</script>
		<script>
		<![CDATA[
		// update ontology term contest counts
		
		for (var termId in ontologyTerms) {
			
			jQuery("> a > .count", "#ontologyTerm_" + termId).each(function() {
				var self = jQuery(this);
				if (ontologyTerms[termId].contests.length > 0) 
					self.removeClass("zero");
				else 
					self.addClass("zero");
				
				self.text(ontologyTerms[termId].contests.length);
			});
		}
		jQuery(".contest-count .count").text(contestsCount);
		function showTermContests(termId) {
			var container = jQuery(".contest-outline-right");
			var currentTerm = ontologyTerms[termId];
			
			jQuery(".cintro").hide();
			container.show();
			container.find(".contest-count .count").text(currentTerm.contests.length);
			
			window.location.hash = "term=" + termId + "_" + escape(currentTerm.name);
			// update toggle type link 
			var otherContestsInfoContainer = jQuery(".otherContestsInfoContainer");
			var showOtherContestsLink = otherContestsInfoContainer.find(".showOtherContestsLink");
			showOtherContestsLink.attr('href', showOtherContestsLink.attr("data-base-url") + window.location.hash);
			
			if (currentTerm.otherContests.length > 0) {
				console.log('updating count!', currentTerm.otherContests.length);
				otherContestsInfoContainer.find(".count").text(currentTerm.otherContests.length);
				otherContestsInfoContainer.find(".otherContestsCount").show().addClass(currentTerm.otherContests.length == 1 ? "singular" : "plural")
					.removeClass(currentTerm.otherContests.length == 1 ? "plural" : "singular");
			}
			else {
				otherContestsInfoContainer.find(".otherContestsCount").hide();
			}
			
			var termAndParents = [];
			var term = currentTerm;
			while (term != null) {
				termAndParents.push(term);
				term = term.parent;
			}
			
			termAndParents.reverse();
			
			var sectionsHtml = [];
			// mark all sections as eligible for removal
			jQuery(".section-list .section").addClass("sectionForRemoval");

			container.find('.section-list .active').removeClass('active');
			container.find("#sectionDetails_" + currentTerm.id).addClass('active');
			
			for (var i = 0; i < termAndParents.length; i++) {
				var term = termAndParents[i];
				var styleClass='section slevel' + (i+1) + ' s' + (i+1) + (term == currentTerm ? ' active' : '');
				// check if term isn't already visible
				var sectionElement = jQuery("#sectionDetails_" + term.id);
				if (sectionElement.length > 0) {
					// remove "for removal" mark
					sectionElement.removeClass("sectionForRemoval");
					continue;
				}
				sectionsHtml.push('<div class="');
				sectionsHtml.push(styleClass);
				sectionsHtml.push('" id="sectionDetails_');
				sectionsHtml.push(term.id);
				sectionsHtml.push('"><div class="spacr"><a href="#" class="txt" data-term-id="');
				sectionsHtml.push(term.id);
				sectionsHtml.push('">');
				sectionsHtml.push(term.name);
				sectionsHtml.push('</a></div></div>');
			}
			// all sections that are marked for removal append to separate container and slide it up
			var forRemovalContainer = jQuery("<div></div>");
			forRemovalContainer.appendTo(container.find('.section-list')).append(jQuery(".sectionForRemoval"));
			
			// append to show container to section-list and set it's html to all new sections
			var toShowContainer = jQuery("<div style='display: none;'></div>");
			toShowContainer.appendTo(container.find('.section-list')).html(sectionsHtml.join(""));
			
			container.find(".contest-list").slideUp();
			forRemovalContainer.slideUp({complete: function() {
				
				// after sliding is complete remove unnecessary sections and show new sections
				forRemovalContainer.remove();
				toShowContainer.slideDown({complete: function() {
					// move new sections to section-list as a main container and remove "toShowContainer" 
					toShowContainer.find(".section").appendTo(container.find('.section-list'));
					toShowContainer.remove();
					container.find("#sectionDetails_" + currentTerm.id).addClass('active');
					
					var contestsListHtml = [];
					if (currentTerm.contests.length == 0) {
						contestsListHtml.push('<div class="ctest"><p>No contests with the current selection</p></div>');
					}
					var duplicateContests = {};
					for (var i =0; i < currentTerm.contests.length; i++) {
						// check for duplicates
						var contest = currentTerm.contests[i];
						if (!(contest.name in duplicateContests)) {
							duplicateContests[contest.name] = 0;
							
						}
						duplicateContests[contest.name] ++;
					}
					contestsListHtml.push("<div class='otherContestsInfo'>");
					contestsListHtml.push(jQuery(".otherContestsInfoContainer").html());
					contestsListHtml.push("</div>");
					for (var i =0; i < currentTerm.contests.length; i++) {
						var contest = currentTerm.contests[i];
						contestsListHtml.push("<div class='ctest'><a href='#' class='trigger'></a><a class='contestName' href='");
						contestsListHtml.push(contest.contestUrl);
						contestsListHtml.push("'>");
						contestsListHtml.push(contest.name);
						if (duplicateContests[contest.name] > 1 && contest.created > 0) {
							contestsListHtml.push(" ");
							contestsListHtml.push(new Date(contest.created).getFullYear());
						}
						contestsListHtml.push("<span class='count'>");
						contestsListHtml.push(contest.proposalsCount);
						contestsListHtml.push("</span></a>");
						contestsListHtml.push("<div class='detail'><p>");
						contestsListHtml.push(contest.description);
						contestsListHtml.push("</p>");
						
						var focusArea = focusAreas[contest.focusAreaId];
						for (var j = 0; j < focusArea.terms.length; j++) {
							var term = ontologyTerms[focusArea.terms[j]];
							contestsListHtml.push("<p><span class='");
							contestsListHtml.push(term.space.name.toLowerCase());
							contestsListHtml.push("'>");
							contestsListHtml.push(term.space.name);
							contestsListHtml.push("</span>");
							contestsListHtml.push(term.name);
							contestsListHtml.push("</p>");
						}
						contestsListHtml.push("</div></div>");
					}
					
					
					jQuery(".otherContestsInfoContainer").hide();
					container.find(".contest-list").html(contestsListHtml.join(''));
					
					container.find(".contest-list").slideDown();
				}});
				
			}});
			
			jQuery(".showall").show();
			jQuery(".hideall").hide();

			
			
		}
		jQuery(".contest-outline-right .section-list").on('click', 'a', function(event) {
			event.preventDefault();
			console.log("Clicked on section term: " + jQuery(this).attr('data-term-id'), jQuery("#ontologyTerm_" + jQuery(this).attr('data-term-id')));
			jQuery("#ontologyTerm_" + jQuery(this).attr('data-term-id')).find('> a').click();
		});
		jQuery(".contest-outline-left").on('click', 'a', function(event) {
			event.preventDefault();
			var self = jQuery(this);
			if (self.hasClass('showall') || self.hasClass('hideall')) {
				return;
			}
			var container = self.parent();
			container.addClass('currentlyClicked');
			jQuery('.contest-outline-left li.active').not('.currentlyClicked').removeClass('active');
			jQuery('.contest-outline-left a.open').each(function() {
				var parent = jQuery(this).parent();
				if (!parent.hasClass('currentlyClicked') && parent.find(".currentlyClicked").length == 0) {
					// this is different branch than the one currently clicked, close it
					parent.find(".open").removeClass("open");
					parent.find("> ul").slideUp();
				}
			});
			container.removeClass('currentlyClicked').toggleClass('active');
			self.toggleClass('open');
			
			
			if (self.hasClass('open')) {
				container.find("> ul").slideDown();
				// if this is a space, open also it's root term
				
				if (container.parent().hasClass('level0')) {
					if (container.find("> ul > li").length == 1) {
						container.find("> ul > li > a").addClass('open');
						container.find("> ul > li > ul").slideDown();
						showTermContests(container.find("> ul > li > a").attr('data-term-id'));
					}
				}
			}
			else {
				container.find("> ul").slideUp();
			}
			var attr = self.attr('data-term-id');
			if (typeof attr !== 'undefined' && attr !== false) { 
				showTermContests(attr);
			}
		});

		jQuery(".contest-outline-right").on('click', '.ctest > a.trigger', function(event) {
			event.preventDefault();
			var self = jQuery(this);
			
			self.parent().addClass('currentlyClicked');
			var otherContests = jQuery(".contest-outline-right").find(".ctest").not(".currentlyClicked");
			otherContests.find("a").removeClass("active");
			otherContests.find(".detail").slideUp();
			self.parent().removeClass('currentlyClicked');
			
			self.toggleClass('active');
			if (self.hasClass('active')) {
				self.parent().find('> .detail').slideDown();
			}
			else {
				self.parent().find('.detail').slideUp();
			}
		});
		
		jQuery(".expand a").click(function() {
			console.log("clicked", this);
			jQuery(".expand a").toggle();
			if (jQuery(this).hasClass('showall')) {
				jQuery(".contest-outline-left a").addClass('open');
				jQuery(".contest-outline-left .level0 ul").slideDown();
				console.log("sliding down");
			}
			else {
				jQuery(".contest-outline-left a").removeClass('open');
				jQuery(".contest-outline-left .level0 ul").slideUp();
				console.log("sliding up");
			}
		});
		
		// initialize the screen with term provided in hash (if present) 
		var termIdHashRegex = /#term=(\d*)_.*/;
		
		var match = termIdHashRegex.exec(window.location.hash);
		if (match != null) {
			var termId = match[1];
			showTermContests(termId);
			var term = ontologyTerms[termId];
			jQuery("#ontologyTerm_" + termId).addClass('active');
			var termContainer = null;
			while (term != null) {
				termContainer = jQuery("#ontologyTerm_" + term.id);
				termContainer.find('> ul').slideDown();
				termContainer.find('> a').addClass('open');
				jQuery("#ontologyterm_" + term.id).slideDown();
				term = term.parent;
			}
			var spaceContainer = termContainer.parent().parent();
			spaceContainer.find("> ul").slideDown();
			termContainer.parent().slideDown();
			spaceContainer.find("a.section-head").addClass("open");
			
		}
		
		]]>
	</script>
</jsp:root>